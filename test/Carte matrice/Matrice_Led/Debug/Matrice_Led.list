
Matrice_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000494  20000098  08005280  00020098  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  2000052c  08005280  0002052c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a696  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003237  00000000  00000000  0003a753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000deac  00000000  00000000  0003d98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd8  00000000  00000000  0004b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f18  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00019c44  00000000  00000000  0004d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018684  00000000  00000000  0006736c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0008fd1e  00000000  00000000  0007f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0010f70e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003540  00000000  00000000  0010f764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08005044 	.word	0x08005044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08005044 	.word	0x08005044

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fbea 	bl	800093c <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 fb8b 	bl	8000894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	2000002c 	.word	0x2000002c

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 fb65 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f003 fd16 	bl	8003bdc <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000100 	.word	0x20000100
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000100 	.word	0x20000100

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000204:	2800      	cmp	r0, #0
 8000206:	f000 80a1 	beq.w	800034c <HAL_CAN_Init+0x148>
{
 800020a:	b538      	push	{r3, r4, r5, lr}
 800020c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800020e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000212:	b1d3      	cbz	r3, 800024a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000214:	6822      	ldr	r2, [r4, #0]
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800021e:	f7ff ffd7 	bl	80001d0 <HAL_GetTick>
 8000222:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000224:	6823      	ldr	r3, [r4, #0]
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	f012 0f01 	tst.w	r2, #1
 800022c:	d110      	bne.n	8000250 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800022e:	f7ff ffcf 	bl	80001d0 <HAL_GetTick>
 8000232:	1b40      	subs	r0, r0, r5
 8000234:	280a      	cmp	r0, #10
 8000236:	d9f5      	bls.n	8000224 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000240:	2305      	movs	r3, #5
 8000242:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000246:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000248:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800024a:	f003 fce9 	bl	8003c20 <HAL_CAN_MspInit>
 800024e:	e7e1      	b.n	8000214 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	f022 0202 	bic.w	r2, r2, #2
 8000256:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000258:	f7ff ffba 	bl	80001d0 <HAL_GetTick>
 800025c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800025e:	6823      	ldr	r3, [r4, #0]
 8000260:	685a      	ldr	r2, [r3, #4]
 8000262:	f012 0f02 	tst.w	r2, #2
 8000266:	d00d      	beq.n	8000284 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000268:	f7ff ffb2 	bl	80001d0 <HAL_GetTick>
 800026c:	1b40      	subs	r0, r0, r5
 800026e:	280a      	cmp	r0, #10
 8000270:	d9f5      	bls.n	800025e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000278:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800027a:	2305      	movs	r3, #5
 800027c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000280:	2001      	movs	r0, #1
 8000282:	e7e1      	b.n	8000248 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000284:	7e22      	ldrb	r2, [r4, #24]
 8000286:	2a01      	cmp	r2, #1
 8000288:	d03d      	beq.n	8000306 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000290:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000292:	7e63      	ldrb	r3, [r4, #25]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d03b      	beq.n	8000310 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000298:	6822      	ldr	r2, [r4, #0]
 800029a:	6813      	ldr	r3, [r2, #0]
 800029c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002a2:	7ea3      	ldrb	r3, [r4, #26]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d039      	beq.n	800031c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002a8:	6822      	ldr	r2, [r4, #0]
 80002aa:	6813      	ldr	r3, [r2, #0]
 80002ac:	f023 0320 	bic.w	r3, r3, #32
 80002b0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80002b2:	7ee3      	ldrb	r3, [r4, #27]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d037      	beq.n	8000328 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002b8:	6822      	ldr	r2, [r4, #0]
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	f043 0310 	orr.w	r3, r3, #16
 80002c0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80002c2:	7f23      	ldrb	r3, [r4, #28]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d035      	beq.n	8000334 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002c8:	6822      	ldr	r2, [r4, #0]
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	f023 0308 	bic.w	r3, r3, #8
 80002d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80002d2:	7f63      	ldrb	r3, [r4, #29]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d033      	beq.n	8000340 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002d8:	6822      	ldr	r2, [r4, #0]
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	f023 0304 	bic.w	r3, r3, #4
 80002e0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002e2:	68a3      	ldr	r3, [r4, #8]
 80002e4:	68e2      	ldr	r2, [r4, #12]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	6922      	ldr	r2, [r4, #16]
 80002ea:	4313      	orrs	r3, r2
 80002ec:	6962      	ldr	r2, [r4, #20]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	6862      	ldr	r2, [r4, #4]
 80002f2:	3a01      	subs	r2, #1
 80002f4:	6821      	ldr	r1, [r4, #0]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80002fa:	2000      	movs	r0, #0
 80002fc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80002fe:	2301      	movs	r3, #1
 8000300:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000304:	e7a0      	b.n	8000248 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	e7c0      	b.n	8000292 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000310:	6822      	ldr	r2, [r4, #0]
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	e7c2      	b.n	80002a2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800031c:	6822      	ldr	r2, [r4, #0]
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f043 0320 	orr.w	r3, r3, #32
 8000324:	6013      	str	r3, [r2, #0]
 8000326:	e7c4      	b.n	80002b2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000328:	6822      	ldr	r2, [r4, #0]
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6013      	str	r3, [r2, #0]
 8000332:	e7c6      	b.n	80002c2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000334:	6822      	ldr	r2, [r4, #0]
 8000336:	6813      	ldr	r3, [r2, #0]
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	6013      	str	r3, [r2, #0]
 800033e:	e7c8      	b.n	80002d2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000340:	6822      	ldr	r2, [r4, #0]
 8000342:	6813      	ldr	r3, [r2, #0]
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6013      	str	r3, [r2, #0]
 800034a:	e7ca      	b.n	80002e2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800034c:	2001      	movs	r0, #1
}
 800034e:	4770      	bx	lr

08000350 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000350:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000352:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000356:	3b01      	subs	r3, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b01      	cmp	r3, #1
 800035c:	d905      	bls.n	800036a <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800035e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000364:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
  }
}
 8000368:	4770      	bx	lr
{
 800036a:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800036c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000378:	694b      	ldr	r3, [r1, #20]
 800037a:	f003 031f 	and.w	r3, r3, #31
 800037e:	2001      	movs	r0, #1
 8000380:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000384:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000388:	43dc      	mvns	r4, r3
 800038a:	ea20 0003 	bic.w	r0, r0, r3
 800038e:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000392:	69c8      	ldr	r0, [r1, #28]
 8000394:	b9a8      	cbnz	r0, 80003c2 <HAL_CAN_ConfigFilter+0x72>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000396:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 800039a:	4020      	ands	r0, r4
 800039c:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003a0:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003a2:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003a4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003a6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003aa:	3048      	adds	r0, #72	; 0x48
 80003ac:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003b0:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80003b2:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003b4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003b6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003ba:	3048      	adds	r0, #72	; 0x48
 80003bc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80003c0:	6045      	str	r5, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80003c2:	69c8      	ldr	r0, [r1, #28]
 80003c4:	2801      	cmp	r0, #1
 80003c6:	d019      	beq.n	80003fc <HAL_CAN_ConfigFilter+0xac>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80003c8:	6988      	ldr	r0, [r1, #24]
 80003ca:	bb70      	cbnz	r0, 800042a <HAL_CAN_ConfigFilter+0xda>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80003cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80003d0:	4020      	ands	r0, r4
 80003d2:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80003d6:	6908      	ldr	r0, [r1, #16]
 80003d8:	bb68      	cbnz	r0, 8000436 <HAL_CAN_ConfigFilter+0xe6>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80003da:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80003de:	4004      	ands	r4, r0
 80003e0:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80003e4:	6a09      	ldr	r1, [r1, #32]
 80003e6:	2901      	cmp	r1, #1
 80003e8:	d02b      	beq.n	8000442 <HAL_CAN_ConfigFilter+0xf2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80003ea:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80003f6:	2000      	movs	r0, #0
}
 80003f8:	bc70      	pop	{r4, r5, r6}
 80003fa:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80003fc:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000400:	4318      	orrs	r0, r3
 8000402:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000406:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000408:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800040a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800040c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000410:	3048      	adds	r0, #72	; 0x48
 8000412:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000416:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000418:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800041a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800041c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000420:	3048      	adds	r0, #72	; 0x48
 8000422:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000426:	6045      	str	r5, [r0, #4]
 8000428:	e7ce      	b.n	80003c8 <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800042a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800042e:	4318      	orrs	r0, r3
 8000430:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000434:	e7cf      	b.n	80003d6 <HAL_CAN_ConfigFilter+0x86>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000436:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 800043a:	4318      	orrs	r0, r3
 800043c:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8000440:	e7d0      	b.n	80003e4 <HAL_CAN_ConfigFilter+0x94>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000442:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000446:	430b      	orrs	r3, r1
 8000448:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 800044c:	e7cd      	b.n	80003ea <HAL_CAN_ConfigFilter+0x9a>

0800044e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800044e:	b570      	push	{r4, r5, r6, lr}
 8000450:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000452:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000456:	b2ed      	uxtb	r5, r5
 8000458:	2d01      	cmp	r5, #1
 800045a:	d006      	beq.n	800046a <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800045c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800045e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000462:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000464:	2501      	movs	r5, #1
  }
}
 8000466:	4628      	mov	r0, r5
 8000468:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 800046a:	2302      	movs	r3, #2
 800046c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000470:	6802      	ldr	r2, [r0, #0]
 8000472:	6813      	ldr	r3, [r2, #0]
 8000474:	f023 0301 	bic.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800047a:	f7ff fea9 	bl	80001d0 <HAL_GetTick>
 800047e:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000480:	6823      	ldr	r3, [r4, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f013 0f01 	tst.w	r3, #1
 8000488:	d00c      	beq.n	80004a4 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800048a:	f7ff fea1 	bl	80001d0 <HAL_GetTick>
 800048e:	1b83      	subs	r3, r0, r6
 8000490:	2b0a      	cmp	r3, #10
 8000492:	d9f5      	bls.n	8000480 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800049c:	2305      	movs	r3, #5
 800049e:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80004a2:	e7e0      	b.n	8000466 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004a4:	2500      	movs	r5, #0
 80004a6:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80004a8:	e7dd      	b.n	8000466 <HAL_CAN_Start+0x18>

080004aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80004aa:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 80004ac:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80004b0:	3c01      	subs	r4, #1
 80004b2:	b2e4      	uxtb	r4, r4
 80004b4:	2c01      	cmp	r4, #1
 80004b6:	f200 8091 	bhi.w	80005dc <HAL_CAN_GetRxMessage+0x132>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80004ba:	b951      	cbnz	r1, 80004d2 <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80004bc:	6804      	ldr	r4, [r0, #0]
 80004be:	68e4      	ldr	r4, [r4, #12]
 80004c0:	f014 0f03 	tst.w	r4, #3
 80004c4:	d110      	bne.n	80004e8 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004cc:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80004ce:	2001      	movs	r0, #1
 80004d0:	e089      	b.n	80005e6 <HAL_CAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80004d2:	6804      	ldr	r4, [r0, #0]
 80004d4:	6924      	ldr	r4, [r4, #16]
 80004d6:	f014 0f03 	tst.w	r4, #3
 80004da:	d105      	bne.n	80004e8 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e2:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80004e4:	2001      	movs	r0, #1
 80004e6:	e07e      	b.n	80005e6 <HAL_CAN_GetRxMessage+0x13c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80004e8:	6805      	ldr	r5, [r0, #0]
 80004ea:	f101 041b 	add.w	r4, r1, #27
 80004ee:	0124      	lsls	r4, r4, #4
 80004f0:	592c      	ldr	r4, [r5, r4]
 80004f2:	f004 0404 	and.w	r4, r4, #4
 80004f6:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d161      	bne.n	80005c0 <HAL_CAN_GetRxMessage+0x116>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80004fc:	6805      	ldr	r5, [r0, #0]
 80004fe:	f101 041b 	add.w	r4, r1, #27
 8000502:	0124      	lsls	r4, r4, #4
 8000504:	592c      	ldr	r4, [r5, r4]
 8000506:	0d64      	lsrs	r4, r4, #21
 8000508:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800050a:	6805      	ldr	r5, [r0, #0]
 800050c:	f101 041b 	add.w	r4, r1, #27
 8000510:	0124      	lsls	r4, r4, #4
 8000512:	592d      	ldr	r5, [r5, r4]
 8000514:	f005 0502 	and.w	r5, r5, #2
 8000518:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800051a:	6805      	ldr	r5, [r0, #0]
 800051c:	4425      	add	r5, r4
 800051e:	686d      	ldr	r5, [r5, #4]
 8000520:	f005 050f 	and.w	r5, r5, #15
 8000524:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000526:	6805      	ldr	r5, [r0, #0]
 8000528:	4425      	add	r5, r4
 800052a:	686d      	ldr	r5, [r5, #4]
 800052c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000530:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000532:	6805      	ldr	r5, [r0, #0]
 8000534:	442c      	add	r4, r5
 8000536:	6864      	ldr	r4, [r4, #4]
 8000538:	0c24      	lsrs	r4, r4, #16
 800053a:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800053c:	6802      	ldr	r2, [r0, #0]
 800053e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000542:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000546:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000548:	6802      	ldr	r2, [r0, #0]
 800054a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800054e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000552:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000556:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000558:	6802      	ldr	r2, [r0, #0]
 800055a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800055e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000562:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000566:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800056e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000576:	6802      	ldr	r2, [r0, #0]
 8000578:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800057c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000580:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000582:	6802      	ldr	r2, [r0, #0]
 8000584:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000588:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800058c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000590:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000592:	6802      	ldr	r2, [r0, #0]
 8000594:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000598:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800059c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80005a0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80005a2:	6802      	ldr	r2, [r0, #0]
 80005a4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005a8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005ac:	0e12      	lsrs	r2, r2, #24
 80005ae:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80005b0:	b971      	cbnz	r1, 80005d0 <HAL_CAN_GetRxMessage+0x126>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80005b2:	6802      	ldr	r2, [r0, #0]
 80005b4:	68d3      	ldr	r3, [r2, #12]
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80005bc:	2000      	movs	r0, #0
 80005be:	e012      	b.n	80005e6 <HAL_CAN_GetRxMessage+0x13c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80005c0:	6805      	ldr	r5, [r0, #0]
 80005c2:	f101 041b 	add.w	r4, r1, #27
 80005c6:	0124      	lsls	r4, r4, #4
 80005c8:	592c      	ldr	r4, [r5, r4]
 80005ca:	08e4      	lsrs	r4, r4, #3
 80005cc:	6054      	str	r4, [r2, #4]
 80005ce:	e79c      	b.n	800050a <HAL_CAN_GetRxMessage+0x60>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80005d0:	6802      	ldr	r2, [r0, #0]
 80005d2:	6913      	ldr	r3, [r2, #16]
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	6113      	str	r3, [r2, #16]
 80005da:	e7ef      	b.n	80005bc <HAL_CAN_GetRxMessage+0x112>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005e4:	2001      	movs	r0, #1
  }
}
 80005e6:	bc30      	pop	{r4, r5}
 80005e8:	4770      	bx	lr

080005ea <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80005ea:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d905      	bls.n	8000602 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005fc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005fe:	2001      	movs	r0, #1
  }
}
 8000600:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000602:	6802      	ldr	r2, [r0, #0]
 8000604:	6953      	ldr	r3, [r2, #20]
 8000606:	4319      	orrs	r1, r3
 8000608:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800060a:	2000      	movs	r0, #0
 800060c:	4770      	bx	lr

0800060e <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800060e:	4770      	bx	lr

08000610 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000610:	4770      	bx	lr

08000612 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000612:	4770      	bx	lr

08000614 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000614:	4770      	bx	lr

08000616 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000616:	4770      	bx	lr

08000618 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000618:	4770      	bx	lr

0800061a <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800061a:	4770      	bx	lr

0800061c <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800061e:	4770      	bx	lr

08000620 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000620:	4770      	bx	lr

08000622 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000622:	4770      	bx	lr

08000624 <HAL_CAN_IRQHandler>:
{
 8000624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000628:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800062a:	6803      	ldr	r3, [r0, #0]
 800062c:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800062e:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000632:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000634:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000638:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800063c:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000640:	f014 0601 	ands.w	r6, r4, #1
 8000644:	d03b      	beq.n	80006be <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000646:	f017 0601 	ands.w	r6, r7, #1
 800064a:	d016      	beq.n	800067a <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800064c:	2201      	movs	r2, #1
 800064e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000650:	f017 0f02 	tst.w	r7, #2
 8000654:	d108      	bne.n	8000668 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000656:	f017 0f04 	tst.w	r7, #4
 800065a:	d10c      	bne.n	8000676 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800065c:	f017 0608 	ands.w	r6, r7, #8
 8000660:	d006      	beq.n	8000670 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000662:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000666:	e008      	b.n	800067a <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000668:	f7ff ffd1 	bl	800060e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800066c:	2600      	movs	r6, #0
 800066e:	e004      	b.n	800067a <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000670:	f7ff ffd0 	bl	8000614 <HAL_CAN_TxMailbox0AbortCallback>
 8000674:	e001      	b.n	800067a <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000676:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800067a:	f417 7f80 	tst.w	r7, #256	; 0x100
 800067e:	d00d      	beq.n	800069c <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000680:	682b      	ldr	r3, [r5, #0]
 8000682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000686:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000688:	f417 7f00 	tst.w	r7, #512	; 0x200
 800068c:	f040 8086 	bne.w	800079c <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000690:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8000694:	f000 8086 	beq.w	80007a4 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000698:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800069c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006a0:	d00d      	beq.n	80006be <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006a2:	682b      	ldr	r3, [r5, #0]
 80006a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006aa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006ae:	f040 8083 	bne.w	80007b8 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80006b2:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80006b6:	f000 8083 	beq.w	80007c0 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80006ba:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80006be:	f014 0f08 	tst.w	r4, #8
 80006c2:	d007      	beq.n	80006d4 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80006c4:	f01b 0f10 	tst.w	fp, #16
 80006c8:	d004      	beq.n	80006d4 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80006ca:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80006ce:	682b      	ldr	r3, [r5, #0]
 80006d0:	2210      	movs	r2, #16
 80006d2:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80006d4:	f014 0f04 	tst.w	r4, #4
 80006d8:	d002      	beq.n	80006e0 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80006da:	f01b 0f08 	tst.w	fp, #8
 80006de:	d179      	bne.n	80007d4 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80006e0:	f014 0f02 	tst.w	r4, #2
 80006e4:	d004      	beq.n	80006f0 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80006e6:	682b      	ldr	r3, [r5, #0]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f013 0f03 	tst.w	r3, #3
 80006ee:	d178      	bne.n	80007e2 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80006f0:	f014 0f40 	tst.w	r4, #64	; 0x40
 80006f4:	d007      	beq.n	8000706 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80006f6:	f01a 0f10 	tst.w	sl, #16
 80006fa:	d004      	beq.n	8000706 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80006fc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	2210      	movs	r2, #16
 8000704:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000706:	f014 0f20 	tst.w	r4, #32
 800070a:	d002      	beq.n	8000712 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800070c:	f01a 0f08 	tst.w	sl, #8
 8000710:	d16b      	bne.n	80007ea <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000712:	f014 0f10 	tst.w	r4, #16
 8000716:	d004      	beq.n	8000722 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000718:	682b      	ldr	r3, [r5, #0]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f013 0f03 	tst.w	r3, #3
 8000720:	d16a      	bne.n	80007f8 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000722:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000726:	d002      	beq.n	800072e <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000728:	f018 0f10 	tst.w	r8, #16
 800072c:	d168      	bne.n	8000800 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800072e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000732:	d002      	beq.n	800073a <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000734:	f018 0f08 	tst.w	r8, #8
 8000738:	d169      	bne.n	800080e <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800073a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800073e:	d07a      	beq.n	8000836 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000740:	f018 0f04 	tst.w	r8, #4
 8000744:	d074      	beq.n	8000830 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000746:	f414 7f80 	tst.w	r4, #256	; 0x100
 800074a:	d004      	beq.n	8000756 <HAL_CAN_IRQHandler+0x132>
 800074c:	f019 0f01 	tst.w	r9, #1
 8000750:	d001      	beq.n	8000756 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000752:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000756:	f414 7f00 	tst.w	r4, #512	; 0x200
 800075a:	d004      	beq.n	8000766 <HAL_CAN_IRQHandler+0x142>
 800075c:	f019 0f02 	tst.w	r9, #2
 8000760:	d001      	beq.n	8000766 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000762:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000766:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800076a:	d004      	beq.n	8000776 <HAL_CAN_IRQHandler+0x152>
 800076c:	f019 0f04 	tst.w	r9, #4
 8000770:	d001      	beq.n	8000776 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000772:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000776:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800077a:	d059      	beq.n	8000830 <HAL_CAN_IRQHandler+0x20c>
 800077c:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8000780:	d056      	beq.n	8000830 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8000782:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000786:	d065      	beq.n	8000854 <HAL_CAN_IRQHandler+0x230>
 8000788:	d858      	bhi.n	800083c <HAL_CAN_IRQHandler+0x218>
 800078a:	f1b9 0f20 	cmp.w	r9, #32
 800078e:	d05e      	beq.n	800084e <HAL_CAN_IRQHandler+0x22a>
 8000790:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8000794:	d142      	bne.n	800081c <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000796:	f046 0620 	orr.w	r6, r6, #32
            break;
 800079a:	e044      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800079c:	4628      	mov	r0, r5
 800079e:	f7ff ff37 	bl	8000610 <HAL_CAN_TxMailbox1CompleteCallback>
 80007a2:	e77b      	b.n	800069c <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80007a4:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80007a8:	d002      	beq.n	80007b0 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80007aa:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80007ae:	e775      	b.n	800069c <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80007b0:	4628      	mov	r0, r5
 80007b2:	f7ff ff30 	bl	8000616 <HAL_CAN_TxMailbox1AbortCallback>
 80007b6:	e771      	b.n	800069c <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80007b8:	4628      	mov	r0, r5
 80007ba:	f7ff ff2a 	bl	8000612 <HAL_CAN_TxMailbox2CompleteCallback>
 80007be:	e77e      	b.n	80006be <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80007c0:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 80007c4:	d002      	beq.n	80007cc <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80007c6:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80007ca:	e778      	b.n	80006be <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80007cc:	4628      	mov	r0, r5
 80007ce:	f7ff ff23 	bl	8000618 <HAL_CAN_TxMailbox2AbortCallback>
 80007d2:	e774      	b.n	80006be <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80007d4:	682b      	ldr	r3, [r5, #0]
 80007d6:	2208      	movs	r2, #8
 80007d8:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80007da:	4628      	mov	r0, r5
 80007dc:	f7ff ff1d 	bl	800061a <HAL_CAN_RxFifo0FullCallback>
 80007e0:	e77e      	b.n	80006e0 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80007e2:	4628      	mov	r0, r5
 80007e4:	f002 ff92 	bl	800370c <HAL_CAN_RxFifo0MsgPendingCallback>
 80007e8:	e782      	b.n	80006f0 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80007ea:	682b      	ldr	r3, [r5, #0]
 80007ec:	2208      	movs	r2, #8
 80007ee:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80007f0:	4628      	mov	r0, r5
 80007f2:	f7ff ff13 	bl	800061c <HAL_CAN_RxFifo1FullCallback>
 80007f6:	e78c      	b.n	8000712 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80007f8:	4628      	mov	r0, r5
 80007fa:	f002 ff96 	bl	800372a <HAL_CAN_RxFifo1MsgPendingCallback>
 80007fe:	e790      	b.n	8000722 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000800:	682b      	ldr	r3, [r5, #0]
 8000802:	2210      	movs	r2, #16
 8000804:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000806:	4628      	mov	r0, r5
 8000808:	f7ff ff09 	bl	800061e <HAL_CAN_SleepCallback>
 800080c:	e78f      	b.n	800072e <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800080e:	682b      	ldr	r3, [r5, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000814:	4628      	mov	r0, r5
 8000816:	f7ff ff03 	bl	8000620 <HAL_CAN_WakeUpFromRxMsgCallback>
 800081a:	e78e      	b.n	800073a <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 800081c:	f1b9 0f10 	cmp.w	r9, #16
 8000820:	d101      	bne.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8000822:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000826:	682a      	ldr	r2, [r5, #0]
 8000828:	6993      	ldr	r3, [r2, #24]
 800082a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800082e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000830:	682b      	ldr	r3, [r5, #0]
 8000832:	2204      	movs	r2, #4
 8000834:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000836:	b99e      	cbnz	r6, 8000860 <HAL_CAN_IRQHandler+0x23c>
}
 8000838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 800083c:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000840:	d00b      	beq.n	800085a <HAL_CAN_IRQHandler+0x236>
 8000842:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8000846:	d1ee      	bne.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000848:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 800084c:	e7eb      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 800084e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000852:	e7e8      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8000854:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8000858:	e7e5      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 800085a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 800085e:	e7e2      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000860:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000862:	431e      	orrs	r6, r3
 8000864:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000866:	4628      	mov	r0, r5
 8000868:	f7ff fedb 	bl	8000622 <HAL_CAN_ErrorCallback>
}
 800086c:	e7e4      	b.n	8000838 <HAL_CAN_IRQHandler+0x214>
	...

08000870 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000872:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800087c:	0200      	lsls	r0, r0, #8
 800087e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000882:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800088c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000894:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_NVIC_SetPriority+0x60>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089e:	f1c3 0407 	rsb	r4, r3, #7
 80008a2:	2c04      	cmp	r4, #4
 80008a4:	bf28      	it	cs
 80008a6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a8:	1d1d      	adds	r5, r3, #4
 80008aa:	2d06      	cmp	r5, #6
 80008ac:	d918      	bls.n	80008e0 <HAL_NVIC_SetPriority+0x4c>
 80008ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 35ff 	mov.w	r5, #4294967295
 80008b4:	fa05 f404 	lsl.w	r4, r5, r4
 80008b8:	ea21 0104 	bic.w	r1, r1, r4
 80008bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008be:	fa05 f303 	lsl.w	r3, r5, r3
 80008c2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80008c8:	2800      	cmp	r0, #0
 80008ca:	db0b      	blt.n	80008e4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	0109      	lsls	r1, r1, #4
 80008ce:	b2c9      	uxtb	r1, r1
 80008d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80008d8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008dc:	bc30      	pop	{r4, r5}
 80008de:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e0:	2300      	movs	r3, #0
 80008e2:	e7e5      	b.n	80008b0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	f000 000f 	and.w	r0, r0, #15
 80008e8:	0109      	lsls	r1, r1, #4
 80008ea:	b2c9      	uxtb	r1, r1
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_NVIC_SetPriority+0x64>)
 80008ee:	5419      	strb	r1, [r3, r0]
 80008f0:	e7f4      	b.n	80008dc <HAL_NVIC_SetPriority+0x48>
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00
 80008f8:	e000ed14 	.word	0xe000ed14

080008fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008fc:	2800      	cmp	r0, #0
 80008fe:	db07      	blt.n	8000910 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000900:	f000 021f 	and.w	r2, r0, #31
 8000904:	0940      	lsrs	r0, r0, #5
 8000906:	2301      	movs	r3, #1
 8000908:	4093      	lsls	r3, r2
 800090a:	4a02      	ldr	r2, [pc, #8]	; (8000914 <HAL_NVIC_EnableIRQ+0x18>)
 800090c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000918:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800091c:	4905      	ldr	r1, [pc, #20]	; (8000934 <HAL_NVIC_SystemReset+0x1c>)
 800091e:	68ca      	ldr	r2, [r1, #12]
 8000920:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <HAL_NVIC_SystemReset+0x20>)
 8000926:	4313      	orrs	r3, r2
 8000928:	60cb      	str	r3, [r1, #12]
 800092a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800092e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000930:	e7fd      	b.n	800092e <HAL_NVIC_SystemReset+0x16>
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	05fa0004 	.word	0x05fa0004

0800093c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	3801      	subs	r0, #1
 800093e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000942:	d20a      	bcs.n	800095a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_SYSTICK_Config+0x24>)
 8000946:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_SYSTICK_Config+0x28>)
 800094a:	21f0      	movs	r1, #240	; 0xf0
 800094c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	2000      	movs	r0, #0
 8000952:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <FLASH_Program_HalfWord+0x14>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <FLASH_Program_HalfWord+0x18>)
 8000970:	6913      	ldr	r3, [r2, #16]
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000978:	8001      	strh	r1, [r0, #0]
}
 800097a:	4770      	bx	lr
 800097c:	20000108 	.word	0x20000108
 8000980:	40022000 	.word	0x40022000

08000984 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <FLASH_SetErrorCode+0x68>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	f013 0310 	ands.w	r3, r3, #16
 800098c:	d005      	beq.n	800099a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <FLASH_SetErrorCode+0x6c>)
 8000990:	69d3      	ldr	r3, [r2, #28]
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000998:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <FLASH_SetErrorCode+0x68>)
 800099c:	68d2      	ldr	r2, [r2, #12]
 800099e:	f012 0f04 	tst.w	r2, #4
 80009a2:	d006      	beq.n	80009b2 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009a4:	4912      	ldr	r1, [pc, #72]	; (80009f0 <FLASH_SetErrorCode+0x6c>)
 80009a6:	69ca      	ldr	r2, [r1, #28]
 80009a8:	f042 0201 	orr.w	r2, r2, #1
 80009ac:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80009ae:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009b4:	69d2      	ldr	r2, [r2, #28]
 80009b6:	f012 0f01 	tst.w	r2, #1
 80009ba:	d009      	beq.n	80009d0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <FLASH_SetErrorCode+0x6c>)
 80009be:	69ca      	ldr	r2, [r1, #28]
 80009c0:	f042 0204 	orr.w	r2, r2, #4
 80009c4:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009c6:	4909      	ldr	r1, [pc, #36]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009c8:	69ca      	ldr	r2, [r1, #28]
 80009ca:	f022 0201 	bic.w	r2, r2, #1
 80009ce:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009d0:	f240 1201 	movw	r2, #257	; 0x101
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d002      	beq.n	80009de <FLASH_SetErrorCode+0x5a>
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009da:	60d3      	str	r3, [r2, #12]
}  
 80009dc:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009de:	4a03      	ldr	r2, [pc, #12]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009e0:	69d3      	ldr	r3, [r2, #28]
 80009e2:	f023 0301 	bic.w	r3, r3, #1
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000
 80009f0:	20000108 	.word	0x20000108

080009f4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_FLASH_Unlock+0x2c>)
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009fc:	d00b      	beq.n	8000a16 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_FLASH_Unlock+0x2c>)
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_FLASH_Unlock+0x30>)
 8000a02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a04:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000a08:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000a10:	d103      	bne.n	8000a1a <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8000a12:	2000      	movs	r0, #0
 8000a14:	4770      	bx	lr
 8000a16:	2000      	movs	r0, #0
 8000a18:	4770      	bx	lr
      status = HAL_ERROR;
 8000a1a:	2001      	movs	r0, #1
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000
 8000a24:	45670123 	.word	0x45670123

08000a28 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <HAL_FLASH_Lock+0x10>)
 8000a2a:	6913      	ldr	r3, [r2, #16]
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6113      	str	r3, [r2, #16]
}
 8000a32:	2000      	movs	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <FLASH_WaitForLastOperation>:
{
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff fbc6 	bl	80001d0 <HAL_GetTick>
 8000a44:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	f013 0f01 	tst.w	r3, #1
 8000a4e:	d00a      	beq.n	8000a66 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000a50:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a54:	d0f7      	beq.n	8000a46 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a56:	b124      	cbz	r4, 8000a62 <FLASH_WaitForLastOperation+0x26>
 8000a58:	f7ff fbba 	bl	80001d0 <HAL_GetTick>
 8000a5c:	1b40      	subs	r0, r0, r5
 8000a5e:	42a0      	cmp	r0, r4
 8000a60:	d9f1      	bls.n	8000a46 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000a62:	2003      	movs	r0, #3
 8000a64:	e01b      	b.n	8000a9e <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	f013 0f20 	tst.w	r3, #32
 8000a6e:	d002      	beq.n	8000a76 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a72:	2220      	movs	r2, #32
 8000a74:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f013 0f10 	tst.w	r3, #16
 8000a7e:	d10b      	bne.n	8000a98 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a82:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a84:	f013 0f01 	tst.w	r3, #1
 8000a88:	d106      	bne.n	8000a98 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a8e:	f013 0f04 	tst.w	r3, #4
 8000a92:	d101      	bne.n	8000a98 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8000a94:	2000      	movs	r0, #0
 8000a96:	e002      	b.n	8000a9e <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8000a98:	f7ff ff74 	bl	8000984 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a9c:	2001      	movs	r0, #1
}
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_FLASH_Program>:
{
 8000aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa8:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <HAL_FLASH_Program+0x94>)
 8000aac:	7e1b      	ldrb	r3, [r3, #24]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d040      	beq.n	8000b34 <HAL_FLASH_Program+0x90>
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	460f      	mov	r7, r1
 8000ab6:	4690      	mov	r8, r2
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_FLASH_Program+0x94>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000abe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ac2:	f7ff ffbb 	bl	8000a3c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	bb70      	cbnz	r0, 8000b28 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000aca:	2c01      	cmp	r4, #1
 8000acc:	d029      	beq.n	8000b22 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ace:	2c02      	cmp	r4, #2
 8000ad0:	d024      	beq.n	8000b1c <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8000ad2:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000ad6:	461c      	mov	r4, r3
 8000ad8:	454c      	cmp	r4, r9
 8000ada:	d225      	bcs.n	8000b28 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000adc:	0121      	lsls	r1, r4, #4
 8000ade:	f1c1 0220 	rsb	r2, r1, #32
 8000ae2:	f1a1 0320 	sub.w	r3, r1, #32
 8000ae6:	fa28 f101 	lsr.w	r1, r8, r1
 8000aea:	fa06 f202 	lsl.w	r2, r6, r2
 8000aee:	4311      	orrs	r1, r2
 8000af0:	fa26 f303 	lsr.w	r3, r6, r3
 8000af4:	4319      	orrs	r1, r3
 8000af6:	b289      	uxth	r1, r1
 8000af8:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000afc:	f7ff ff34 	bl	8000968 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b04:	f7ff ff9a 	bl	8000a3c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_FLASH_Program+0x98>)
 8000b0a:	691d      	ldr	r5, [r3, #16]
 8000b0c:	f025 0501 	bic.w	r5, r5, #1
 8000b10:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000b12:	4603      	mov	r3, r0
 8000b14:	b940      	cbnz	r0, 8000b28 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8000b16:	3401      	adds	r4, #1
 8000b18:	b2e4      	uxtb	r4, r4
 8000b1a:	e7dd      	b.n	8000ad8 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8000b1c:	f04f 0902 	mov.w	r9, #2
 8000b20:	e7d9      	b.n	8000ad6 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000b22:	f04f 0901 	mov.w	r9, #1
 8000b26:	e7d6      	b.n	8000ad6 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_FLASH_Program+0x94>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	7611      	strb	r1, [r2, #24]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000b34:	2302      	movs	r3, #2
 8000b36:	e7fa      	b.n	8000b2e <HAL_FLASH_Program+0x8a>
 8000b38:	20000108 	.word	0x20000108
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b4f0      	push	{r4, r5, r6, r7}
 8000b42:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b44:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8000b46:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b48:	e0a3      	b.n	8000c92 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4a:	4f7f      	ldr	r7, [pc, #508]	; (8000d48 <HAL_GPIO_Init+0x208>)
 8000b4c:	42bb      	cmp	r3, r7
 8000b4e:	d010      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b50:	d907      	bls.n	8000b62 <HAL_GPIO_Init+0x22>
 8000b52:	4f7e      	ldr	r7, [pc, #504]	; (8000d4c <HAL_GPIO_Init+0x20c>)
 8000b54:	42bb      	cmp	r3, r7
 8000b56:	d00c      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b58:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000b5c:	42bb      	cmp	r3, r7
 8000b5e:	d008      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b60:	e013      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
 8000b62:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000b66:	42bb      	cmp	r3, r7
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b6a:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000b6e:	42bb      	cmp	r3, r7
 8000b70:	d107      	bne.n	8000b82 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b72:	688b      	ldr	r3, [r1, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d058      	beq.n	8000c2a <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d051      	beq.n	8000c20 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000b7c:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b7e:	2508      	movs	r5, #8
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000b82:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000b86:	42bb      	cmp	r3, r7
 8000b88:	d0f3      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8a:	2eff      	cmp	r6, #255	; 0xff
 8000b8c:	d84f      	bhi.n	8000c2e <HAL_GPIO_Init+0xee>
 8000b8e:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	2eff      	cmp	r6, #255	; 0xff
 8000b92:	d84f      	bhi.n	8000c34 <HAL_GPIO_Init+0xf4>
 8000b94:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b96:	f8dc 3000 	ldr.w	r3, [ip]
 8000b9a:	270f      	movs	r7, #15
 8000b9c:	4097      	lsls	r7, r2
 8000b9e:	ea23 0307 	bic.w	r3, r3, r7
 8000ba2:	fa05 f202 	lsl.w	r2, r5, r2
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bac:	684b      	ldr	r3, [r1, #4]
 8000bae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000bb2:	d06d      	beq.n	8000c90 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <HAL_GPIO_Init+0x210>)
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	f042 0201 	orr.w	r2, r2, #1
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc8:	08a2      	lsrs	r2, r4, #2
 8000bca:	1c97      	adds	r7, r2, #2
 8000bcc:	4b61      	ldr	r3, [pc, #388]	; (8000d54 <HAL_GPIO_Init+0x214>)
 8000bce:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd2:	f004 0703 	and.w	r7, r4, #3
 8000bd6:	00bf      	lsls	r7, r7, #2
 8000bd8:	f04f 0c0f 	mov.w	ip, #15
 8000bdc:	fa0c fc07 	lsl.w	ip, ip, r7
 8000be0:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be4:	4b5c      	ldr	r3, [pc, #368]	; (8000d58 <HAL_GPIO_Init+0x218>)
 8000be6:	4298      	cmp	r0, r3
 8000be8:	d02a      	beq.n	8000c40 <HAL_GPIO_Init+0x100>
 8000bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bee:	4298      	cmp	r0, r3
 8000bf0:	f000 808a 	beq.w	8000d08 <HAL_GPIO_Init+0x1c8>
 8000bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	f000 8087 	beq.w	8000d0c <HAL_GPIO_Init+0x1cc>
 8000bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d01a      	beq.n	8000c3c <HAL_GPIO_Init+0xfc>
 8000c06:	2304      	movs	r3, #4
 8000c08:	e01b      	b.n	8000c42 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c0a:	68cd      	ldr	r5, [r1, #12]
          break;
 8000c0c:	e7bd      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c0e:	68cd      	ldr	r5, [r1, #12]
 8000c10:	3504      	adds	r5, #4
          break;
 8000c12:	e7ba      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c14:	68cd      	ldr	r5, [r1, #12]
 8000c16:	3508      	adds	r5, #8
          break;
 8000c18:	e7b7      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c1a:	68cd      	ldr	r5, [r1, #12]
 8000c1c:	350c      	adds	r5, #12
          break;
 8000c1e:	e7b4      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000c20:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c22:	2508      	movs	r5, #8
 8000c24:	e7b1      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c26:	2500      	movs	r5, #0
 8000c28:	e7af      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2a:	2504      	movs	r5, #4
 8000c2c:	e7ad      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c2e:	f100 0c04 	add.w	ip, r0, #4
 8000c32:	e7ad      	b.n	8000b90 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c34:	f1a4 0208 	sub.w	r2, r4, #8
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	e7ac      	b.n	8000b96 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <HAL_GPIO_Init+0x102>
 8000c40:	2300      	movs	r3, #0
 8000c42:	40bb      	lsls	r3, r7
 8000c44:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000c48:	3202      	adds	r2, #2
 8000c4a:	4f42      	ldr	r7, [pc, #264]	; (8000d54 <HAL_GPIO_Init+0x214>)
 8000c4c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c50:	684b      	ldr	r3, [r1, #4]
 8000c52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c56:	d05b      	beq.n	8000d10 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c58:	4a40      	ldr	r2, [pc, #256]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	4333      	orrs	r3, r6
 8000c5e:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c60:	684b      	ldr	r3, [r1, #4]
 8000c62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c66:	d059      	beq.n	8000d1c <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c68:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c6a:	6853      	ldr	r3, [r2, #4]
 8000c6c:	4333      	orrs	r3, r6
 8000c6e:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c70:	684b      	ldr	r3, [r1, #4]
 8000c72:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c76:	d057      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c78:	4a38      	ldr	r2, [pc, #224]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c7a:	6893      	ldr	r3, [r2, #8]
 8000c7c:	4333      	orrs	r3, r6
 8000c7e:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c80:	684b      	ldr	r3, [r1, #4]
 8000c82:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000c86:	d055      	beq.n	8000d34 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c88:	4a34      	ldr	r2, [pc, #208]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c8a:	68d3      	ldr	r3, [r2, #12]
 8000c8c:	431e      	orrs	r6, r3
 8000c8e:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000c90:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	680b      	ldr	r3, [r1, #0]
 8000c94:	fa33 f204 	lsrs.w	r2, r3, r4
 8000c98:	d052      	beq.n	8000d40 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000ca2:	ea32 0303 	bics.w	r3, r2, r3
 8000ca6:	d1f3      	bne.n	8000c90 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000ca8:	684b      	ldr	r3, [r1, #4]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	f63f af4d 	bhi.w	8000b4a <HAL_GPIO_Init+0xa>
 8000cb0:	2b12      	cmp	r3, #18
 8000cb2:	f63f af6a 	bhi.w	8000b8a <HAL_GPIO_Init+0x4a>
 8000cb6:	a701      	add	r7, pc, #4	; (adr r7, 8000cbc <HAL_GPIO_Init+0x17c>)
 8000cb8:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000cbc:	08000b73 	.word	0x08000b73
 8000cc0:	08000c0b 	.word	0x08000c0b
 8000cc4:	08000c15 	.word	0x08000c15
 8000cc8:	08000c27 	.word	0x08000c27
 8000ccc:	08000b8b 	.word	0x08000b8b
 8000cd0:	08000b8b 	.word	0x08000b8b
 8000cd4:	08000b8b 	.word	0x08000b8b
 8000cd8:	08000b8b 	.word	0x08000b8b
 8000cdc:	08000b8b 	.word	0x08000b8b
 8000ce0:	08000b8b 	.word	0x08000b8b
 8000ce4:	08000b8b 	.word	0x08000b8b
 8000ce8:	08000b8b 	.word	0x08000b8b
 8000cec:	08000b8b 	.word	0x08000b8b
 8000cf0:	08000b8b 	.word	0x08000b8b
 8000cf4:	08000b8b 	.word	0x08000b8b
 8000cf8:	08000b8b 	.word	0x08000b8b
 8000cfc:	08000b8b 	.word	0x08000b8b
 8000d00:	08000c0f 	.word	0x08000c0f
 8000d04:	08000c1b 	.word	0x08000c1b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e79a      	b.n	8000c42 <HAL_GPIO_Init+0x102>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e798      	b.n	8000c42 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	ea23 0306 	bic.w	r3, r3, r6
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e7a1      	b.n	8000c60 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d1e:	6853      	ldr	r3, [r2, #4]
 8000d20:	ea23 0306 	bic.w	r3, r3, r6
 8000d24:	6053      	str	r3, [r2, #4]
 8000d26:	e7a3      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d2a:	6893      	ldr	r3, [r2, #8]
 8000d2c:	ea23 0306 	bic.w	r3, r3, r6
 8000d30:	6093      	str	r3, [r2, #8]
 8000d32:	e7a5      	b.n	8000c80 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d36:	68d3      	ldr	r3, [r2, #12]
 8000d38:	ea23 0606 	bic.w	r6, r3, r6
 8000d3c:	60d6      	str	r6, [r2, #12]
 8000d3e:	e7a7      	b.n	8000c90 <HAL_GPIO_Init+0x150>
  }
}
 8000d40:	b002      	add	sp, #8
 8000d42:	bcf0      	pop	{r4, r5, r6, r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	10220000 	.word	0x10220000
 8000d4c:	10310000 	.word	0x10310000
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	b10a      	cbz	r2, 8000d66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d62:	6101      	str	r1, [r0, #16]
 8000d64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	6101      	str	r1, [r0, #16]
  }
}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d6c:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	ea01 0203 	and.w	r2, r1, r3
 8000d72:	ea21 0103 	bic.w	r1, r1, r3
 8000d76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d7a:	6101      	str	r1, [r0, #16]
}
 8000d7c:	4770      	bx	lr

08000d7e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d7e:	6803      	ldr	r3, [r0, #0]
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000d86:	d101      	bne.n	8000d8c <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000d88:	2000      	movs	r0, #0
}
 8000d8a:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d90:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000d96:	2220      	movs	r2, #32
 8000d98:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d9c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000da0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000da2:	f042 0204 	orr.w	r2, r2, #4
 8000da6:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8000da8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000dac:	2001      	movs	r0, #1
 8000dae:	4770      	bx	lr

08000db0 <I2C_WaitOnFlagUntilTimeout>:
{
 8000db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db4:	4607      	mov	r7, r0
 8000db6:	460d      	mov	r5, r1
 8000db8:	4690      	mov	r8, r2
 8000dba:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dbc:	e022      	b.n	8000e04 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dbe:	f7ff fa07 	bl	80001d0 <HAL_GetTick>
 8000dc2:	9b06      	ldr	r3, [sp, #24]
 8000dc4:	1ac0      	subs	r0, r0, r3
 8000dc6:	42b0      	cmp	r0, r6
 8000dc8:	d800      	bhi.n	8000dcc <I2C_WaitOnFlagUntilTimeout+0x1c>
 8000dca:	b9de      	cbnz	r6, 8000e04 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000dd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ddc:	f042 0220 	orr.w	r2, r2, #32
 8000de0:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000de2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
 8000de8:	e01a      	b.n	8000e20 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	699c      	ldr	r4, [r3, #24]
 8000dee:	ea25 0404 	bic.w	r4, r5, r4
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fab4 f484 	clz	r4, r4
 8000df8:	0964      	lsrs	r4, r4, #5
 8000dfa:	45a0      	cmp	r8, r4
 8000dfc:	d10f      	bne.n	8000e1e <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8000dfe:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000e02:	d1dc      	bne.n	8000dbe <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e04:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d1ee      	bne.n	8000dea <I2C_WaitOnFlagUntilTimeout+0x3a>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	695c      	ldr	r4, [r3, #20]
 8000e10:	ea25 0404 	bic.w	r4, r5, r4
 8000e14:	b2a4      	uxth	r4, r4
 8000e16:	fab4 f484 	clz	r4, r4
 8000e1a:	0964      	lsrs	r4, r4, #5
 8000e1c:	e7ed      	b.n	8000dfa <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8000e1e:	2000      	movs	r0, #0
}
 8000e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e28:	4605      	mov	r5, r0
 8000e2a:	460e      	mov	r6, r1
 8000e2c:	4617      	mov	r7, r2
 8000e2e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e30:	e03d      	b.n	8000eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e38:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000e40:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e46:	2220      	movs	r2, #32
 8000e48:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e4c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e50:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e52:	f042 0204 	orr.w	r2, r2, #4
 8000e56:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e58:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	e034      	b.n	8000eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e60:	f7ff f9b6 	bl	80001d0 <HAL_GetTick>
 8000e64:	eba0 0008 	sub.w	r0, r0, r8
 8000e68:	42b8      	cmp	r0, r7
 8000e6a:	d800      	bhi.n	8000e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8000e6c:	b9ff      	cbnz	r7, 8000eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e72:	2220      	movs	r2, #32
 8000e74:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e78:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e7e:	f042 0220 	orr.w	r2, r2, #32
 8000e82:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000e84:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8000e88:	2001      	movs	r0, #1
 8000e8a:	e01e      	b.n	8000eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	699c      	ldr	r4, [r3, #24]
 8000e90:	ea26 0404 	bic.w	r4, r6, r4
 8000e94:	b2a4      	uxth	r4, r4
 8000e96:	3c00      	subs	r4, #0
 8000e98:	bf18      	it	ne
 8000e9a:	2401      	movne	r4, #1
 8000e9c:	b1a4      	cbz	r4, 8000ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000ea6:	d1c4      	bne.n	8000e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8000ea8:	f1b7 3fff 	cmp.w	r7, #4294967295
 8000eac:	d1d8      	bne.n	8000e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000eae:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d1ea      	bne.n	8000e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	695c      	ldr	r4, [r3, #20]
 8000eba:	ea26 0404 	bic.w	r4, r6, r4
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	3c00      	subs	r4, #0
 8000ec2:	bf18      	it	ne
 8000ec4:	2401      	movne	r4, #1
 8000ec6:	e7e9      	b.n	8000e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8000ec8:	2000      	movs	r0, #0
}
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000ed0 <I2C_MasterRequestWrite>:
{
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	4616      	mov	r6, r2
 8000eda:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000edc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d00d      	beq.n	8000efe <I2C_MasterRequestWrite+0x2e>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d00b      	beq.n	8000efe <I2C_MasterRequestWrite+0x2e>
 8000ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000eea:	d008      	beq.n	8000efe <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000eec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000eee:	2b12      	cmp	r3, #18
 8000ef0:	d10a      	bne.n	8000f08 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ef2:	6802      	ldr	r2, [r0, #0]
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e004      	b.n	8000f08 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f08:	9700      	str	r7, [sp, #0]
 8000f0a:	4633      	mov	r3, r6
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff ff4c 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8000f18:	b980      	cbnz	r0, 8000f3c <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f1a:	6923      	ldr	r3, [r4, #16]
 8000f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f20:	d116      	bne.n	8000f50 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000f28:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4632      	mov	r2, r6
 8000f2e:	4913      	ldr	r1, [pc, #76]	; (8000f7c <I2C_MasterRequestWrite+0xac>)
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff ff77 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f36:	b9f8      	cbnz	r0, 8000f78 <I2C_MasterRequestWrite+0xa8>
}
 8000f38:	b003      	add	sp, #12
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f44:	d002      	beq.n	8000f4c <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	e7f3      	b.n	8000f38 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000f50:	11eb      	asrs	r3, r5, #7
 8000f52:	6822      	ldr	r2, [r4, #0]
 8000f54:	f003 0306 	and.w	r3, r3, #6
 8000f58:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000f5c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4632      	mov	r2, r6
 8000f62:	4907      	ldr	r1, [pc, #28]	; (8000f80 <I2C_MasterRequestWrite+0xb0>)
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff ff5d 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f6a:	b918      	cbnz	r0, 8000f74 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	b2ed      	uxtb	r5, r5
 8000f70:	611d      	str	r5, [r3, #16]
 8000f72:	e7da      	b.n	8000f2a <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8000f78:	2001      	movs	r0, #1
 8000f7a:	e7dd      	b.n	8000f38 <I2C_MasterRequestWrite+0x68>
 8000f7c:	00010002 	.word	0x00010002
 8000f80:	00010008 	.word	0x00010008

08000f84 <I2C_MasterRequestRead>:
{
 8000f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	460d      	mov	r5, r1
 8000f8e:	4616      	mov	r6, r2
 8000f90:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000f92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f94:	6801      	ldr	r1, [r0, #0]
 8000f96:	680b      	ldr	r3, [r1, #0]
 8000f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000f9e:	2a08      	cmp	r2, #8
 8000fa0:	d00d      	beq.n	8000fbe <I2C_MasterRequestRead+0x3a>
 8000fa2:	2a01      	cmp	r2, #1
 8000fa4:	d00b      	beq.n	8000fbe <I2C_MasterRequestRead+0x3a>
 8000fa6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000faa:	d008      	beq.n	8000fbe <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000fac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000fae:	2b11      	cmp	r3, #17
 8000fb0:	d10a      	bne.n	8000fc8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fb2:	6802      	ldr	r2, [r0, #0]
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e004      	b.n	8000fc8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fbe:	6822      	ldr	r2, [r4, #0]
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fc8:	9700      	str	r7, [sp, #0]
 8000fca:	4633      	mov	r3, r6
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff feec 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8000fd8:	b998      	cbnz	r0, 8001002 <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fda:	6923      	ldr	r3, [r4, #16]
 8000fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe0:	d119      	bne.n	8001016 <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	f045 0501 	orr.w	r5, r5, #1
 8000fe8:	b2ed      	uxtb	r5, r5
 8000fea:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4632      	mov	r2, r6
 8000ff0:	492a      	ldr	r1, [pc, #168]	; (800109c <I2C_MasterRequestRead+0x118>)
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f7ff ff16 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d14c      	bne.n	8001096 <I2C_MasterRequestRead+0x112>
}
 8000ffc:	b004      	add	sp, #16
 8000ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f413 7f80 	tst.w	r3, #256	; 0x100
 800100a:	d002      	beq.n	8001012 <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800100c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001010:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
 8001014:	e7f2      	b.n	8000ffc <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001016:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800101a:	f008 0806 	and.w	r8, r8, #6
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001024:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4632      	mov	r2, r6
 800102a:	491d      	ldr	r1, [pc, #116]	; (80010a0 <I2C_MasterRequestRead+0x11c>)
 800102c:	4620      	mov	r0, r4
 800102e:	f7ff fef9 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001032:	b108      	cbz	r0, 8001038 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
 8001036:	e7e1      	b.n	8000ffc <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	b2ed      	uxtb	r5, r5
 800103c:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4632      	mov	r2, r6
 8001042:	4916      	ldr	r1, [pc, #88]	; (800109c <I2C_MasterRequestRead+0x118>)
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff feed 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800104a:	b108      	cbz	r0, 8001050 <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 800104c:	2001      	movs	r0, #1
 800104e:	e7d5      	b.n	8000ffc <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001050:	2200      	movs	r2, #0
 8001052:	9203      	str	r2, [sp, #12]
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	6959      	ldr	r1, [r3, #20]
 8001058:	9103      	str	r1, [sp, #12]
 800105a:	6999      	ldr	r1, [r3, #24]
 800105c:	9103      	str	r1, [sp, #12]
 800105e:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001060:	6819      	ldr	r1, [r3, #0]
 8001062:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001066:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001068:	9700      	str	r7, [sp, #0]
 800106a:	4633      	mov	r3, r6
 800106c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001070:	4620      	mov	r0, r4
 8001072:	f7ff fe9d 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8001076:	b920      	cbnz	r0, 8001082 <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800107e:	6113      	str	r3, [r2, #16]
 8001080:	e7b4      	b.n	8000fec <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f413 7f80 	tst.w	r3, #256	; 0x100
 800108a:	d002      	beq.n	8001092 <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8001092:	2003      	movs	r0, #3
 8001094:	e7b2      	b.n	8000ffc <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	e7b0      	b.n	8000ffc <I2C_MasterRequestRead+0x78>
 800109a:	bf00      	nop
 800109c:	00010002 	.word	0x00010002
 80010a0:	00010008 	.word	0x00010008

080010a4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	4604      	mov	r4, r0
 80010a8:	460d      	mov	r5, r1
 80010aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80010b4:	d11c      	bne.n	80010f0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff fe61 	bl	8000d7e <I2C_IsAcknowledgeFailed>
 80010bc:	b9d0      	cbnz	r0, 80010f4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80010be:	f1b5 3fff 	cmp.w	r5, #4294967295
 80010c2:	d0f3      	beq.n	80010ac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010c4:	f7ff f884 	bl	80001d0 <HAL_GetTick>
 80010c8:	1b80      	subs	r0, r0, r6
 80010ca:	42a8      	cmp	r0, r5
 80010cc:	d801      	bhi.n	80010d2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d1ec      	bne.n	80010ac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80010d6:	2220      	movs	r2, #32
 80010d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010e2:	f042 0220 	orr.w	r2, r2, #32
 80010e6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80010e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80010ec:	2001      	movs	r0, #1
 80010ee:	e000      	b.n	80010f2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80010f0:	2000      	movs	r0, #0
}
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
 80010f6:	e7fc      	b.n	80010f2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080010f8 <I2C_RequestMemoryWrite>:
{
 80010f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010fc:	b085      	sub	sp, #20
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
 8001102:	4691      	mov	r9, r2
 8001104:	461f      	mov	r7, r3
 8001106:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800110a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800110c:	6803      	ldr	r3, [r0, #0]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001114:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001116:	9600      	str	r6, [sp, #0]
 8001118:	4643      	mov	r3, r8
 800111a:	2200      	movs	r2, #0
 800111c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001120:	f7ff fe46 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8001124:	b960      	cbnz	r0, 8001140 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800112c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800112e:	4633      	mov	r3, r6
 8001130:	4642      	mov	r2, r8
 8001132:	4926      	ldr	r1, [pc, #152]	; (80011cc <I2C_RequestMemoryWrite+0xd4>)
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff fe75 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800113a:	b168      	cbz	r0, 8001158 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 800113c:	2001      	movs	r0, #1
 800113e:	e008      	b.n	8001152 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001148:	d002      	beq.n	8001150 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800114a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001150:	2003      	movs	r0, #3
}
 8001152:	b005      	add	sp, #20
 8001154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001158:	2300      	movs	r3, #0
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	9203      	str	r2, [sp, #12]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	9303      	str	r3, [sp, #12]
 8001166:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001168:	4632      	mov	r2, r6
 800116a:	4641      	mov	r1, r8
 800116c:	4620      	mov	r0, r4
 800116e:	f7ff ff99 	bl	80010a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001172:	b930      	cbnz	r0, 8001182 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001174:	2f01      	cmp	r7, #1
 8001176:	d10f      	bne.n	8001198 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	fa5f f689 	uxtb.w	r6, r9
 800117e:	611e      	str	r6, [r3, #16]
 8001180:	e7e7      	b.n	8001152 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001184:	2b04      	cmp	r3, #4
 8001186:	d001      	beq.n	800118c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001188:	2001      	movs	r0, #1
 800118a:	e7e2      	b.n	8001152 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800118c:	6822      	ldr	r2, [r4, #0]
 800118e:	6813      	ldr	r3, [r2, #0]
 8001190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e7f7      	b.n	8001188 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800119e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011a0:	4632      	mov	r2, r6
 80011a2:	4641      	mov	r1, r8
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff ff7d 	bl	80010a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80011aa:	b920      	cbnz	r0, 80011b6 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	fa5f f689 	uxtb.w	r6, r9
 80011b2:	611e      	str	r6, [r3, #16]
 80011b4:	e7cd      	b.n	8001152 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d001      	beq.n	80011c0 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
 80011be:	e7c8      	b.n	8001152 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e7f7      	b.n	80011bc <I2C_RequestMemoryWrite+0xc4>
 80011cc:	00010002 	.word	0x00010002

080011d0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f013 0f04 	tst.w	r3, #4
 80011e0:	d11c      	bne.n	800121c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fdcb 	bl	8000d7e <I2C_IsAcknowledgeFailed>
 80011e8:	b9d0      	cbnz	r0, 8001220 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80011ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80011ee:	d0f3      	beq.n	80011d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f0:	f7fe ffee 	bl	80001d0 <HAL_GetTick>
 80011f4:	1b80      	subs	r0, r0, r6
 80011f6:	42a8      	cmp	r0, r5
 80011f8:	d801      	bhi.n	80011fe <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80011fa:	2d00      	cmp	r5, #0
 80011fc:	d1ec      	bne.n	80011d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011fe:	2300      	movs	r3, #0
 8001200:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001202:	2220      	movs	r2, #32
 8001204:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001208:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800120c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800120e:	f042 0220 	orr.w	r2, r2, #32
 8001212:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001214:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
 800121a:	e000      	b.n	800121e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 800121c:	2000      	movs	r0, #0
}
 800121e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
 8001222:	e7fc      	b.n	800121e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001224 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4605      	mov	r5, r0
 8001228:	460c      	mov	r4, r1
 800122a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	6959      	ldr	r1, [r3, #20]
 8001230:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001234:	d129      	bne.n	800128a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001236:	6959      	ldr	r1, [r3, #20]
 8001238:	f011 0f10 	tst.w	r1, #16
 800123c:	d115      	bne.n	800126a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800123e:	f7fe ffc7 	bl	80001d0 <HAL_GetTick>
 8001242:	1b80      	subs	r0, r0, r6
 8001244:	42a0      	cmp	r0, r4
 8001246:	d801      	bhi.n	800124c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001248:	2c00      	cmp	r4, #0
 800124a:	d1ef      	bne.n	800122c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001250:	2220      	movs	r2, #32
 8001252:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001256:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800125a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800125c:	f042 0220 	orr.w	r2, r2, #32
 8001260:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001262:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
}
 8001268:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800126a:	f06f 0210 	mvn.w	r2, #16
 800126e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001270:	2300      	movs	r3, #0
 8001272:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001274:	2220      	movs	r2, #32
 8001276:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800127a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800127e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001280:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001282:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
 8001288:	e7ee      	b.n	8001268 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800128a:	2000      	movs	r0, #0
 800128c:	e7ec      	b.n	8001268 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08001290 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001290:	2800      	cmp	r0, #0
 8001292:	f000 80cc 	beq.w	800142e <HAL_I2C_Init+0x19e>
{
 8001296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001298:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d077      	beq.n	8001392 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80012a2:	2324      	movs	r3, #36	; 0x24
 80012a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80012a8:	6822      	ldr	r2, [r4, #0]
 80012aa:	6813      	ldr	r3, [r2, #0]
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012b2:	6822      	ldr	r2, [r4, #0]
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ba:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	6813      	ldr	r3, [r2, #0]
 80012c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012c4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012c6:	f000 fedf 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ca:	6862      	ldr	r2, [r4, #4]
 80012cc:	4b5a      	ldr	r3, [pc, #360]	; (8001438 <HAL_I2C_Init+0x1a8>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d864      	bhi.n	800139c <HAL_I2C_Init+0x10c>
 80012d2:	4b5a      	ldr	r3, [pc, #360]	; (800143c <HAL_I2C_Init+0x1ac>)
 80012d4:	4298      	cmp	r0, r3
 80012d6:	bf8c      	ite	hi
 80012d8:	2300      	movhi	r3, #0
 80012da:	2301      	movls	r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f040 80a8 	bne.w	8001432 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80012e2:	4d57      	ldr	r5, [pc, #348]	; (8001440 <HAL_I2C_Init+0x1b0>)
 80012e4:	fba5 3500 	umull	r3, r5, r5, r0
 80012e8:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ea:	6826      	ldr	r6, [r4, #0]
 80012ec:	6871      	ldr	r1, [r6, #4]
 80012ee:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80012f2:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80012f6:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012f8:	6821      	ldr	r1, [r4, #0]
 80012fa:	6a0b      	ldr	r3, [r1, #32]
 80012fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001300:	6865      	ldr	r5, [r4, #4]
 8001302:	4a4d      	ldr	r2, [pc, #308]	; (8001438 <HAL_I2C_Init+0x1a8>)
 8001304:	4295      	cmp	r5, r2
 8001306:	d84f      	bhi.n	80013a8 <HAL_I2C_Init+0x118>
 8001308:	1c7a      	adds	r2, r7, #1
 800130a:	4313      	orrs	r3, r2
 800130c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800130e:	6825      	ldr	r5, [r4, #0]
 8001310:	69e9      	ldr	r1, [r5, #28]
 8001312:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001316:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_I2C_Init+0x1a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d84c      	bhi.n	80013bc <HAL_I2C_Init+0x12c>
 8001322:	3801      	subs	r0, #1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fbb0 f0f3 	udiv	r0, r0, r3
 800132a:	3001      	adds	r0, #1
 800132c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001330:	4218      	tst	r0, r3
 8001332:	d078      	beq.n	8001426 <HAL_I2C_Init+0x196>
 8001334:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001338:	430b      	orrs	r3, r1
 800133a:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800133c:	6821      	ldr	r1, [r4, #0]
 800133e:	680b      	ldr	r3, [r1, #0]
 8001340:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001344:	69e2      	ldr	r2, [r4, #28]
 8001346:	6a20      	ldr	r0, [r4, #32]
 8001348:	4302      	orrs	r2, r0
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800134e:	6821      	ldr	r1, [r4, #0]
 8001350:	688b      	ldr	r3, [r1, #8]
 8001352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800135a:	6922      	ldr	r2, [r4, #16]
 800135c:	68e0      	ldr	r0, [r4, #12]
 800135e:	4302      	orrs	r2, r0
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001364:	6821      	ldr	r1, [r4, #0]
 8001366:	68cb      	ldr	r3, [r1, #12]
 8001368:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800136c:	6962      	ldr	r2, [r4, #20]
 800136e:	69a0      	ldr	r0, [r4, #24]
 8001370:	4302      	orrs	r2, r0
 8001372:	4313      	orrs	r3, r2
 8001374:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	2000      	movs	r0, #0
 8001382:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001384:	2320      	movs	r3, #32
 8001386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800138a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800138c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001392:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001396:	f002 fc8f 	bl	8003cb8 <HAL_I2C_MspInit>
 800139a:	e782      	b.n	80012a2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <HAL_I2C_Init+0x1b4>)
 800139e:	4298      	cmp	r0, r3
 80013a0:	bf8c      	ite	hi
 80013a2:	2300      	movhi	r3, #0
 80013a4:	2301      	movls	r3, #1
 80013a6:	e799      	b.n	80012dc <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ac:	fb02 f207 	mul.w	r2, r2, r7
 80013b0:	4d25      	ldr	r5, [pc, #148]	; (8001448 <HAL_I2C_Init+0x1b8>)
 80013b2:	fba5 5202 	umull	r5, r2, r5, r2
 80013b6:	0992      	lsrs	r2, r2, #6
 80013b8:	3201      	adds	r2, #1
 80013ba:	e7a6      	b.n	800130a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013bc:	68a2      	ldr	r2, [r4, #8]
 80013be:	b9ba      	cbnz	r2, 80013f0 <HAL_I2C_Init+0x160>
 80013c0:	1e46      	subs	r6, r0, #1
 80013c2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80013c6:	fbb6 f6f7 	udiv	r6, r6, r7
 80013ca:	3601      	adds	r6, #1
 80013cc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80013d0:	fab6 f686 	clz	r6, r6
 80013d4:	0976      	lsrs	r6, r6, #5
 80013d6:	bb46      	cbnz	r6, 800142a <HAL_I2C_Init+0x19a>
 80013d8:	b9c2      	cbnz	r2, 800140c <HAL_I2C_Init+0x17c>
 80013da:	1e42      	subs	r2, r0, #1
 80013dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80013e4:	3201      	adds	r2, #1
 80013e6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80013ea:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80013ee:	e7a3      	b.n	8001338 <HAL_I2C_Init+0xa8>
 80013f0:	1e46      	subs	r6, r0, #1
 80013f2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80013f6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80013fa:	fbb6 f6f7 	udiv	r6, r6, r7
 80013fe:	3601      	adds	r6, #1
 8001400:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001404:	fab6 f686 	clz	r6, r6
 8001408:	0976      	lsrs	r6, r6, #5
 800140a:	e7e4      	b.n	80013d6 <HAL_I2C_Init+0x146>
 800140c:	1e42      	subs	r2, r0, #1
 800140e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001416:	fbb2 f2f3 	udiv	r2, r2, r3
 800141a:	3201      	adds	r2, #1
 800141c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001420:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001424:	e788      	b.n	8001338 <HAL_I2C_Init+0xa8>
 8001426:	2304      	movs	r3, #4
 8001428:	e786      	b.n	8001338 <HAL_I2C_Init+0xa8>
 800142a:	2301      	movs	r3, #1
 800142c:	e784      	b.n	8001338 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
}
 8001430:	4770      	bx	lr
    return HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	e7ac      	b.n	8001390 <HAL_I2C_Init+0x100>
 8001436:	bf00      	nop
 8001438:	000186a0 	.word	0x000186a0
 800143c:	001e847f 	.word	0x001e847f
 8001440:	431bde83 	.word	0x431bde83
 8001444:	003d08ff 	.word	0x003d08ff
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <HAL_I2C_Master_Transmit>:
{
 800144c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001450:	b085      	sub	sp, #20
 8001452:	4604      	mov	r4, r0
 8001454:	460f      	mov	r7, r1
 8001456:	4691      	mov	r9, r2
 8001458:	4698      	mov	r8, r3
 800145a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7fe feb8 	bl	80001d0 <HAL_GetTick>
 8001460:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001462:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001466:	b2c0      	uxtb	r0, r0
 8001468:	2820      	cmp	r0, #32
 800146a:	d004      	beq.n	8001476 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 800146c:	2702      	movs	r7, #2
}
 800146e:	4638      	mov	r0, r7
 8001470:	b005      	add	sp, #20
 8001472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001476:	9500      	str	r5, [sp, #0]
 8001478:	2319      	movs	r3, #25
 800147a:	2201      	movs	r2, #1
 800147c:	494f      	ldr	r1, [pc, #316]	; (80015bc <HAL_I2C_Master_Transmit+0x170>)
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff fc96 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8001484:	2800      	cmp	r0, #0
 8001486:	f040 8092 	bne.w	80015ae <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 800148a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800148e:	2b01      	cmp	r3, #1
 8001490:	f000 808f 	beq.w	80015b2 <HAL_I2C_Master_Transmit+0x166>
 8001494:	2301      	movs	r3, #1
 8001496:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f012 0f01 	tst.w	r2, #1
 80014a2:	d103      	bne.n	80014ac <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ac:	6822      	ldr	r2, [r4, #0]
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014b4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014b6:	2321      	movs	r3, #33	; 0x21
 80014b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014bc:	2310      	movs	r3, #16
 80014be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80014c6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014ca:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014d0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_I2C_Master_Transmit+0x174>)
 80014d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014d6:	462b      	mov	r3, r5
 80014d8:	4632      	mov	r2, r6
 80014da:	4639      	mov	r1, r7
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fcf7 	bl	8000ed0 <I2C_MasterRequestWrite>
 80014e2:	4607      	mov	r7, r0
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d166      	bne.n	80015b6 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e8:	2300      	movs	r3, #0
 80014ea:	9303      	str	r3, [sp, #12]
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	9203      	str	r2, [sp, #12]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	9303      	str	r3, [sp, #12]
 80014f6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80014f8:	e011      	b.n	800151e <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d001      	beq.n	8001504 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001500:	2701      	movs	r7, #1
 8001502:	e7b4      	b.n	800146e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	6813      	ldr	r3, [r2, #0]
 8001508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e7f7      	b.n	8001500 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001510:	462a      	mov	r2, r5
 8001512:	4631      	mov	r1, r6
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff fe5b 	bl	80011d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800151a:	2800      	cmp	r0, #0
 800151c:	d12e      	bne.n	800157c <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 800151e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d036      	beq.n	8001592 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	462a      	mov	r2, r5
 8001526:	4631      	mov	r1, r6
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff fdbb 	bl	80010a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800152e:	2800      	cmp	r0, #0
 8001530:	d1e3      	bne.n	80014fa <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001532:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800153a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800153c:	1c4b      	adds	r3, r1, #1
 800153e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001540:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	3b01      	subs	r3, #1
 8001546:	b29b      	uxth	r3, r3
 8001548:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800154a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800154c:	3b01      	subs	r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001552:	6822      	ldr	r2, [r4, #0]
 8001554:	6950      	ldr	r0, [r2, #20]
 8001556:	f010 0f04 	tst.w	r0, #4
 800155a:	d0d9      	beq.n	8001510 <HAL_I2C_Master_Transmit+0xc4>
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0d7      	beq.n	8001510 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001560:	784b      	ldrb	r3, [r1, #1]
 8001562:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001566:	3301      	adds	r3, #1
 8001568:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800156a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29b      	uxth	r3, r3
 8001572:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001574:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001576:	3b01      	subs	r3, #1
 8001578:	8523      	strh	r3, [r4, #40]	; 0x28
 800157a:	e7c9      	b.n	8001510 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800157c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800157e:	2b04      	cmp	r3, #4
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001582:	2701      	movs	r7, #1
 8001584:	e773      	b.n	800146e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e7f7      	b.n	8001582 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001592:	6822      	ldr	r2, [r4, #0]
 8001594:	6813      	ldr	r3, [r2, #0]
 8001596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800159c:	2320      	movs	r3, #32
 800159e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80015a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80015ac:	e75f      	b.n	800146e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80015ae:	2702      	movs	r7, #2
 80015b0:	e75d      	b.n	800146e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80015b2:	2702      	movs	r7, #2
 80015b4:	e75b      	b.n	800146e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80015b6:	2701      	movs	r7, #1
 80015b8:	e759      	b.n	800146e <HAL_I2C_Master_Transmit+0x22>
 80015ba:	bf00      	nop
 80015bc:	00100002 	.word	0x00100002
 80015c0:	ffff0000 	.word	0xffff0000

080015c4 <HAL_I2C_Master_Receive>:
{
 80015c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015c8:	b089      	sub	sp, #36	; 0x24
 80015ca:	4604      	mov	r4, r0
 80015cc:	460f      	mov	r7, r1
 80015ce:	4691      	mov	r9, r2
 80015d0:	4698      	mov	r8, r3
 80015d2:	9e10      	ldr	r6, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7fe fdfa 	bl	80001d0 <HAL_GetTick>
 80015dc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015de:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80015e2:	b2c0      	uxtb	r0, r0
 80015e4:	2820      	cmp	r0, #32
 80015e6:	d004      	beq.n	80015f2 <HAL_I2C_Master_Receive+0x2e>
    return HAL_BUSY;
 80015e8:	2702      	movs	r7, #2
}
 80015ea:	4638      	mov	r0, r7
 80015ec:	b009      	add	sp, #36	; 0x24
 80015ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f2:	9500      	str	r5, [sp, #0]
 80015f4:	2319      	movs	r3, #25
 80015f6:	2201      	movs	r2, #1
 80015f8:	499d      	ldr	r1, [pc, #628]	; (8001870 <HAL_I2C_Master_Receive+0x2ac>)
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fbd8 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8001600:	2800      	cmp	r0, #0
 8001602:	f040 8172 	bne.w	80018ea <HAL_I2C_Master_Receive+0x326>
    __HAL_LOCK(hi2c);
 8001606:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800160a:	2b01      	cmp	r3, #1
 800160c:	f000 816f 	beq.w	80018ee <HAL_I2C_Master_Receive+0x32a>
 8001610:	2301      	movs	r3, #1
 8001612:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	f012 0f01 	tst.w	r2, #1
 800161e:	d103      	bne.n	8001628 <HAL_I2C_Master_Receive+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001628:	6822      	ldr	r2, [r4, #0]
 800162a:	6813      	ldr	r3, [r2, #0]
 800162c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001630:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001632:	2322      	movs	r3, #34	; 0x22
 8001634:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001638:	2310      	movs	r3, #16
 800163a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001642:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001646:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800164a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800164c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800164e:	4b89      	ldr	r3, [pc, #548]	; (8001874 <HAL_I2C_Master_Receive+0x2b0>)
 8001650:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001652:	462b      	mov	r3, r5
 8001654:	4632      	mov	r2, r6
 8001656:	4639      	mov	r1, r7
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff fc93 	bl	8000f84 <I2C_MasterRequestRead>
 800165e:	4607      	mov	r7, r0
 8001660:	2800      	cmp	r0, #0
 8001662:	f040 8146 	bne.w	80018f2 <HAL_I2C_Master_Receive+0x32e>
    if (hi2c->XferSize == 0U)
 8001666:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001668:	b95b      	cbnz	r3, 8001682 <HAL_I2C_Master_Receive+0xbe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	9203      	str	r2, [sp, #12]
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	9203      	str	r2, [sp, #12]
 8001676:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e076      	b.n	8001770 <HAL_I2C_Master_Receive+0x1ac>
    else if (hi2c->XferSize == 1U)
 8001682:	2b01      	cmp	r3, #1
 8001684:	d00f      	beq.n	80016a6 <HAL_I2C_Master_Receive+0xe2>
    else if (hi2c->XferSize == 2U)
 8001686:	2b02      	cmp	r3, #2
 8001688:	d021      	beq.n	80016ce <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800168a:	6822      	ldr	r2, [r4, #0]
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001692:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001694:	2300      	movs	r3, #0
 8001696:	9306      	str	r3, [sp, #24]
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	9206      	str	r2, [sp, #24]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	9306      	str	r3, [sp, #24]
 80016a2:	9b06      	ldr	r3, [sp, #24]
 80016a4:	e064      	b.n	8001770 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016ae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b2:	2300      	movs	r3, #0
 80016b4:	9304      	str	r3, [sp, #16]
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	9204      	str	r2, [sp, #16]
 80016bc:	699a      	ldr	r2, [r3, #24]
 80016be:	9204      	str	r2, [sp, #16]
 80016c0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016ca:	b662      	cpsie	i
}
 80016cc:	e050      	b.n	8001770 <HAL_I2C_Master_Receive+0x1ac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ce:	6822      	ldr	r2, [r4, #0]
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016da:	2300      	movs	r3, #0
 80016dc:	9305      	str	r3, [sp, #20]
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	9205      	str	r2, [sp, #20]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	9205      	str	r2, [sp, #20]
 80016e8:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016f2:	b662      	cpsie	i
}
 80016f4:	e03c      	b.n	8001770 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f6:	462a      	mov	r2, r5
 80016f8:	4631      	mov	r1, r6
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fd92 	bl	8001224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001700:	2800      	cmp	r0, #0
 8001702:	f040 80f8 	bne.w	80018f6 <HAL_I2C_Master_Receive+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800170c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800170e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001710:	3301      	adds	r3, #1
 8001712:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001714:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001716:	3b01      	subs	r3, #1
 8001718:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800171a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	b29b      	uxth	r3, r3
 8001722:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001724:	e024      	b.n	8001770 <HAL_I2C_Master_Receive+0x1ac>
  __ASM volatile ("cpsid i" : : : "memory");
 8001726:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001728:	6822      	ldr	r2, [r4, #0]
 800172a:	6813      	ldr	r3, [r2, #0]
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001738:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800173a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001740:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001742:	3b01      	subs	r3, #1
 8001744:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001746:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29b      	uxth	r3, r3
 800174e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001750:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001758:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800175a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800175c:	3301      	adds	r3, #1
 800175e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001760:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001762:	3b01      	subs	r3, #1
 8001764:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001766:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	b29b      	uxth	r3, r3
 800176e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001770:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80b0 	beq.w	80018d8 <HAL_I2C_Master_Receive+0x314>
      if (hi2c->XferSize <= 3U)
 8001778:	2b03      	cmp	r3, #3
 800177a:	f200 8083 	bhi.w	8001884 <HAL_I2C_Master_Receive+0x2c0>
        if (hi2c->XferSize == 1U)
 800177e:	2b01      	cmp	r3, #1
 8001780:	d0b9      	beq.n	80016f6 <HAL_I2C_Master_Receive+0x132>
        else if (hi2c->XferSize == 2U)
 8001782:	2b02      	cmp	r3, #2
 8001784:	d10a      	bne.n	800179c <HAL_I2C_Master_Receive+0x1d8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001786:	9500      	str	r5, [sp, #0]
 8001788:	4633      	mov	r3, r6
 800178a:	2200      	movs	r2, #0
 800178c:	493a      	ldr	r1, [pc, #232]	; (8001878 <HAL_I2C_Master_Receive+0x2b4>)
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff fb0e 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8001794:	2800      	cmp	r0, #0
 8001796:	d0c6      	beq.n	8001726 <HAL_I2C_Master_Receive+0x162>
            return HAL_ERROR;
 8001798:	2701      	movs	r7, #1
 800179a:	e726      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800179c:	9500      	str	r5, [sp, #0]
 800179e:	4633      	mov	r3, r6
 80017a0:	2200      	movs	r2, #0
 80017a2:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_I2C_Master_Receive+0x2b4>)
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff fb03 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 80017aa:	2800      	cmp	r0, #0
 80017ac:	f040 80a5 	bne.w	80018fa <HAL_I2C_Master_Receive+0x336>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017ba:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017c2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80017c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80017ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017cc:	3b01      	subs	r3, #1
 80017ce:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80017d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_I2C_Master_Receive+0x2b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	08db      	lsrs	r3, r3, #3
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_I2C_Master_Receive+0x2bc>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80017f0:	9307      	str	r3, [sp, #28]
            count--;
 80017f2:	9b07      	ldr	r3, [sp, #28]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 80017f8:	9b07      	ldr	r3, [sp, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d028      	beq.n	8001850 <HAL_I2C_Master_Receive+0x28c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	f012 0f04 	tst.w	r2, #4
 8001806:	d0f4      	beq.n	80017f2 <HAL_I2C_Master_Receive+0x22e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001816:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800181a:	3301      	adds	r3, #1
 800181c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800181e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001820:	3b01      	subs	r3, #1
 8001822:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001824:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001826:	b29b      	uxth	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800182e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001836:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800183e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001844:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800184e:	e78f      	b.n	8001770 <HAL_I2C_Master_Receive+0x1ac>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001850:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001852:	2220      	movs	r2, #32
 8001854:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001858:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800185c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800185e:	f042 0220 	orr.w	r2, r2, #32
 8001862:	6422      	str	r2, [r4, #64]	; 0x40
 8001864:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8001866:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800186a:	2701      	movs	r7, #1
 800186c:	e6bd      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
 800186e:	bf00      	nop
 8001870:	00100002 	.word	0x00100002
 8001874:	ffff0000 	.word	0xffff0000
 8001878:	00010004 	.word	0x00010004
 800187c:	2000002c 	.word	0x2000002c
 8001880:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001884:	462a      	mov	r2, r5
 8001886:	4631      	mov	r1, r6
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff fccb 	bl	8001224 <I2C_WaitOnRXNEFlagUntilTimeout>
 800188e:	2800      	cmp	r0, #0
 8001890:	d135      	bne.n	80018fe <HAL_I2C_Master_Receive+0x33a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001898:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800189a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800189c:	1c53      	adds	r3, r2, #1
 800189e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80018a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018a2:	3b01      	subs	r3, #1
 80018a4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80018a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	6959      	ldr	r1, [r3, #20]
 80018b4:	f011 0f04 	tst.w	r1, #4
 80018b8:	f43f af5a 	beq.w	8001770 <HAL_I2C_Master_Receive+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80018c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018c2:	3301      	adds	r3, #1
 80018c4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80018c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018c8:	3b01      	subs	r3, #1
 80018ca:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80018d6:	e74b      	b.n	8001770 <HAL_I2C_Master_Receive+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	2320      	movs	r3, #32
 80018da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80018e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80018e8:	e67f      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 80018ea:	2702      	movs	r7, #2
 80018ec:	e67d      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
    __HAL_LOCK(hi2c);
 80018ee:	2702      	movs	r7, #2
 80018f0:	e67b      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
      return HAL_ERROR;
 80018f2:	2701      	movs	r7, #1
 80018f4:	e679      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 80018f6:	2701      	movs	r7, #1
 80018f8:	e677      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 80018fa:	2701      	movs	r7, #1
 80018fc:	e675      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
          return HAL_ERROR;
 80018fe:	2701      	movs	r7, #1
 8001900:	e673      	b.n	80015ea <HAL_I2C_Master_Receive+0x26>
 8001902:	bf00      	nop

08001904 <HAL_I2C_Mem_Write>:
{
 8001904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001908:	b083      	sub	sp, #12
 800190a:	4604      	mov	r4, r0
 800190c:	460f      	mov	r7, r1
 800190e:	4690      	mov	r8, r2
 8001910:	4699      	mov	r9, r3
 8001912:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7fe fc5c 	bl	80001d0 <HAL_GetTick>
 8001918:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800191a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800191e:	b2c0      	uxtb	r0, r0
 8001920:	2820      	cmp	r0, #32
 8001922:	d003      	beq.n	800192c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001924:	2002      	movs	r0, #2
}
 8001926:	b003      	add	sp, #12
 8001928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800192c:	9500      	str	r5, [sp, #0]
 800192e:	2319      	movs	r3, #25
 8001930:	2201      	movs	r2, #1
 8001932:	494b      	ldr	r1, [pc, #300]	; (8001a60 <HAL_I2C_Mem_Write+0x15c>)
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff fa3b 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 800193a:	2800      	cmp	r0, #0
 800193c:	f040 8089 	bne.w	8001a52 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001940:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001944:	2b01      	cmp	r3, #1
 8001946:	f000 8086 	beq.w	8001a56 <HAL_I2C_Mem_Write+0x152>
 800194a:	2301      	movs	r3, #1
 800194c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f012 0f01 	tst.w	r2, #1
 8001958:	d103      	bne.n	8001962 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	6813      	ldr	r3, [r2, #0]
 8001966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800196a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800196c:	2321      	movs	r3, #33	; 0x21
 800196e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001972:	2340      	movs	r3, #64	; 0x40
 8001974:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001978:	2300      	movs	r3, #0
 800197a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800197c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800197e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001980:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001984:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001986:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001988:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800198a:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_I2C_Mem_Write+0x160>)
 800198c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800198e:	9501      	str	r5, [sp, #4]
 8001990:	9600      	str	r6, [sp, #0]
 8001992:	464b      	mov	r3, r9
 8001994:	4642      	mov	r2, r8
 8001996:	4639      	mov	r1, r7
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff fbad 	bl	80010f8 <I2C_RequestMemoryWrite>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d15b      	bne.n	8001a5a <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80019a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d035      	beq.n	8001a14 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	462a      	mov	r2, r5
 80019aa:	4631      	mov	r1, r6
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fb79 	bl	80010a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80019b2:	bb20      	cbnz	r0, 80019fe <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80019bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019be:	1c4b      	adds	r3, r1, #1
 80019c0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80019c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80019c4:	3a01      	subs	r2, #1
 80019c6:	b292      	uxth	r2, r2
 80019c8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80019ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	6958      	ldr	r0, [r3, #20]
 80019d8:	f010 0f04 	tst.w	r0, #4
 80019dc:	d0e1      	beq.n	80019a2 <HAL_I2C_Mem_Write+0x9e>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	d0df      	beq.n	80019a2 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e2:	784a      	ldrb	r2, [r1, #1]
 80019e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80019e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019e8:	3301      	adds	r3, #1
 80019ea:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80019ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019ee:	3b01      	subs	r3, #1
 80019f0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8563      	strh	r3, [r4, #42]	; 0x2a
 80019fc:	e7d1      	b.n	80019a2 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
 8001a06:	e78e      	b.n	8001926 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a08:	6822      	ldr	r2, [r4, #0]
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e7f7      	b.n	8001a04 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a14:	462a      	mov	r2, r5
 8001a16:	4631      	mov	r1, r6
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7ff fbd9 	bl	80011d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a1e:	b150      	cbz	r0, 8001a36 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
 8001a28:	e77d      	b.n	8001926 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2a:	6822      	ldr	r2, [r4, #0]
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e7f7      	b.n	8001a26 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	2320      	movs	r3, #32
 8001a42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001a4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001a50:	e769      	b.n	8001926 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8001a52:	2002      	movs	r0, #2
 8001a54:	e767      	b.n	8001926 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001a56:	2002      	movs	r0, #2
 8001a58:	e765      	b.n	8001926 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e763      	b.n	8001926 <HAL_I2C_Mem_Write+0x22>
 8001a5e:	bf00      	nop
 8001a60:	00100002 	.word	0x00100002
 8001a64:	ffff0000 	.word	0xffff0000

08001a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a68:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <RCC_Delay+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <RCC_Delay+0x28>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0a5b      	lsrs	r3, r3, #9
 8001a76:	fb00 f303 	mul.w	r3, r0, r3
 8001a7a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001a7c:	bf00      	nop
  }
  while (Delay --);
 8001a7e:	9b01      	ldr	r3, [sp, #4]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	9201      	str	r2, [sp, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f9      	bne.n	8001a7c <RCC_Delay+0x14>
}
 8001a88:	b002      	add	sp, #8
 8001a8a:	4770      	bx	lr
 8001a8c:	2000002c 	.word	0x2000002c
 8001a90:	10624dd3 	.word	0x10624dd3

08001a94 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001a94:	2800      	cmp	r0, #0
 8001a96:	f000 81f1 	beq.w	8001e7c <HAL_RCC_OscConfig+0x3e8>
{
 8001a9a:	b570      	push	{r4, r5, r6, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa0:	6803      	ldr	r3, [r0, #0]
 8001aa2:	f013 0f01 	tst.w	r3, #1
 8001aa6:	d02c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4baa      	ldr	r3, [pc, #680]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d01d      	beq.n	8001af0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4ba7      	ldr	r3, [pc, #668]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d012      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	6863      	ldr	r3, [r4, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac6:	d041      	beq.n	8001b4c <HAL_RCC_OscConfig+0xb8>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d155      	bne.n	8001b78 <HAL_RCC_OscConfig+0xe4>
 8001acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ad0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e037      	b.n	8001b56 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae6:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001aee:	d0e7      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	4b98      	ldr	r3, [pc, #608]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_OscConfig+0x6e>
 8001afa:	6863      	ldr	r3, [r4, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 81bf 	beq.w	8001e80 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	f013 0f02 	tst.w	r3, #2
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0a:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f013 0f0c 	tst.w	r3, #12
 8001b12:	d05f      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b14:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d054      	beq.n	8001bca <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8089 	beq.w	8001c3a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8001b28:	4b8b      	ldr	r3, [pc, #556]	; (8001d58 <HAL_RCC_OscConfig+0x2c4>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b2e:	f7fe fb4f 	bl	80001d0 <HAL_GetTick>
 8001b32:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b87      	ldr	r3, [pc, #540]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f013 0f02 	tst.w	r3, #2
 8001b3c:	d174      	bne.n	8001c28 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7fe fb47 	bl	80001d0 <HAL_GetTick>
 8001b42:	1b40      	subs	r0, r0, r5
 8001b44:	2802      	cmp	r0, #2
 8001b46:	d9f5      	bls.n	8001b34 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001b48:	2003      	movs	r0, #3
 8001b4a:	e19e      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	4a81      	ldr	r2, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001b4e:	6813      	ldr	r3, [r2, #0]
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	b343      	cbz	r3, 8001bac <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001b5a:	f7fe fb39 	bl	80001d0 <HAL_GetTick>
 8001b5e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b60:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b68:	d1cb      	bne.n	8001b02 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7fe fb31 	bl	80001d0 <HAL_GetTick>
 8001b6e:	1b40      	subs	r0, r0, r5
 8001b70:	2864      	cmp	r0, #100	; 0x64
 8001b72:	d9f5      	bls.n	8001b60 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001b74:	2003      	movs	r0, #3
 8001b76:	e188      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_OscConfig+0xfe>
 8001b7e:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e7e1      	b.n	8001b56 <HAL_RCC_OscConfig+0xc2>
 8001b92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b96:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e7d4      	b.n	8001b56 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001bac:	f7fe fb10 	bl	80001d0 <HAL_GetTick>
 8001bb0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bba:	d0a2      	beq.n	8001b02 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7fe fb08 	bl	80001d0 <HAL_GetTick>
 8001bc0:	1b40      	subs	r0, r0, r5
 8001bc2:	2864      	cmp	r0, #100	; 0x64
 8001bc4:	d9f5      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e15f      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bca:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001bd2:	d1a5      	bne.n	8001b20 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd4:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f013 0f02 	tst.w	r3, #2
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_OscConfig+0x152>
 8001bde:	6923      	ldr	r3, [r4, #16]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	f040 814f 	bne.w	8001e84 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4a5b      	ldr	r2, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001be8:	6813      	ldr	r3, [r2, #0]
 8001bea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bee:	6961      	ldr	r1, [r4, #20]
 8001bf0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bf4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	f013 0f08 	tst.w	r3, #8
 8001bfc:	d032      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfe:	69a3      	ldr	r3, [r4, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d045      	beq.n	8001c90 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001c04:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <HAL_RCC_OscConfig+0x2c8>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fae1 	bl	80001d0 <HAL_GetTick>
 8001c0e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f013 0f02 	tst.w	r3, #2
 8001c18:	d121      	bne.n	8001c5e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7fe fad9 	bl	80001d0 <HAL_GetTick>
 8001c1e:	1b40      	subs	r0, r0, r5
 8001c20:	2802      	cmp	r0, #2
 8001c22:	d9f5      	bls.n	8001c10 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8001c24:	2003      	movs	r0, #3
 8001c26:	e130      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4a4a      	ldr	r2, [pc, #296]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c30:	6961      	ldr	r1, [r4, #20]
 8001c32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e7dd      	b.n	8001bf6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_OscConfig+0x2c4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c40:	f7fe fac6 	bl	80001d0 <HAL_GetTick>
 8001c44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f013 0f02 	tst.w	r3, #2
 8001c4e:	d0d2      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7fe fabe 	bl	80001d0 <HAL_GetTick>
 8001c54:	1b40      	subs	r0, r0, r5
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d9f5      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	e115      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff ff02 	bl	8001a68 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	f013 0f04 	tst.w	r3, #4
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c76:	d11d      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c8c:	2501      	movs	r5, #1
 8001c8e:	e012      	b.n	8001cb6 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <HAL_RCC_OscConfig+0x2c8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c96:	f7fe fa9b 	bl	80001d0 <HAL_GetTick>
 8001c9a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f013 0f02 	tst.w	r3, #2
 8001ca4:	d0de      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7fe fa93 	bl	80001d0 <HAL_GetTick>
 8001caa:	1b40      	subs	r0, r0, r5
 8001cac:	2802      	cmp	r0, #2
 8001cae:	d9f5      	bls.n	8001c9c <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	e0ea      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8001cb4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x2cc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cbe:	d011      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	68e3      	ldr	r3, [r4, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d022      	beq.n	8001d0c <HAL_RCC_OscConfig+0x278>
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d138      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2a8>
 8001cca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	621a      	str	r2, [r3, #32]
 8001cda:	6a1a      	ldr	r2, [r3, #32]
 8001cdc:	f022 0204 	bic.w	r2, r2, #4
 8001ce0:	621a      	str	r2, [r3, #32]
 8001ce2:	e018      	b.n	8001d16 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce4:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <HAL_RCC_OscConfig+0x2cc>)
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cee:	f7fe fa6f 	bl	80001d0 <HAL_GetTick>
 8001cf2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_OscConfig+0x2cc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cfc:	d1e0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7fe fa67 	bl	80001d0 <HAL_GetTick>
 8001d02:	1b80      	subs	r0, r0, r6
 8001d04:	2864      	cmp	r0, #100	; 0x64
 8001d06:	d9f5      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8001d08:	2003      	movs	r0, #3
 8001d0a:	e0be      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001d0e:	6a13      	ldr	r3, [r2, #32]
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d16:	68e3      	ldr	r3, [r4, #12]
 8001d18:	b373      	cbz	r3, 8001d78 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fa59 	bl	80001d0 <HAL_GetTick>
 8001d1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f013 0f02 	tst.w	r3, #2
 8001d28:	d137      	bne.n	8001d9a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fa51 	bl	80001d0 <HAL_GetTick>
 8001d2e:	1b80      	subs	r0, r0, r6
 8001d30:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d34:	4298      	cmp	r0, r3
 8001d36:	d9f3      	bls.n	8001d20 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8001d38:	2003      	movs	r0, #3
 8001d3a:	e0a6      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d011      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2d0>
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_RCC_OscConfig+0x2c0>)
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	621a      	str	r2, [r3, #32]
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	f022 0204 	bic.w	r2, r2, #4
 8001d50:	621a      	str	r2, [r3, #32]
 8001d52:	e7e0      	b.n	8001d16 <HAL_RCC_OscConfig+0x282>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	42420000 	.word	0x42420000
 8001d5c:	42420480 	.word	0x42420480
 8001d60:	40007000 	.word	0x40007000
 8001d64:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001d66:	6a1a      	ldr	r2, [r3, #32]
 8001d68:	f042 0204 	orr.w	r2, r2, #4
 8001d6c:	621a      	str	r2, [r3, #32]
 8001d6e:	6a1a      	ldr	r2, [r3, #32]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	621a      	str	r2, [r3, #32]
 8001d76:	e7ce      	b.n	8001d16 <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8001d78:	f7fe fa2a 	bl	80001d0 <HAL_GetTick>
 8001d7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	f013 0f02 	tst.w	r3, #2
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7fe fa22 	bl	80001d0 <HAL_GetTick>
 8001d8c:	1b80      	subs	r0, r0, r6
 8001d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d92:	4298      	cmp	r0, r3
 8001d94:	d9f3      	bls.n	8001d7e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001d96:	2003      	movs	r0, #3
 8001d98:	e077      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001d9a:	b9e5      	cbnz	r5, 8001dd6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	69e3      	ldr	r3, [r4, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d072      	beq.n	8001e88 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da2:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001da4:	6852      	ldr	r2, [r2, #4]
 8001da6:	f002 020c 	and.w	r2, r2, #12
 8001daa:	2a08      	cmp	r2, #8
 8001dac:	d056      	beq.n	8001e5c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d017      	beq.n	8001de2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x40c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001db8:	f7fe fa0a 	bl	80001d0 <HAL_GetTick>
 8001dbc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dc6:	d047      	beq.n	8001e58 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe fa02 	bl	80001d0 <HAL_GetTick>
 8001dcc:	1b00      	subs	r0, r0, r4
 8001dce:	2802      	cmp	r0, #2
 8001dd0:	d9f5      	bls.n	8001dbe <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	e059      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001dd8:	69d3      	ldr	r3, [r2, #28]
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	61d3      	str	r3, [r2, #28]
 8001de0:	e7dc      	b.n	8001d9c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_RCC_OscConfig+0x40c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001de8:	f7fe f9f2 	bl	80001d0 <HAL_GetTick>
 8001dec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001df6:	d006      	beq.n	8001e06 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe f9ea 	bl	80001d0 <HAL_GetTick>
 8001dfc:	1b40      	subs	r0, r0, r5
 8001dfe:	2802      	cmp	r0, #2
 8001e00:	d9f5      	bls.n	8001dee <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001e02:	2003      	movs	r0, #3
 8001e04:	e041      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e06:	6a23      	ldr	r3, [r4, #32]
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d01a      	beq.n	8001e44 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	4923      	ldr	r1, [pc, #140]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001e10:	684b      	ldr	r3, [r1, #4]
 8001e12:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001e16:	6a22      	ldr	r2, [r4, #32]
 8001e18:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e1a:	4302      	orrs	r2, r0
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_RCC_OscConfig+0x40c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e26:	f7fe f9d3 	bl	80001d0 <HAL_GetTick>
 8001e2a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e34:	d10e      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7fe f9cb 	bl	80001d0 <HAL_GetTick>
 8001e3a:	1b00      	subs	r0, r0, r4
 8001e3c:	2802      	cmp	r0, #2
 8001e3e:	d9f5      	bls.n	8001e2c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001e40:	2003      	movs	r0, #3
 8001e42:	e022      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e44:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001e46:	6853      	ldr	r3, [r2, #4]
 8001e48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e4c:	68a1      	ldr	r1, [r4, #8]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6053      	str	r3, [r2, #4]
 8001e52:	e7dc      	b.n	8001e0e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001e54:	2000      	movs	r0, #0
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
 8001e58:	2000      	movs	r0, #0
 8001e5a:	e016      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d016      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_RCC_OscConfig+0x408>)
 8001e62:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e64:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001e68:	6a22      	ldr	r2, [r4, #32]
 8001e6a:	4291      	cmp	r1, r2
 8001e6c:	d111      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e6e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e72:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10e      	bne.n	8001e96 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001e78:	2000      	movs	r0, #0
 8001e7a:	e006      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
}
 8001e7e:	4770      	bx	lr
        return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001e84:	2001      	movs	r0, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001e88:	2000      	movs	r0, #0
}
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e8e:	2001      	movs	r0, #1
 8001e90:	e7fb      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
 8001e94:	e7f9      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
 8001e96:	2001      	movs	r0, #1
 8001e98:	e7f7      	b.n	8001e8a <HAL_RCC_OscConfig+0x3f6>
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	42420060 	.word	0x42420060

08001ea4 <HAL_RCC_GetSysClockFreq>:
{
 8001ea4:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eaa:	f10d 0c18 	add.w	ip, sp, #24
 8001eae:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001eb2:	f240 2301 	movw	r3, #513	; 0x201
 8001eb6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x60>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	2a08      	cmp	r2, #8
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001ec6:	4810      	ldr	r0, [pc, #64]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001ec8:	b006      	add	sp, #24
 8001eca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ecc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001ed0:	4462      	add	r2, ip
 8001ed2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001eda:	d00c      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x60>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001ee4:	4463      	add	r3, ip
 8001ee6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x64>)
 8001eec:	fb00 f002 	mul.w	r0, r0, r2
 8001ef0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ef4:	e7e8      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x68>)
 8001ef8:	fb00 f002 	mul.w	r0, r0, r2
 8001efc:	e7e4      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x24>
 8001efe:	bf00      	nop
 8001f00:	08005084 	.word	0x08005084
 8001f04:	40021000 	.word	0x40021000
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	003d0900 	.word	0x003d0900

08001f10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001f10:	2800      	cmp	r0, #0
 8001f12:	f000 80a0 	beq.w	8002056 <HAL_RCC_ClockConfig+0x146>
{
 8001f16:	b570      	push	{r4, r5, r6, lr}
 8001f18:	460d      	mov	r5, r1
 8001f1a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b52      	ldr	r3, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x158>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	428b      	cmp	r3, r1
 8001f26:	d20b      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f28:	4a4f      	ldr	r2, [pc, #316]	; (8002068 <HAL_RCC_ClockConfig+0x158>)
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	f023 0307 	bic.w	r3, r3, #7
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f34:	6813      	ldr	r3, [r2, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	428b      	cmp	r3, r1
 8001f3c:	f040 808d 	bne.w	800205a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	f013 0f02 	tst.w	r3, #2
 8001f46:	d017      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	f013 0f04 	tst.w	r3, #4
 8001f4c:	d004      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4e:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001f50:	6853      	ldr	r3, [r2, #4]
 8001f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f56:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	f013 0f08 	tst.w	r3, #8
 8001f5e:	d004      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f60:	4a42      	ldr	r2, [pc, #264]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001f62:	6853      	ldr	r3, [r2, #4]
 8001f64:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f68:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6a:	4a40      	ldr	r2, [pc, #256]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001f6c:	6853      	ldr	r3, [r2, #4]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f72:	68a1      	ldr	r1, [r4, #8]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	f013 0f01 	tst.w	r3, #1
 8001f7e:	d031      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	6863      	ldr	r3, [r4, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d020      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d025      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4a38      	ldr	r2, [pc, #224]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	f012 0f02 	tst.w	r2, #2
 8001f92:	d064      	beq.n	800205e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001f96:	684a      	ldr	r2, [r1, #4]
 8001f98:	f022 0203 	bic.w	r2, r2, #3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001fa0:	f7fe f916 	bl	80001d0 <HAL_GetTick>
 8001fa4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	6862      	ldr	r2, [r4, #4]
 8001fb0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb6:	f7fe f90b 	bl	80001d0 <HAL_GetTick>
 8001fba:	1b80      	subs	r0, r0, r6
 8001fbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fc0:	4298      	cmp	r0, r3
 8001fc2:	d9f0      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	e045      	b.n	8002054 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc8:	4a28      	ldr	r2, [pc, #160]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001fd0:	d1e0      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	e03e      	b.n	8002054 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4a25      	ldr	r2, [pc, #148]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001fde:	d1d9      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	e037      	b.n	8002054 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_ClockConfig+0x158>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	42ab      	cmp	r3, r5
 8001fee:	d90a      	bls.n	8002006 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_RCC_ClockConfig+0x158>)
 8001ff2:	6813      	ldr	r3, [r2, #0]
 8001ff4:	f023 0307 	bic.w	r3, r3, #7
 8001ff8:	432b      	orrs	r3, r5
 8001ffa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffc:	6813      	ldr	r3, [r2, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	42ab      	cmp	r3, r5
 8002004:	d12d      	bne.n	8002062 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	f013 0f04 	tst.w	r3, #4
 800200c:	d006      	beq.n	800201c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8002010:	6853      	ldr	r3, [r2, #4]
 8002012:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002016:	68e1      	ldr	r1, [r4, #12]
 8002018:	430b      	orrs	r3, r1
 800201a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	f013 0f08 	tst.w	r3, #8
 8002022:	d007      	beq.n	8002034 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 8002026:	6853      	ldr	r3, [r2, #4]
 8002028:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800202c:	6921      	ldr	r1, [r4, #16]
 800202e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002032:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002034:	f7ff ff36 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_ClockConfig+0x15c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x160>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	40d8      	lsrs	r0, r3
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x164>)
 8002048:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_ClockConfig+0x168>)
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f7fe f87d 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8002052:	2000      	movs	r0, #0
}
 8002054:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
}
 8002058:	4770      	bx	lr
    return HAL_ERROR;
 800205a:	2001      	movs	r0, #1
 800205c:	e7fa      	b.n	8002054 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
 8002060:	e7f8      	b.n	8002054 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
 8002064:	e7f6      	b.n	8002054 <HAL_RCC_ClockConfig+0x144>
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
 8002070:	0800506c 	.word	0x0800506c
 8002074:	2000002c 	.word	0x2000002c
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetHCLKFreq>:
}
 800207c:	4b01      	ldr	r3, [pc, #4]	; (8002084 <HAL_RCC_GetHCLKFreq+0x8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000002c 	.word	0x2000002c

08002088 <HAL_RCC_GetPCLK1Freq>:
{
 8002088:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800208a:	f7ff fff7 	bl	800207c <HAL_RCC_GetHCLKFreq>
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002096:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
}
 800209a:	40d8      	lsrs	r0, r3
 800209c:	bd08      	pop	{r3, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	0800507c 	.word	0x0800507c

080020a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020a8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020aa:	6a03      	ldr	r3, [r0, #32]
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020b6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020bc:	680c      	ldr	r4, [r1, #0]
 80020be:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020c2:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020c6:	688b      	ldr	r3, [r1, #8]
 80020c8:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020ca:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <TIM_OC1_SetConfig+0x58>)
 80020cc:	42a0      	cmp	r0, r4
 80020ce:	d009      	beq.n	80020e4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020d0:	4c0b      	ldr	r4, [pc, #44]	; (8002100 <TIM_OC1_SetConfig+0x58>)
 80020d2:	42a0      	cmp	r0, r4
 80020d4:	d00d      	beq.n	80020f2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d6:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020d8:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020da:	684a      	ldr	r2, [r1, #4]
 80020dc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020de:	6203      	str	r3, [r0, #32]
}
 80020e0:	bc70      	pop	{r4, r5, r6}
 80020e2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80020e4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80020e8:	68ca      	ldr	r2, [r1, #12]
 80020ea:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	e7ee      	b.n	80020d0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020f2:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80020f6:	694a      	ldr	r2, [r1, #20]
 80020f8:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80020fa:	698e      	ldr	r6, [r1, #24]
 80020fc:	4316      	orrs	r6, r2
 80020fe:	e7ea      	b.n	80020d6 <TIM_OC1_SetConfig+0x2e>
 8002100:	40012c00 	.word	0x40012c00

08002104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002104:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002106:	6a03      	ldr	r3, [r0, #32]
 8002108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800210c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002110:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002112:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002114:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002118:	680c      	ldr	r4, [r1, #0]
 800211a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800211c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002120:	688c      	ldr	r4, [r1, #8]
 8002122:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002126:	4c0f      	ldr	r4, [pc, #60]	; (8002164 <TIM_OC3_SetConfig+0x60>)
 8002128:	42a0      	cmp	r0, r4
 800212a:	d009      	beq.n	8002140 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212c:	4c0d      	ldr	r4, [pc, #52]	; (8002164 <TIM_OC3_SetConfig+0x60>)
 800212e:	42a0      	cmp	r0, r4
 8002130:	d00e      	beq.n	8002150 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002132:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002134:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002136:	684a      	ldr	r2, [r1, #4]
 8002138:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800213a:	6203      	str	r3, [r0, #32]
}
 800213c:	bc30      	pop	{r4, r5}
 800213e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002144:	68cc      	ldr	r4, [r1, #12]
 8002146:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800214a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214e:	e7ed      	b.n	800212c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002150:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002154:	694c      	ldr	r4, [r1, #20]
 8002156:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800215a:	698c      	ldr	r4, [r1, #24]
 800215c:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8002160:	e7e7      	b.n	8002132 <TIM_OC3_SetConfig+0x2e>
 8002162:	bf00      	nop
 8002164:	40012c00 	.word	0x40012c00

08002168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002168:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800216a:	6a03      	ldr	r3, [r0, #32]
 800216c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002170:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002172:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002174:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002176:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002178:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800217c:	680d      	ldr	r5, [r1, #0]
 800217e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002186:	688d      	ldr	r5, [r1, #8]
 8002188:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800218c:	4d07      	ldr	r5, [pc, #28]	; (80021ac <TIM_OC4_SetConfig+0x44>)
 800218e:	42a8      	cmp	r0, r5
 8002190:	d006      	beq.n	80021a0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002192:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002194:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002196:	684a      	ldr	r2, [r1, #4]
 8002198:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219a:	6203      	str	r3, [r0, #32]
}
 800219c:	bc30      	pop	{r4, r5}
 800219e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021a0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021a4:	694d      	ldr	r5, [r1, #20]
 80021a6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80021aa:	e7f2      	b.n	8002192 <TIM_OC4_SetConfig+0x2a>
 80021ac:	40012c00 	.word	0x40012c00

080021b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b0:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021b2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b4:	6a05      	ldr	r5, [r0, #32]
 80021b6:	f025 0501 	bic.w	r5, r5, #1
 80021ba:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021bc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021be:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021c2:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021c6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80021ca:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021cc:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80021ce:	6203      	str	r3, [r0, #32]
}
 80021d0:	bc30      	pop	{r4, r5}
 80021d2:	4770      	bx	lr

080021d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021d4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d6:	6a05      	ldr	r5, [r0, #32]
 80021d8:	f025 0510 	bic.w	r5, r5, #16
 80021dc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021de:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80021e0:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021e2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021e6:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ee:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021f2:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80021f4:	6203      	str	r3, [r0, #32]
}
 80021f6:	bc30      	pop	{r4, r5}
 80021f8:	4770      	bx	lr

080021fa <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021fa:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002200:	430b      	orrs	r3, r1
 8002202:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002206:	6083      	str	r3, [r0, #8]
}
 8002208:	4770      	bx	lr
	...

0800220c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800220c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d127      	bne.n	8002266 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800221c:	6802      	ldr	r2, [r0, #0]
 800221e:	68d3      	ldr	r3, [r2, #12]
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002226:	6803      	ldr	r3, [r0, #0]
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_TIM_Base_Start_IT+0x64>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d010      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x44>
 800222e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002232:	d00d      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x44>
 8002234:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002238:	4293      	cmp	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x44>
 800223c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002240:	4293      	cmp	r3, r2
 8002242:	d005      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800224c:	2000      	movs	r0, #0
 800224e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002256:	2a06      	cmp	r2, #6
 8002258:	d007      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002262:	2000      	movs	r0, #0
 8002264:	4770      	bx	lr
    return HAL_ERROR;
 8002266:	2001      	movs	r0, #1
 8002268:	4770      	bx	lr
  return HAL_OK;
 800226a:	2000      	movs	r0, #0
}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40012c00 	.word	0x40012c00

08002274 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	68d3      	ldr	r3, [r2, #12]
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	6a19      	ldr	r1, [r3, #32]
 8002282:	f241 1211 	movw	r2, #4369	; 0x1111
 8002286:	4211      	tst	r1, r2
 8002288:	d108      	bne.n	800229c <HAL_TIM_Base_Stop_IT+0x28>
 800228a:	6a19      	ldr	r1, [r3, #32]
 800228c:	f240 4244 	movw	r2, #1092	; 0x444
 8002290:	4211      	tst	r1, r2
 8002292:	d103      	bne.n	800229c <HAL_TIM_Base_Stop_IT+0x28>
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800229c:	2301      	movs	r3, #1
 800229e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80022a2:	2000      	movs	r0, #0
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_PWM_MspInit>:
}
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80022a8:	4770      	bx	lr

080022aa <HAL_TIM_IC_CaptureCallback>:
}
 80022aa:	4770      	bx	lr

080022ac <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80022ac:	4770      	bx	lr

080022ae <HAL_TIM_TriggerCallback>:
}
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_IRQHandler>:
{
 80022b0:	b510      	push	{r4, lr}
 80022b2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b4:	6803      	ldr	r3, [r0, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	f012 0f02 	tst.w	r2, #2
 80022bc:	d011      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	f012 0f02 	tst.w	r2, #2
 80022c4:	d00d      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c6:	f06f 0202 	mvn.w	r2, #2
 80022ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d0:	6803      	ldr	r3, [r0, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f013 0f03 	tst.w	r3, #3
 80022d8:	d070      	beq.n	80023bc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80022da:	f7ff ffe6 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	2300      	movs	r3, #0
 80022e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	f012 0f04 	tst.w	r2, #4
 80022ea:	d012      	beq.n	8002312 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	f012 0f04 	tst.w	r2, #4
 80022f2:	d00e      	beq.n	8002312 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f4:	f06f 0204 	mvn.w	r2, #4
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fa:	2302      	movs	r3, #2
 80022fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002306:	d05f      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff ffce 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	2300      	movs	r3, #0
 8002310:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	f012 0f08 	tst.w	r2, #8
 800231a:	d012      	beq.n	8002342 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	f012 0f08 	tst.w	r2, #8
 8002322:	d00e      	beq.n	8002342 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002324:	f06f 0208 	mvn.w	r2, #8
 8002328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800232a:	2304      	movs	r3, #4
 800232c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f013 0f03 	tst.w	r3, #3
 8002336:	d04e      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff ffb6 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	2300      	movs	r3, #0
 8002340:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002342:	6823      	ldr	r3, [r4, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	f012 0f10 	tst.w	r2, #16
 800234a:	d012      	beq.n	8002372 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	f012 0f10 	tst.w	r2, #16
 8002352:	d00e      	beq.n	8002372 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002354:	f06f 0210 	mvn.w	r2, #16
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235a:	2308      	movs	r3, #8
 800235c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002366:	d03d      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002368:	4620      	mov	r0, r4
 800236a:	f7ff ff9e 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	2300      	movs	r3, #0
 8002370:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	f012 0f01 	tst.w	r2, #1
 800237a:	d003      	beq.n	8002384 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	f012 0f01 	tst.w	r2, #1
 8002382:	d136      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	f012 0f80 	tst.w	r2, #128	; 0x80
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002394:	d134      	bne.n	8002400 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800239e:	d003      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80023a6:	d132      	bne.n	800240e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	f012 0f20 	tst.w	r2, #32
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	f012 0f20 	tst.w	r2, #32
 80023b8:	d130      	bne.n	800241c <HAL_TIM_IRQHandler+0x16c>
}
 80023ba:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023bc:	f7ff ff74 	bl	80022a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff ff73 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
 80023c6:	e78a      	b.n	80022de <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7ff ff6d 	bl	80022a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff ff6c 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
 80023d4:	e79b      	b.n	800230e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7ff ff66 	bl	80022a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff ff65 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
 80023e2:	e7ac      	b.n	800233e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7ff ff5f 	bl	80022a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff ff5e 	bl	80022ac <HAL_TIM_PWM_PulseFinishedCallback>
 80023f0:	e7bd      	b.n	800236e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f2:	f06f 0201 	mvn.w	r2, #1
 80023f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f001 fb35 	bl	8003a68 <HAL_TIM_PeriodElapsedCallback>
 80023fe:	e7c1      	b.n	8002384 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002404:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002406:	4620      	mov	r0, r4
 8002408:	f000 faab 	bl	8002962 <HAL_TIMEx_BreakCallback>
 800240c:	e7c3      	b.n	8002396 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800240e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002412:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff ff4a 	bl	80022ae <HAL_TIM_TriggerCallback>
 800241a:	e7c5      	b.n	80023a8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800241c:	f06f 0220 	mvn.w	r2, #32
 8002420:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002422:	4620      	mov	r0, r4
 8002424:	f000 fa9c 	bl	8002960 <HAL_TIMEx_CommutCallback>
}
 8002428:	e7c7      	b.n	80023ba <HAL_TIM_IRQHandler+0x10a>
	...

0800242c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800242c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <TIM_Base_SetConfig+0x70>)
 8002430:	4290      	cmp	r0, r2
 8002432:	d00a      	beq.n	800244a <TIM_Base_SetConfig+0x1e>
 8002434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002438:	d007      	beq.n	800244a <TIM_Base_SetConfig+0x1e>
 800243a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800243e:	4290      	cmp	r0, r2
 8002440:	d003      	beq.n	800244a <TIM_Base_SetConfig+0x1e>
 8002442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002446:	4290      	cmp	r0, r2
 8002448:	d103      	bne.n	8002452 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800244e:	684a      	ldr	r2, [r1, #4]
 8002450:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <TIM_Base_SetConfig+0x70>)
 8002454:	4290      	cmp	r0, r2
 8002456:	d00a      	beq.n	800246e <TIM_Base_SetConfig+0x42>
 8002458:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0x42>
 800245e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002462:	4290      	cmp	r0, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0x42>
 8002466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800246a:	4290      	cmp	r0, r2
 800246c:	d103      	bne.n	8002476 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800246e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002472:	68ca      	ldr	r2, [r1, #12]
 8002474:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800247a:	694a      	ldr	r2, [r1, #20]
 800247c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800247e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002480:	688b      	ldr	r3, [r1, #8]
 8002482:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002484:	680b      	ldr	r3, [r1, #0]
 8002486:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <TIM_Base_SetConfig+0x70>)
 800248a:	4298      	cmp	r0, r3
 800248c:	d002      	beq.n	8002494 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800248e:	2301      	movs	r3, #1
 8002490:	6143      	str	r3, [r0, #20]
}
 8002492:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002494:	690b      	ldr	r3, [r1, #16]
 8002496:	6303      	str	r3, [r0, #48]	; 0x30
 8002498:	e7f9      	b.n	800248e <TIM_Base_SetConfig+0x62>
 800249a:	bf00      	nop
 800249c:	40012c00 	.word	0x40012c00

080024a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80024a0:	b340      	cbz	r0, 80024f4 <HAL_TIM_Base_Init+0x54>
{
 80024a2:	b510      	push	{r4, lr}
 80024a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80024a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024aa:	b1f3      	cbz	r3, 80024ea <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b2:	4621      	mov	r1, r4
 80024b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80024b8:	f7ff ffb8 	bl	800242c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024bc:	2301      	movs	r3, #1
 80024be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80024c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80024ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80024ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80024de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80024e6:	2000      	movs	r0, #0
}
 80024e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024ee:	f001 fc15 	bl	8003d1c <HAL_TIM_Base_MspInit>
 80024f2:	e7db      	b.n	80024ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80024f4:	2001      	movs	r0, #1
}
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80024f8:	b340      	cbz	r0, 800254c <HAL_TIM_PWM_Init+0x54>
{
 80024fa:	b510      	push	{r4, lr}
 80024fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002502:	b1f3      	cbz	r3, 8002542 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250a:	4621      	mov	r1, r4
 800250c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002510:	f7ff ff8c 	bl	800242c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002514:	2301      	movs	r3, #1
 8002516:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800251e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002522:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002526:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800252e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002532:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800253a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800253e:	2000      	movs	r0, #0
}
 8002540:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002542:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002546:	f7ff feae 	bl	80022a6 <HAL_TIM_PWM_MspInit>
 800254a:	e7db      	b.n	8002504 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800254c:	2001      	movs	r0, #1
}
 800254e:	4770      	bx	lr

08002550 <TIM_OC2_SetConfig>:
{
 8002550:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002552:	6a03      	ldr	r3, [r0, #32]
 8002554:	f023 0310 	bic.w	r3, r3, #16
 8002558:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800255a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800255c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800255e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002560:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002564:	680d      	ldr	r5, [r1, #0]
 8002566:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800256a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800256e:	688d      	ldr	r5, [r1, #8]
 8002570:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002574:	4d0e      	ldr	r5, [pc, #56]	; (80025b0 <TIM_OC2_SetConfig+0x60>)
 8002576:	42a8      	cmp	r0, r5
 8002578:	d009      	beq.n	800258e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257a:	4d0d      	ldr	r5, [pc, #52]	; (80025b0 <TIM_OC2_SetConfig+0x60>)
 800257c:	42a8      	cmp	r0, r5
 800257e:	d00e      	beq.n	800259e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002580:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002582:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002584:	684a      	ldr	r2, [r1, #4]
 8002586:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002588:	6203      	str	r3, [r0, #32]
}
 800258a:	bc30      	pop	{r4, r5}
 800258c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800258e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002592:	68cd      	ldr	r5, [r1, #12]
 8002594:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800259c:	e7ed      	b.n	800257a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800259e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a2:	694d      	ldr	r5, [r1, #20]
 80025a4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025a8:	698d      	ldr	r5, [r1, #24]
 80025aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80025ae:	e7e7      	b.n	8002580 <TIM_OC2_SetConfig+0x30>
 80025b0:	40012c00 	.word	0x40012c00

080025b4 <HAL_TIM_PWM_ConfigChannel>:
{
 80025b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80025b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d060      	beq.n	8002680 <HAL_TIM_PWM_ConfigChannel+0xcc>
 80025be:	4604      	mov	r4, r0
 80025c0:	460d      	mov	r5, r1
 80025c2:	2301      	movs	r3, #1
 80025c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80025c8:	2a0c      	cmp	r2, #12
 80025ca:	d81a      	bhi.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80025cc:	e8df f002 	tbb	[pc, r2]
 80025d0:	19191907 	.word	0x19191907
 80025d4:	1919191d 	.word	0x1919191d
 80025d8:	19191931 	.word	0x19191931
 80025dc:	44          	.byte	0x44
 80025dd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025de:	6800      	ldr	r0, [r0, #0]
 80025e0:	f7ff fd62 	bl	80020a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	6993      	ldr	r3, [r2, #24]
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	6993      	ldr	r3, [r2, #24]
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f8:	6822      	ldr	r2, [r4, #0]
 80025fa:	6993      	ldr	r3, [r2, #24]
 80025fc:	6929      	ldr	r1, [r5, #16]
 80025fe:	430b      	orrs	r3, r1
 8002600:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8002602:	2000      	movs	r0, #0
 8002604:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002608:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800260a:	6800      	ldr	r0, [r0, #0]
 800260c:	f7ff ffa0 	bl	8002550 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	6993      	ldr	r3, [r2, #24]
 8002614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002618:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	6993      	ldr	r3, [r2, #24]
 800261e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002622:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	6993      	ldr	r3, [r2, #24]
 8002628:	6929      	ldr	r1, [r5, #16]
 800262a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800262e:	6193      	str	r3, [r2, #24]
      break;
 8002630:	e7e7      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002632:	6800      	ldr	r0, [r0, #0]
 8002634:	f7ff fd66 	bl	8002104 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002638:	6822      	ldr	r2, [r4, #0]
 800263a:	69d3      	ldr	r3, [r2, #28]
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	69d3      	ldr	r3, [r2, #28]
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	69d3      	ldr	r3, [r2, #28]
 8002650:	6929      	ldr	r1, [r5, #16]
 8002652:	430b      	orrs	r3, r1
 8002654:	61d3      	str	r3, [r2, #28]
      break;
 8002656:	e7d4      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002658:	6800      	ldr	r0, [r0, #0]
 800265a:	f7ff fd85 	bl	8002168 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800265e:	6822      	ldr	r2, [r4, #0]
 8002660:	69d3      	ldr	r3, [r2, #28]
 8002662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002666:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002668:	6822      	ldr	r2, [r4, #0]
 800266a:	69d3      	ldr	r3, [r2, #28]
 800266c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002670:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002672:	6822      	ldr	r2, [r4, #0]
 8002674:	69d3      	ldr	r3, [r2, #28]
 8002676:	6929      	ldr	r1, [r5, #16]
 8002678:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800267c:	61d3      	str	r3, [r2, #28]
      break;
 800267e:	e7c0      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8002680:	2002      	movs	r0, #2
 8002682:	e7c1      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x54>

08002684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002684:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002686:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002688:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800268c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002690:	430a      	orrs	r2, r1
 8002692:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002694:	6082      	str	r2, [r0, #8]
}
 8002696:	bc10      	pop	{r4}
 8002698:	4770      	bx	lr

0800269a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800269a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d066      	beq.n	8002770 <HAL_TIM_ConfigClockSource+0xd6>
{
 80026a2:	b510      	push	{r4, lr}
 80026a4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80026a6:	2301      	movs	r3, #1
 80026a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	2302      	movs	r3, #2
 80026ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80026b2:	6802      	ldr	r2, [r0, #0]
 80026b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80026be:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80026c0:	680b      	ldr	r3, [r1, #0]
 80026c2:	2b60      	cmp	r3, #96	; 0x60
 80026c4:	d040      	beq.n	8002748 <HAL_TIM_ConfigClockSource+0xae>
 80026c6:	d822      	bhi.n	800270e <HAL_TIM_ConfigClockSource+0x74>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d047      	beq.n	800275c <HAL_TIM_ConfigClockSource+0xc2>
 80026cc:	d90b      	bls.n	80026e6 <HAL_TIM_ConfigClockSource+0x4c>
 80026ce:	2b50      	cmp	r3, #80	; 0x50
 80026d0:	d10e      	bne.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d2:	68ca      	ldr	r2, [r1, #12]
 80026d4:	6849      	ldr	r1, [r1, #4]
 80026d6:	6800      	ldr	r0, [r0, #0]
 80026d8:	f7ff fd6a 	bl	80021b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026dc:	2150      	movs	r1, #80	; 0x50
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	f7ff fd8b 	bl	80021fa <TIM_ITRx_SetConfig>
      break;
 80026e4:	e004      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d00c      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x6a>
 80026ea:	d908      	bls.n	80026fe <HAL_TIM_ConfigClockSource+0x64>
 80026ec:	2b30      	cmp	r3, #48	; 0x30
 80026ee:	d009      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80026fc:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80026fe:	b10b      	cbz	r3, 8002704 <HAL_TIM_ConfigClockSource+0x6a>
 8002700:	2b10      	cmp	r3, #16
 8002702:	d1f5      	bne.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002704:	4619      	mov	r1, r3
 8002706:	6820      	ldr	r0, [r4, #0]
 8002708:	f7ff fd77 	bl	80021fa <TIM_ITRx_SetConfig>
        break;
 800270c:	e7f0      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800270e:	2b70      	cmp	r3, #112	; 0x70
 8002710:	d00e      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x96>
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002716:	d1eb      	bne.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8002718:	68cb      	ldr	r3, [r1, #12]
 800271a:	684a      	ldr	r2, [r1, #4]
 800271c:	6889      	ldr	r1, [r1, #8]
 800271e:	6800      	ldr	r0, [r0, #0]
 8002720:	f7ff ffb0 	bl	8002684 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	6893      	ldr	r3, [r2, #8]
 8002728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272c:	6093      	str	r3, [r2, #8]
      break;
 800272e:	e7df      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8002730:	68cb      	ldr	r3, [r1, #12]
 8002732:	684a      	ldr	r2, [r1, #4]
 8002734:	6889      	ldr	r1, [r1, #8]
 8002736:	6800      	ldr	r0, [r0, #0]
 8002738:	f7ff ffa4 	bl	8002684 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002744:	6093      	str	r3, [r2, #8]
      break;
 8002746:	e7d3      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002748:	68ca      	ldr	r2, [r1, #12]
 800274a:	6849      	ldr	r1, [r1, #4]
 800274c:	6800      	ldr	r0, [r0, #0]
 800274e:	f7ff fd41 	bl	80021d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002752:	2160      	movs	r1, #96	; 0x60
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	f7ff fd50 	bl	80021fa <TIM_ITRx_SetConfig>
      break;
 800275a:	e7c9      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275c:	68ca      	ldr	r2, [r1, #12]
 800275e:	6849      	ldr	r1, [r1, #4]
 8002760:	6800      	ldr	r0, [r0, #0]
 8002762:	f7ff fd25 	bl	80021b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	f7ff fd46 	bl	80021fa <TIM_ITRx_SetConfig>
      break;
 800276e:	e7bf      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002770:	2002      	movs	r0, #2
}
 8002772:	4770      	bx	lr

08002774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002774:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002776:	f001 011f 	and.w	r1, r1, #31
 800277a:	2301      	movs	r3, #1
 800277c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002780:	6a03      	ldr	r3, [r0, #32]
 8002782:	ea23 0304 	bic.w	r3, r3, r4
 8002786:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002788:	6a03      	ldr	r3, [r0, #32]
 800278a:	fa02 f101 	lsl.w	r1, r2, r1
 800278e:	430b      	orrs	r3, r1
 8002790:	6203      	str	r3, [r0, #32]
}
 8002792:	bc10      	pop	{r4}
 8002794:	4770      	bx	lr
	...

08002798 <HAL_TIM_PWM_Start>:
{
 8002798:	b510      	push	{r4, lr}
 800279a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800279c:	4608      	mov	r0, r1
 800279e:	bb51      	cbnz	r1, 80027f6 <HAL_TIM_PWM_Start+0x5e>
 80027a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	bf18      	it	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d15b      	bne.n	8002868 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d139      	bne.n	8002828 <HAL_TIM_PWM_Start+0x90>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ba:	2201      	movs	r2, #1
 80027bc:	4601      	mov	r1, r0
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	f7ff ffd8 	bl	8002774 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <HAL_TIM_PWM_Start+0xd8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d03d      	beq.n	8002848 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	4a28      	ldr	r2, [pc, #160]	; (8002870 <HAL_TIM_PWM_Start+0xd8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d03e      	beq.n	8002852 <HAL_TIM_PWM_Start+0xba>
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d03b      	beq.n	8002852 <HAL_TIM_PWM_Start+0xba>
 80027da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027de:	4293      	cmp	r3, r2
 80027e0:	d037      	beq.n	8002852 <HAL_TIM_PWM_Start+0xba>
 80027e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d033      	beq.n	8002852 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80027f2:	2000      	movs	r0, #0
 80027f4:	e039      	b.n	800286a <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f6:	2904      	cmp	r1, #4
 80027f8:	d008      	beq.n	800280c <HAL_TIM_PWM_Start+0x74>
 80027fa:	2908      	cmp	r1, #8
 80027fc:	d00d      	beq.n	800281a <HAL_TIM_PWM_Start+0x82>
 80027fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	bf18      	it	ne
 8002808:	2301      	movne	r3, #1
 800280a:	e7cf      	b.n	80027ac <HAL_TIM_PWM_Start+0x14>
 800280c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	bf18      	it	ne
 8002816:	2301      	movne	r3, #1
 8002818:	e7c8      	b.n	80027ac <HAL_TIM_PWM_Start+0x14>
 800281a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	bf18      	it	ne
 8002824:	2301      	movne	r3, #1
 8002826:	e7c1      	b.n	80027ac <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002828:	2804      	cmp	r0, #4
 800282a:	d005      	beq.n	8002838 <HAL_TIM_PWM_Start+0xa0>
 800282c:	2808      	cmp	r0, #8
 800282e:	d007      	beq.n	8002840 <HAL_TIM_PWM_Start+0xa8>
 8002830:	2302      	movs	r3, #2
 8002832:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002836:	e7c0      	b.n	80027ba <HAL_TIM_PWM_Start+0x22>
 8002838:	2302      	movs	r3, #2
 800283a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800283e:	e7bc      	b.n	80027ba <HAL_TIM_PWM_Start+0x22>
 8002840:	2302      	movs	r3, #2
 8002842:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002846:	e7b8      	b.n	80027ba <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8002848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800284a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
 8002850:	e7bc      	b.n	80027cc <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002858:	2a06      	cmp	r2, #6
 800285a:	d007      	beq.n	800286c <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002864:	2000      	movs	r0, #0
 8002866:	e000      	b.n	800286a <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8002868:	2001      	movs	r0, #1
}
 800286a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800286c:	2000      	movs	r0, #0
 800286e:	e7fc      	b.n	800286a <HAL_TIM_PWM_Start+0xd2>
 8002870:	40012c00 	.word	0x40012c00

08002874 <HAL_TIM_PWM_Stop>:
{
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4604      	mov	r4, r0
 8002878:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800287a:	2200      	movs	r2, #0
 800287c:	6800      	ldr	r0, [r0, #0]
 800287e:	f7ff ff79 	bl	8002774 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_TIM_PWM_Stop+0x80>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d014      	beq.n	80028b4 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	6a19      	ldr	r1, [r3, #32]
 800288e:	f241 1211 	movw	r2, #4369	; 0x1111
 8002892:	4211      	tst	r1, r2
 8002894:	d108      	bne.n	80028a8 <HAL_TIM_PWM_Stop+0x34>
 8002896:	6a19      	ldr	r1, [r3, #32]
 8002898:	f240 4244 	movw	r2, #1092	; 0x444
 800289c:	4211      	tst	r1, r2
 800289e:	d103      	bne.n	80028a8 <HAL_TIM_PWM_Stop+0x34>
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	b99d      	cbnz	r5, 80028d2 <HAL_TIM_PWM_Stop+0x5e>
 80028aa:	2301      	movs	r3, #1
 80028ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80028b0:	2000      	movs	r0, #0
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80028b4:	6a19      	ldr	r1, [r3, #32]
 80028b6:	f241 1211 	movw	r2, #4369	; 0x1111
 80028ba:	4211      	tst	r1, r2
 80028bc:	d1e5      	bne.n	800288a <HAL_TIM_PWM_Stop+0x16>
 80028be:	6a19      	ldr	r1, [r3, #32]
 80028c0:	f240 4244 	movw	r2, #1092	; 0x444
 80028c4:	4211      	tst	r1, r2
 80028c6:	d1e0      	bne.n	800288a <HAL_TIM_PWM_Stop+0x16>
 80028c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
 80028d0:	e7db      	b.n	800288a <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028d2:	2d04      	cmp	r5, #4
 80028d4:	d005      	beq.n	80028e2 <HAL_TIM_PWM_Stop+0x6e>
 80028d6:	2d08      	cmp	r5, #8
 80028d8:	d007      	beq.n	80028ea <HAL_TIM_PWM_Stop+0x76>
 80028da:	2301      	movs	r3, #1
 80028dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80028e0:	e7e6      	b.n	80028b0 <HAL_TIM_PWM_Stop+0x3c>
 80028e2:	2301      	movs	r3, #1
 80028e4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80028e8:	e7e2      	b.n	80028b0 <HAL_TIM_PWM_Stop+0x3c>
 80028ea:	2301      	movs	r3, #1
 80028ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028f0:	e7de      	b.n	80028b0 <HAL_TIM_PWM_Stop+0x3c>
 80028f2:	bf00      	nop
 80028f4:	40012c00 	.word	0x40012c00

080028f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d02b      	beq.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8002900:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002902:	2301      	movs	r3, #1
 8002904:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	2302      	movs	r3, #2
 800290a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800290e:	6803      	ldr	r3, [r0, #0]
 8002910:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002912:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002914:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002918:	680a      	ldr	r2, [r1, #0]
 800291a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800291c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291e:	6803      	ldr	r3, [r0, #0]
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00a      	beq.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d007      	beq.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800292c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002938:	4293      	cmp	r3, r2
 800293a:	d104      	bne.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800293c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002940:	684a      	ldr	r2, [r1, #4]
 8002942:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002944:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002946:	2301      	movs	r3, #1
 8002948:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	2300      	movs	r3, #0
 800294e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002952:	4618      	mov	r0, r3
}
 8002954:	bc30      	pop	{r4, r5}
 8002956:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002958:	2002      	movs	r0, #2
}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00

08002960 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002960:	4770      	bx	lr

08002962 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002962:	4770      	bx	lr

08002964 <FLASH_PageErase_>:
#include "commun.h"

void FLASH_PageErase_(uint32_t PageAddress)
{
    // Proceed to erase the page //
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <FLASH_PageErase_+0x38>)
 8002966:	6913      	ldr	r3, [r2, #16]
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6113      	str	r3, [r2, #16]
    while (FLASH->SR & FLASH_SR_BSY);
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <FLASH_PageErase_+0x38>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f013 0f01 	tst.w	r3, #1
 8002976:	d1fa      	bne.n	800296e <FLASH_PageErase_+0xa>
    WRITE_REG(FLASH->AR, PageAddress);
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <FLASH_PageErase_+0x38>)
 800297a:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002982:	611a      	str	r2, [r3, #16]
    while (FLASH->SR & FLASH_SR_BSY);
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <FLASH_PageErase_+0x38>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f013 0f01 	tst.w	r3, #1
 800298c:	d1fa      	bne.n	8002984 <FLASH_PageErase_+0x20>
    CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800298e:	4a03      	ldr	r2, [pc, #12]	; (800299c <FLASH_PageErase_+0x38>)
 8002990:	6913      	ldr	r3, [r2, #16]
 8002992:	f023 0302 	bic.w	r3, r3, #2
 8002996:	6113      	str	r3, [r2, #16]
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40022000 	.word	0x40022000

080029a0 <enableEEPROMWriting>:


/*
 * Must call this first to enable writing
 */
void enableEEPROMWriting() {
 80029a0:	b508      	push	{r3, lr}
    HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 80029a2:	f7fe f827 	bl	80009f4 <HAL_FLASH_Unlock>
    FLASH_PageErase_(EEPROM_START_ADDRESS); // required to re-write
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <enableEEPROMWriting+0x18>)
 80029a8:	f7ff ffdc 	bl	8002964 <FLASH_PageErase_>
    CLEAR_BIT(FLASH->CR, FLASH_CR_PER);    // Bug fix: bit PER has been set in Flash_PageErase(), must clear it here
 80029ac:	4a03      	ldr	r2, [pc, #12]	; (80029bc <enableEEPROMWriting+0x1c>)
 80029ae:	6913      	ldr	r3, [r2, #16]
 80029b0:	f023 0302 	bic.w	r3, r3, #2
 80029b4:	6113      	str	r3, [r2, #16]
}
 80029b6:	bd08      	pop	{r3, pc}
 80029b8:	0801c000 	.word	0x0801c000
 80029bc:	40022000 	.word	0x40022000

080029c0 <disableEEPROMWriting>:

void disableEEPROMWriting() {
 80029c0:	b508      	push	{r3, lr}
    HAL_FLASH_Lock();
 80029c2:	f7fe f831 	bl	8000a28 <HAL_FLASH_Lock>
}
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <writeEEPROMHalfWord>:

/*
 * Writing functions
 * Must call enableEEPROMWriting() first
 */
HAL_StatusTypeDef writeEEPROMHalfWord(uint32_t address, uint16_t data) {
 80029c8:	b508      	push	{r3, lr}
    HAL_StatusTypeDef status;
    address = address + EEPROM_START_ADDRESS;

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 80029ca:	460a      	mov	r2, r1
 80029cc:	2300      	movs	r3, #0
 80029ce:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000
 80029d2:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fe f864 	bl	8000aa4 <HAL_FLASH_Program>

    return status;
}
 80029dc:	bd08      	pop	{r3, pc}

080029de <readEEPROMHalfWord>:
/*
 * Reading functions
 */
uint16_t readEEPROMHalfWord(uint32_t address) {
    uint16_t val = 0;
    address = address + EEPROM_START_ADDRESS;
 80029de:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 80029e2:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
    val = *(__IO uint16_t*)address;
 80029e6:	8800      	ldrh	r0, [r0, #0]

    return val;
}
 80029e8:	b280      	uxth	r0, r0
 80029ea:	4770      	bx	lr

080029ec <EcrLecEEprom>:
//      PS : Aucun
//
//   Variable : N/A
//
void EcrLecEEprom(uint8_t *ptZoneData, uint8_t NbData, uint8_t EcrData, uint16_t AdrEEprom)
{
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ee:	4606      	mov	r6, r0
 80029f0:	460d      	mov	r5, r1
 80029f2:	461f      	mov	r7, r3
uint8_t i;
HAL_StatusTypeDef Res;
uint16_t Data;


         if (EcrData == VRAI)
 80029f4:	2a01      	cmp	r2, #1
 80029f6:	d001      	beq.n	80029fc <EcrLecEEprom+0x10>
        	 }
        	 disableEEPROMWriting();
         }
         else
         {
        	 for (i=0 ; i != NbData ; i++)
 80029f8:	2400      	movs	r4, #0
 80029fa:	e01c      	b.n	8002a36 <EcrLecEEprom+0x4a>
        	 enableEEPROMWriting();
 80029fc:	f7ff ffd0 	bl	80029a0 <enableEEPROMWriting>
        	 HAL_Delay(10);
 8002a00:	200a      	movs	r0, #10
 8002a02:	f7fd fbeb 	bl	80001dc <HAL_Delay>
        	 for (i=0 ; i != NbData ; i++)
 8002a06:	2400      	movs	r4, #0
 8002a08:	42ac      	cmp	r4, r5
 8002a0a:	d00a      	beq.n	8002a22 <EcrLecEEprom+0x36>
        		 Res = writeEEPROMHalfWord((uint32_t)(AdrEEprom+i*2), Data);
 8002a0c:	5d31      	ldrb	r1, [r6, r4]
 8002a0e:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8002a12:	f7ff ffd9 	bl	80029c8 <writeEEPROMHalfWord>
        		 HAL_Delay(20);
 8002a16:	2014      	movs	r0, #20
 8002a18:	f7fd fbe0 	bl	80001dc <HAL_Delay>
        	 for (i=0 ; i != NbData ; i++)
 8002a1c:	3401      	adds	r4, #1
 8002a1e:	b2e4      	uxtb	r4, r4
 8002a20:	e7f2      	b.n	8002a08 <EcrLecEEprom+0x1c>
        	 disableEEPROMWriting();
 8002a22:	f7ff ffcd 	bl	80029c0 <disableEEPROMWriting>
 8002a26:	e008      	b.n	8002a3a <EcrLecEEprom+0x4e>
        	 {
        		 ptZoneData[i] = (uint8_t)(readEEPROMHalfWord((uint32_t)(AdrEEprom+i*2)));
 8002a28:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8002a2c:	f7ff ffd7 	bl	80029de <readEEPROMHalfWord>
 8002a30:	5530      	strb	r0, [r6, r4]
        	 for (i=0 ; i != NbData ; i++)
 8002a32:	3401      	adds	r4, #1
 8002a34:	b2e4      	uxtb	r4, r4
 8002a36:	42ac      	cmp	r4, r5
 8002a38:	d1f6      	bne.n	8002a28 <EcrLecEEprom+0x3c>
        	 }
         }
}
 8002a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a3c <EcrI2CPoll>:
//      PS : EcrOK      EcrAdr: resultat positionnement [VRAI, FAUX]
//
//   Variable : hi2c1
//
uint8_t EcrI2CPoll(uint16_t AdresseInt, uint8_t PageHaute, uint8_t *ptBuffEcr, uint16_t NbData)
{
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	b084      	sub	sp, #16

uint16_t  AdrCAT = ADR_CAT24M01;
HAL_StatusTypeDef Etat;
uint8_t   Res = VRAI;

    if (PageHaute == VRAI)
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d00d      	beq.n	8002a60 <EcrI2CPoll+0x24>
uint16_t  AdrCAT = ADR_CAT24M01;
 8002a44:	21a0      	movs	r1, #160	; 0xa0
       AdrCAT = AdrCAT | SET_PAGE_H;

    //Etat = HAL_I2C_Master_Transmit (&hi2c1, AdrCAT, ptBuffEcr, NbData, TO_ECR_I2C_DATA);
    Etat = HAL_I2C_Mem_Write(&hi2c1, AdrCAT, AdresseInt, 2,  ptBuffEcr, NbData, TO_ECR_I2C_DATA);
 8002a46:	2432      	movs	r4, #50	; 0x32
 8002a48:	9402      	str	r4, [sp, #8]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	2302      	movs	r3, #2
 8002a50:	4602      	mov	r2, r0
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <EcrI2CPoll+0x2c>)
 8002a54:	f7fe ff56 	bl	8001904 <HAL_I2C_Mem_Write>
    if (Etat != HAL_OK)
 8002a58:	b920      	cbnz	r0, 8002a64 <EcrI2CPoll+0x28>
uint8_t   Res = VRAI;
 8002a5a:	2001      	movs	r0, #1
      Res = FAUX;

    return Res;
}
 8002a5c:	b004      	add	sp, #16
 8002a5e:	bd10      	pop	{r4, pc}
       AdrCAT = AdrCAT | SET_PAGE_H;
 8002a60:	21a2      	movs	r1, #162	; 0xa2
 8002a62:	e7f0      	b.n	8002a46 <EcrI2CPoll+0xa>
      Res = FAUX;
 8002a64:	2000      	movs	r0, #0
 8002a66:	e7f9      	b.n	8002a5c <EcrI2CPoll+0x20>
 8002a68:	200003c8 	.word	0x200003c8

08002a6c <EcrAdrIntPoll>:
//      PS : EcrOK      EcrAdr: resultat positionnement [VRAI, FAUX]
//
//   Variable :
//
uint8_t EcrAdrIntPoll(uint16_t AdresseInt, uint8_t PageHaute)
{
 8002a6c:	b500      	push	{lr}
 8002a6e:	b085      	sub	sp, #20
uint8_t Res = VRAI;
uint16_t AdrCAT = ADR_CAT24M01;
uint8_t AdrIntTab[2];
HAL_StatusTypeDef Etat;

    AdrIntTab[0] = (uint8_t)(AdresseInt >> 8);
 8002a70:	0a03      	lsrs	r3, r0, #8
 8002a72:	f88d 300c 	strb.w	r3, [sp, #12]
    AdrIntTab[1] = (uint8_t)(AdresseInt);
 8002a76:	f88d 000d 	strb.w	r0, [sp, #13]


    if (PageHaute == VRAI)
 8002a7a:	2901      	cmp	r1, #1
 8002a7c:	d00c      	beq.n	8002a98 <EcrAdrIntPoll+0x2c>
uint16_t AdrCAT = ADR_CAT24M01;
 8002a7e:	21a0      	movs	r1, #160	; 0xa0
       AdrCAT = AdrCAT | SET_PAGE_H;

    Etat = HAL_I2C_Master_Transmit (&hi2c1, AdrCAT, AdrIntTab, 2, TO_ECR_I2C_ADR_INT);
 8002a80:	2301      	movs	r3, #1
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2302      	movs	r3, #2
 8002a86:	aa03      	add	r2, sp, #12
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <EcrAdrIntPoll+0x34>)
 8002a8a:	f7fe fcdf 	bl	800144c <HAL_I2C_Master_Transmit>
    if (Etat != HAL_OK)            // vérifiaction acquittement
 8002a8e:	b928      	cbnz	r0, 8002a9c <EcrAdrIntPoll+0x30>
uint8_t Res = VRAI;
 8002a90:	2001      	movs	r0, #1
       Res = FAUX;


    return Res;
}
 8002a92:	b005      	add	sp, #20
 8002a94:	f85d fb04 	ldr.w	pc, [sp], #4
       AdrCAT = AdrCAT | SET_PAGE_H;
 8002a98:	21a2      	movs	r1, #162	; 0xa2
 8002a9a:	e7f1      	b.n	8002a80 <EcrAdrIntPoll+0x14>
       Res = FAUX;
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	e7f8      	b.n	8002a92 <EcrAdrIntPoll+0x26>
 8002aa0:	200003c8 	.word	0x200003c8

08002aa4 <LecI2CPoll>:
//      PS : LecOK       : resultat lecture [VRAI, FAUX]
//
//   Variable :
//
void LecI2CPoll(uint16_t NbByte2Read, uint8_t *ptBufferRead)
{
 8002aa4:	b500      	push	{lr}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	460a      	mov	r2, r1

HAL_StatusTypeDef Etat;

    Etat = HAL_I2C_Master_Receive (&hi2c1, ADR_CAT24M01+1, ptBufferRead, NbByte2Read, TO_READ_I2C);
 8002aac:	2132      	movs	r1, #50	; 0x32
 8002aae:	9100      	str	r1, [sp, #0]
 8002ab0:	21a1      	movs	r1, #161	; 0xa1
 8002ab2:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <LecI2CPoll+0x1c>)
 8002ab4:	f7fe fd86 	bl	80015c4 <HAL_I2C_Master_Receive>

}
 8002ab8:	b003      	add	sp, #12
 8002aba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002abe:	bf00      	nop
 8002ac0:	200003c8 	.word	0x200003c8

08002ac4 <LecConfigEEP>:
//      PS : Aucun
//
//   Variable : ImgJeux, ImgTempoJeux
//
void LecConfigEEP()
{
 8002ac4:	b508      	push	{r3, lr}
    //EcrLecEEprom(ImgTempoJeux, LG_EEP_CONFIG, FAUX, EEP_NUM_DURE_PROC_L);
    //for(i=0 ; i!= LG_EEP_CONFIG ; i++)
    //    ImgTempoJeux[i+LG_EEP_CONFIG] = EEPROM_Read(EEP_NUM_DURE_PROC_H+i);
    //EcrLecEEprom(ImgTempoJeux+LG_EEP_CONFIG, LG_EEP_CONFIG, FAUX, EEP_NUM_DURE_PROC_H);

	EcrLecEEprom(ImgEEP, 4*LG_EEP_CONFIG, FAUX, EEP_NUM_IMAG_PROC_L);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2120      	movs	r1, #32
 8002acc:	480d      	ldr	r0, [pc, #52]	; (8002b04 <LecConfigEEP+0x40>)
 8002ace:	f7ff ff8d 	bl	80029ec <EcrLecEEprom>
	for(i=0 ; i!= 2*LG_EEP_CONFIG ; i++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d006      	beq.n	8002ae6 <LecConfigEEP+0x22>
	   	ImgJeux[i] = ImgEEP[i];
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <LecConfigEEP+0x40>)
 8002ada:	5cd1      	ldrb	r1, [r2, r3]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <LecConfigEEP+0x44>)
 8002ade:	54d1      	strb	r1, [r2, r3]
	for(i=0 ; i!= 2*LG_EEP_CONFIG ; i++)
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e7f6      	b.n	8002ad4 <LecConfigEEP+0x10>
    for(i=0; i!= 2*LG_EEP_CONFIG ; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d00a      	beq.n	8002b02 <LecConfigEEP+0x3e>
    	ImgTempoJeux[i] = ImgEEP[i+2*LG_EEP_CONFIG] * 4;    //-- on multiplie par 2 pour prendre en compte le temps de scrutation plus rapide du stm 32
 8002aec:	f103 0210 	add.w	r2, r3, #16
 8002af0:	4904      	ldr	r1, [pc, #16]	; (8002b04 <LecConfigEEP+0x40>)
 8002af2:	5c89      	ldrb	r1, [r1, r2]
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <LecConfigEEP+0x44>)
 8002af6:	441a      	add	r2, r3
 8002af8:	0089      	lsls	r1, r1, #2
 8002afa:	7411      	strb	r1, [r2, #16]
    for(i=0; i!= 2*LG_EEP_CONFIG ; i++)
 8002afc:	3301      	adds	r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	e7f2      	b.n	8002ae8 <LecConfigEEP+0x24>
    														//##########################################################################################//
}
 8002b02:	bd08      	pop	{r3, pc}
 8002b04:	20000128 	.word	0x20000128
 8002b08:	20000008 	.word	0x20000008

08002b0c <InitEcrMem>:
//
//  Variable globale: N/A
//
//
void InitEcrMem(uint8_t PageMemHaute)
{
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	4606      	mov	r6, r0

GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b12:	2400      	movs	r4, #0
 8002b14:	9400      	str	r4, [sp, #0]
 8002b16:	9401      	str	r4, [sp, #4]
 8002b18:	9402      	str	r4, [sp, #8]
 8002b1a:	9403      	str	r4, [sp, #12]

  //-- init compteur (RAZ) --//
  //portc.BIT_CLK_MEM = 1;
  HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 8002b1c:	4f26      	ldr	r7, [pc, #152]	; (8002bb8 <InitEcrMem+0xac>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2110      	movs	r1, #16
 8002b22:	4638      	mov	r0, r7
 8002b24:	f7fe f91c 	bl	8000d60 <HAL_GPIO_WritePin>

  //portb.BIT_RAZ_CPT = 1;
  //delay_us(10);
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002b28:	4d24      	ldr	r5, [pc, #144]	; (8002bbc <InitEcrMem+0xb0>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b30:	4628      	mov	r0, r5
 8002b32:	f7fe f915 	bl	8000d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002b36:	2201      	movs	r2, #1
 8002b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f7fe f90f 	bl	8000d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b48:	4628      	mov	r0, r5
 8002b4a:	f7fe f909 	bl	8000d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b54:	4628      	mov	r0, r5
 8002b56:	f7fe f903 	bl	8000d60 <HAL_GPIO_WritePin>

  //portb.BIT_RAZ_CPT = 0;
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_RESET);
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b60:	4628      	mov	r0, r5
 8002b62:	f7fe f8fd 	bl	8000d60 <HAL_GPIO_WritePin>

  //-- init memoire pour ecriture --//
  //portc.BIT_OE_MEM = 0;
  HAL_GPIO_WritePin(OE_MEM_GPIO_Port, OE_MEM_Pin, GPIO_PIN_RESET);
 8002b66:	4622      	mov	r2, r4
 8002b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	f7fe f8f7 	bl	8000d60 <HAL_GPIO_WritePin>

  if (PageMemHaute == VRAI)
 8002b72:	2e01      	cmp	r6, #1
 8002b74:	d01a      	beq.n	8002bac <InitEcrMem+0xa0>
     //portb.BIT_PAGE_MEM = 1;
	 HAL_GPIO_WritePin(PAGE_MEM_GPIO_Port, PAGE_MEM_Pin, GPIO_PIN_SET);
  else
     //portb.BIT_PAGE_MEM = 0;
     HAL_GPIO_WritePin(PAGE_MEM_GPIO_Port, PAGE_MEM_Pin, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4810      	ldr	r0, [pc, #64]	; (8002bbc <InitEcrMem+0xb0>)
 8002b7c:	f7fe f8f0 	bl	8000d60 <HAL_GPIO_WritePin>

  //portc.BIT_RW_MEM = 0;
  HAL_GPIO_WritePin(R_W_GPIO_Port, R_W_Pin, GPIO_PIN_RESET);
 8002b80:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <InitEcrMem+0xac>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f7fe f8e9 	bl	8000d60 <HAL_GPIO_WritePin>

  //trisd = CONF_PORT_D_OUT;  ###########
  GPIO_InitStruct.Pin = R1_Pin|G1_Pin|B1_Pin|R2_Pin|G2_Pin|B2_Pin;
 8002b8e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002b92:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b94:	2301      	movs	r3, #1
 8002b96:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	4669      	mov	r1, sp
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7fd ffcc 	bl	8000b40 <HAL_GPIO_Init>

}
 8002ba8:	b005      	add	sp, #20
 8002baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	 HAL_GPIO_WritePin(PAGE_MEM_GPIO_Port, PAGE_MEM_Pin, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f7fe f8d5 	bl	8000d60 <HAL_GPIO_WritePin>
 8002bb6:	e7e3      	b.n	8002b80 <InitEcrMem+0x74>
 8002bb8:	40010c00 	.word	0x40010c00
 8002bbc:	40010800 	.word	0x40010800

08002bc0 <InitLecMem>:
//
//  Variable globale: N/A
//
//
void InitLecMem(uint8_t PageMemHaute)
{
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	4604      	mov	r4, r0
GPIO_InitTypeDef GPIO_InitStruct = {0};

  //-- init memoire pour lecture --//
  //trisd = CONF_PORT_D_IN;
  GPIO_InitStruct.Pin = R1_Pin|G1_Pin|B1_Pin|R2_Pin|G2_Pin|B2_Pin;
 8002bc6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002bca:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bcc:	2600      	movs	r6, #0
 8002bce:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	4d22      	ldr	r5, [pc, #136]	; (8002c60 <InitLecMem+0xa0>)
 8002bd8:	4669      	mov	r1, sp
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f7fd ffb0 	bl	8000b40 <HAL_GPIO_Init>

  //portc.BIT_RW_MEM = 1;
  HAL_GPIO_WritePin(R_W_GPIO_Port, R_W_Pin, GPIO_PIN_SET);
 8002be0:	2201      	movs	r2, #1
 8002be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002be6:	4628      	mov	r0, r5
 8002be8:	f7fe f8ba 	bl	8000d60 <HAL_GPIO_WritePin>

  //portc.BIT_OE_MEM = 0;
  HAL_GPIO_WritePin(OE_MEM_GPIO_Port, OE_MEM_Pin, GPIO_PIN_RESET);
 8002bec:	4632      	mov	r2, r6
 8002bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	f7fe f8b4 	bl	8000d60 <HAL_GPIO_WritePin>

  if (PageMemHaute == VRAI)
 8002bf8:	2c01      	cmp	r4, #1
 8002bfa:	d02a      	beq.n	8002c52 <InitLecMem+0x92>
     //portb.BIT_PAGE_MEM = 1;
	 HAL_GPIO_WritePin(PAGE_MEM_GPIO_Port, PAGE_MEM_Pin, GPIO_PIN_SET);
  else
     //portb.BIT_PAGE_MEM = 0;
	 HAL_GPIO_WritePin(PAGE_MEM_GPIO_Port, PAGE_MEM_Pin, GPIO_PIN_RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2102      	movs	r1, #2
 8002c00:	4818      	ldr	r0, [pc, #96]	; (8002c64 <InitLecMem+0xa4>)
 8002c02:	f7fe f8ad 	bl	8000d60 <HAL_GPIO_WritePin>

  //-- init compteur (RAZ) --//
  //portc.BIT_CLK_MEM = 1;
  HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 8002c06:	2201      	movs	r2, #1
 8002c08:	2110      	movs	r1, #16
 8002c0a:	4815      	ldr	r0, [pc, #84]	; (8002c60 <InitLecMem+0xa0>)
 8002c0c:	f7fe f8a8 	bl	8000d60 <HAL_GPIO_WritePin>

  //portb.BIT_RAZ_CPT = 1;
  //delay_us(10);
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002c10:	4c14      	ldr	r4, [pc, #80]	; (8002c64 <InitLecMem+0xa4>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7fe f8a1 	bl	8000d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7fe f89b 	bl	8000d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7fe f895 	bl	8000d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_SET);
 8002c36:	2201      	movs	r2, #1
 8002c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7fe f88f 	bl	8000d60 <HAL_GPIO_WritePin>

  //portb.BIT_RAZ_CPT = 0;
  HAL_GPIO_WritePin(RAZ_CPT_GPIO_Port, RAZ_CPT_Pin, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fe f889 	bl	8000d60 <HAL_GPIO_WritePin>

}
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd70      	pop	{r4, r5, r6, pc}
	 HAL_GPIO_WritePin(PAGE_MEM_GPIO_Port, PAGE_MEM_Pin, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2102      	movs	r1, #2
 8002c56:	4803      	ldr	r0, [pc, #12]	; (8002c64 <InitLecMem+0xa4>)
 8002c58:	f7fe f882 	bl	8000d60 <HAL_GPIO_WritePin>
 8002c5c:	e7d3      	b.n	8002c06 <InitLecMem+0x46>
 8002c5e:	bf00      	nop
 8002c60:	40010c00 	.word	0x40010c00
 8002c64:	40010800 	.word	0x40010800

08002c68 <ImageEEp2RAM>:
{
 8002c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c6c:	4681      	mov	r9, r0
 8002c6e:	460b      	mov	r3, r1
  NumColonne = 0xff;
 8002c70:	4a47      	ldr	r2, [pc, #284]	; (8002d90 <ImageEEp2RAM+0x128>)
 8002c72:	21ff      	movs	r1, #255	; 0xff
 8002c74:	7011      	strb	r1, [r2, #0]
  NumLigne   = 0;
 8002c76:	4a47      	ldr	r2, [pc, #284]	; (8002d94 <ImageEEp2RAM+0x12c>)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	7011      	strb	r1, [r2, #0]
  if (NumImgEEP >= IMG_PAGE_BAS)
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d90e      	bls.n	8002c9e <ImageEEp2RAM+0x36>
    NumImgEEP = NumImgEEP - IMG_PAGE_BAS;
 8002c80:	3b10      	subs	r3, #16
 8002c82:	b2db      	uxtb	r3, r3
    PageEEpHaute = VRAI;
 8002c84:	2101      	movs	r1, #1
  AdrIntEEp = NumImgEEP << 12;
 8002c86:	031b      	lsls	r3, r3, #12
  Res = EcrAdrIntPoll(AdrIntEEp, PageEEpHaute);
 8002c88:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
 8002c8c:	f7ff feee 	bl	8002a6c <EcrAdrIntPoll>
  InitEcrMem(PageRAMHaute);
 8002c90:	4648      	mov	r0, r9
 8002c92:	f7ff ff3b 	bl	8002b0c <InitEcrMem>
  for (j=0 ; j != NB_PART_IMG ; j++)
 8002c96:	f04f 0800 	mov.w	r8, #0
  Cpt = 0;
 8002c9a:	4647      	mov	r7, r8
  for (j=0 ; j != NB_PART_IMG ; j++)
 8002c9c:	e069      	b.n	8002d72 <ImageEEp2RAM+0x10a>
    PageEEpHaute = FAUX;
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	e7f1      	b.n	8002c86 <ImageEEp2RAM+0x1e>
      for (k=0 ; k != LG_TAB_MATRIX ; k++)
 8002ca2:	3501      	adds	r5, #1
 8002ca4:	b2ad      	uxth	r5, r5
 8002ca6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002caa:	d05e      	beq.n	8002d6a <ImageEEp2RAM+0x102>
    	 HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, (TabMatrix[k] & TST_BIT0));
 8002cac:	4e3a      	ldr	r6, [pc, #232]	; (8002d98 <ImageEEp2RAM+0x130>)
 8002cae:	5d72      	ldrb	r2, [r6, r5]
 8002cb0:	4c3a      	ldr	r4, [pc, #232]	; (8002d9c <ImageEEp2RAM+0x134>)
 8002cb2:	f002 0201 	and.w	r2, r2, #1
 8002cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7fe f850 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, ((TabMatrix[k] & TST_BIT1) >> 1));
 8002cc0:	5d72      	ldrb	r2, [r6, r5]
 8002cc2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7fe f848 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, ((TabMatrix[k] & TST_BIT2) >> 2));
 8002cd0:	5d72      	ldrb	r2, [r6, r5]
 8002cd2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7fe f840 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, ((TabMatrix[k] & TST_BIT3) >> 3));
 8002ce0:	5d72      	ldrb	r2, [r6, r5]
 8002ce2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7fe f838 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, ((TabMatrix[k] & TST_BIT4) >> 4));
 8002cf0:	5d72      	ldrb	r2, [r6, r5]
 8002cf2:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7fe f830 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, ((TabMatrix[k] & TST_BIT5) >> 5));
 8002d00:	5d72      	ldrb	r2, [r6, r5]
 8002d02:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8002d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7fe f828 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(R_W_GPIO_Port, R_W_Pin, GPIO_PIN_SET);
 8002d10:	2201      	movs	r2, #1
 8002d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d16:	4620      	mov	r0, r4
 8002d18:	f7fe f822 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_RESET);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2110      	movs	r1, #16
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7fe f81d 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_RESET);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2110      	movs	r1, #16
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7fe f818 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 8002d30:	2201      	movs	r2, #1
 8002d32:	2110      	movs	r1, #16
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fe f813 	bl	8000d60 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7fe f80e 	bl	8000d60 <HAL_GPIO_WritePin>
         Cpt++;
 8002d44:	3701      	adds	r7, #1
 8002d46:	b2bf      	uxth	r7, r7
         if (Cpt != TAILLE_IMAGE-1)
 8002d48:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002d4c:	429f      	cmp	r7, r3
 8002d4e:	d0a8      	beq.n	8002ca2 <ImageEEp2RAM+0x3a>
        	 HAL_GPIO_WritePin(R_W_GPIO_Port, R_W_Pin, GPIO_PIN_RESET);
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7fe f802 	bl	8000d60 <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(R_W_GPIO_Port, R_W_Pin, GPIO_PIN_RESET);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7fd fffc 	bl	8000d60 <HAL_GPIO_WritePin>
 8002d68:	e79b      	b.n	8002ca2 <ImageEEp2RAM+0x3a>
  for (j=0 ; j != NB_PART_IMG ; j++)
 8002d6a:	f108 0801 	add.w	r8, r8, #1
 8002d6e:	fa5f f888 	uxtb.w	r8, r8
 8002d72:	f1b8 0f10 	cmp.w	r8, #16
 8002d76:	d006      	beq.n	8002d86 <ImageEEp2RAM+0x11e>
      LecI2CPoll(LG_TAB_MATRIX, TabMatrix);
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <ImageEEp2RAM+0x130>)
 8002d7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d7e:	f7ff fe91 	bl	8002aa4 <LecI2CPoll>
      for (k=0 ; k != LG_TAB_MATRIX ; k++)
 8002d82:	2500      	movs	r5, #0
 8002d84:	e78f      	b.n	8002ca6 <ImageEEp2RAM+0x3e>
  InitLecMem(PageRAMHaute);
 8002d86:	4648      	mov	r0, r9
 8002d88:	f7ff ff1a 	bl	8002bc0 <InitLecMem>
}
 8002d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d90:	2000002a 	.word	0x2000002a
 8002d94:	200000be 	.word	0x200000be
 8002d98:	20000170 	.word	0x20000170
 8002d9c:	40010c00 	.word	0x40010c00

08002da0 <AppImageFond>:
{
 8002da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da4:	b083      	sub	sp, #12
 8002da6:	9001      	str	r0, [sp, #4]
       if (NumImg < NUM_MAX_IMG)
 8002da8:	291f      	cmp	r1, #31
 8002daa:	d902      	bls.n	8002db2 <AppImageFond+0x12>
}
 8002dac:	b003      	add	sp, #12
 8002dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db2:	460c      	mov	r4, r1
    	    Etat = HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_3);
 8002db4:	4d1d      	ldr	r5, [pc, #116]	; (8002e2c <AppImageFond+0x8c>)
 8002db6:	2108      	movs	r1, #8
 8002db8:	4628      	mov	r0, r5
 8002dba:	f7ff fd5b 	bl	8002874 <HAL_TIM_PWM_Stop>
    	    sConfigOCUser.Pulse = VAL_MAX_PWM;
 8002dbe:	4e1c      	ldr	r6, [pc, #112]	; (8002e30 <AppImageFond+0x90>)
 8002dc0:	23ff      	movs	r3, #255	; 0xff
 8002dc2:	6073      	str	r3, [r6, #4]
    	    Etat = HAL_TIM_PWM_ConfigChannel (&htim3, &sConfigOCUser, TIM_CHANNEL_3);
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f7ff fbf3 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
    	    Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8002dce:	2108      	movs	r1, #8
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f7ff fce1 	bl	8002798 <HAL_TIM_PWM_Start>
    	    HAL_TIM_Base_Stop_IT(&htim2);
 8002dd6:	4f17      	ldr	r7, [pc, #92]	; (8002e34 <AppImageFond+0x94>)
 8002dd8:	4638      	mov	r0, r7
 8002dda:	f7ff fa4b 	bl	8002274 <HAL_TIM_Base_Stop_IT>
            SaveVD = VoletDroit;     //volet droit et gauche sont ecrasé lors du
 8002dde:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002e3c <AppImageFond+0x9c>
 8002de2:	f899 b000 	ldrb.w	fp, [r9]
            SaveVG = VoletGauche;    //chargement d'une image !!!!!!!!!!!
 8002de6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8002e40 <AppImageFond+0xa0>
 8002dea:	f898 a000 	ldrb.w	sl, [r8]
            ImageEEp2RAM(PageImg, NumImg);
 8002dee:	4621      	mov	r1, r4
 8002df0:	9801      	ldr	r0, [sp, #4]
 8002df2:	f7ff ff39 	bl	8002c68 <ImageEEp2RAM>
            HAL_Delay_Microseconds(20);
 8002df6:	2014      	movs	r0, #20
 8002df8:	f000 f92a 	bl	8003050 <HAL_Delay_Microseconds>
            VoletDroit = SaveVD;
 8002dfc:	f889 b000 	strb.w	fp, [r9]
            VoletGauche = SaveVG;
 8002e00:	f888 a000 	strb.w	sl, [r8]
            HAL_TIM_Base_Start_IT(&htim2);
 8002e04:	4638      	mov	r0, r7
 8002e06:	f7ff fa01 	bl	800220c <HAL_TIM_Base_Start_IT>
            Etat = HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_3);  //######
 8002e0a:	2108      	movs	r1, #8
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	f7ff fd31 	bl	8002874 <HAL_TIM_PWM_Stop>
            sConfigOCUser.Pulse = AppelImg.ValPWM;
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <AppImageFond+0x98>)
 8002e14:	795b      	ldrb	r3, [r3, #5]
 8002e16:	6073      	str	r3, [r6, #4]
            Etat = HAL_TIM_PWM_ConfigChannel (&htim3, &sConfigOCUser, TIM_CHANNEL_3);
 8002e18:	2208      	movs	r2, #8
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f7ff fbc9 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
            Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8002e22:	2108      	movs	r1, #8
 8002e24:	4628      	mov	r0, r5
 8002e26:	f7ff fcb7 	bl	8002798 <HAL_TIM_PWM_Start>
}
 8002e2a:	e7bf      	b.n	8002dac <AppImageFond+0xc>
 8002e2c:	20000444 	.word	0x20000444
 8002e30:	200000d4 	.word	0x200000d4
 8002e34:	200004d4 	.word	0x200004d4
 8002e38:	200003c0 	.word	0x200003c0
 8002e3c:	200000bf 	.word	0x200000bf
 8002e40:	20000029 	.word	0x20000029

08002e44 <GesCliBandeau>:
//
//  Variable globale: N/A
//
//
void GesCliBandeau (t_AppImg *ptAppelImg)
{
 8002e44:	b538      	push	{r3, r4, r5, lr}
 8002e46:	4604      	mov	r4, r0
static t_CliImg CliImg = {FAUX, FAUX, 0};
HAL_StatusTypeDef Etat;

       if (ptAppelImg->TempoCli == 0)
 8002e48:	7983      	ldrb	r3, [r0, #6]
 8002e4a:	b9cb      	cbnz	r3, 8002e80 <GesCliBandeau+0x3c>
       {
          if (CliImg.CliEnCours == VRAI)
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <GesCliBandeau+0xa8>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d000      	beq.n	8002e56 <GesCliBandeau+0x12>
                	 Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
                     CliImg.AffCli = FAUX;
                }
           }
       }
}
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
        	 Etat = HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_3);
 8002e56:	4d26      	ldr	r5, [pc, #152]	; (8002ef0 <GesCliBandeau+0xac>)
 8002e58:	2108      	movs	r1, #8
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f7ff fd0a 	bl	8002874 <HAL_TIM_PWM_Stop>
       	     sConfigOCUser.Pulse = ptAppelImg->ValPWM;
 8002e60:	7963      	ldrb	r3, [r4, #5]
 8002e62:	4924      	ldr	r1, [pc, #144]	; (8002ef4 <GesCliBandeau+0xb0>)
 8002e64:	604b      	str	r3, [r1, #4]
       	     Etat = HAL_TIM_PWM_ConfigChannel (&htim3, &sConfigOCUser, TIM_CHANNEL_3);
 8002e66:	2208      	movs	r2, #8
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f7ff fba3 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
       	     Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8002e6e:	2108      	movs	r1, #8
 8002e70:	4628      	mov	r0, r5
 8002e72:	f7ff fc91 	bl	8002798 <HAL_TIM_PWM_Start>
             CliImg.CliEnCours = FAUX;
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <GesCliBandeau+0xa8>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	801a      	strh	r2, [r3, #0]
             CliImg.TempoCli = 0;
 8002e7c:	809a      	strh	r2, [r3, #4]
 8002e7e:	e7e9      	b.n	8002e54 <GesCliBandeau+0x10>
           CliImg.CliEnCours = VRAI;
 8002e80:	491a      	ldr	r1, [pc, #104]	; (8002eec <GesCliBandeau+0xa8>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	800a      	strh	r2, [r1, #0]
           CliImg.TempoCli++;
 8002e86:	888a      	ldrh	r2, [r1, #4]
 8002e88:	3201      	adds	r2, #1
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	808a      	strh	r2, [r1, #4]
           if (CliImg.TempoCli == ptAppelImg->TempoCli)
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1df      	bne.n	8002e54 <GesCliBandeau+0x10>
                CliImg.TempoCli = 0;
 8002e94:	2200      	movs	r2, #0
 8002e96:	808a      	strh	r2, [r1, #4]
                if (CliImg.AffCli == FAUX)
 8002e98:	884b      	ldrh	r3, [r1, #2]
 8002e9a:	b99b      	cbnz	r3, 8002ec4 <GesCliBandeau+0x80>
                	 Etat = HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_3);
 8002e9c:	4c14      	ldr	r4, [pc, #80]	; (8002ef0 <GesCliBandeau+0xac>)
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f7ff fce7 	bl	8002874 <HAL_TIM_PWM_Stop>
                	 sConfigOCUser.Pulse = VAL_MAX_PWM;
 8002ea6:	4913      	ldr	r1, [pc, #76]	; (8002ef4 <GesCliBandeau+0xb0>)
 8002ea8:	23ff      	movs	r3, #255	; 0xff
 8002eaa:	604b      	str	r3, [r1, #4]
                	 Etat = HAL_TIM_PWM_ConfigChannel (&htim3, &sConfigOCUser, TIM_CHANNEL_3);
 8002eac:	2208      	movs	r2, #8
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f7ff fb80 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
                	 Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8002eb4:	2108      	movs	r1, #8
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7ff fc6e 	bl	8002798 <HAL_TIM_PWM_Start>
                     CliImg.AffCli = VRAI;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <GesCliBandeau+0xa8>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	805a      	strh	r2, [r3, #2]
 8002ec2:	e7c7      	b.n	8002e54 <GesCliBandeau+0x10>
                	 Etat = HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_3);
 8002ec4:	4d0a      	ldr	r5, [pc, #40]	; (8002ef0 <GesCliBandeau+0xac>)
 8002ec6:	2108      	movs	r1, #8
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f7ff fcd3 	bl	8002874 <HAL_TIM_PWM_Stop>
                	 sConfigOCUser.Pulse = ptAppelImg->ValPWM;
 8002ece:	7963      	ldrb	r3, [r4, #5]
 8002ed0:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <GesCliBandeau+0xb0>)
 8002ed2:	604b      	str	r3, [r1, #4]
                	 Etat = HAL_TIM_PWM_ConfigChannel (&htim3, &sConfigOCUser, TIM_CHANNEL_3);
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f7ff fb6c 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
                	 Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8002edc:	2108      	movs	r1, #8
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f7ff fc5a 	bl	8002798 <HAL_TIM_PWM_Start>
                     CliImg.AffCli = FAUX;
 8002ee4:	4b01      	ldr	r3, [pc, #4]	; (8002eec <GesCliBandeau+0xa8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	805a      	strh	r2, [r3, #2]
}
 8002eea:	e7b3      	b.n	8002e54 <GesCliBandeau+0x10>
 8002eec:	200000b4 	.word	0x200000b4
 8002ef0:	20000444 	.word	0x20000444
 8002ef4:	200000d4 	.word	0x200000d4

08002ef8 <GeneNbAlea>:
//      PE : NbMini : nombre minimum
//           NbMaxi : nombre maximum
//      PS : NbAlea : nombre aleatoire compris entre mini et maximum inclus
//
uint8_t GeneNbAlea(uint8_t NbMini, uint8_t NbMaxi)
{
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4605      	mov	r5, r0
 8002efc:	460c      	mov	r4, r1
uint8_t  NbAlea;
uint16_t Temp;

   Temp = rand();
 8002efe:	f001 f895 	bl	800402c <rand>
   NbAlea = (uint8_t)(Temp + (Temp>> 8));
 8002f02:	b2c1      	uxtb	r1, r0
 8002f04:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002f08:	4408      	add	r0, r1
 8002f0a:	b2c0      	uxtb	r0, r0
   NbAlea = NbAlea % (NbMaxi - NbMini + 1);
 8002f0c:	1b61      	subs	r1, r4, r5
 8002f0e:	3101      	adds	r1, #1
 8002f10:	fb90 f3f1 	sdiv	r3, r0, r1
 8002f14:	fb01 0013 	mls	r0, r1, r3, r0
 8002f18:	b2c0      	uxtb	r0, r0
   NbAlea = NbAlea + NbMini;
 8002f1a:	4428      	add	r0, r5

   return NbAlea;

}
 8002f1c:	b2c0      	uxtb	r0, r0
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}

08002f20 <GesBandeauInit>:
{
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	460c      	mov	r4, r1
    if (VoletOuvrant == VRAI)
 8002f24:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <GesBandeauInit+0xb8>)
 8002f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d008      	beq.n	8002f40 <GesBandeauInit+0x20>
        TempoAffImg++;
 8002f2e:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <GesBandeauInit+0xbc>)
 8002f30:	8913      	ldrh	r3, [r2, #8]
 8002f32:	3301      	adds	r3, #1
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	8113      	strh	r3, [r2, #8]
        if (TempoAffImg == TEMPO_AFF_IMG)
 8002f38:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002f3c:	d037      	beq.n	8002fae <GesBandeauInit+0x8e>
}
 8002f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f40:	4605      	mov	r5, r0
       if (MemITTimer == 0)
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <GesBandeauInit+0xc0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f9      	bne.n	8002f3e <GesBandeauInit+0x1e>
          AppImageFond(FAUX,ImgInit[NumImage_]);
 8002f4a:	4f26      	ldr	r7, [pc, #152]	; (8002fe4 <GesBandeauInit+0xc4>)
 8002f4c:	4e23      	ldr	r6, [pc, #140]	; (8002fdc <GesBandeauInit+0xbc>)
 8002f4e:	79b3      	ldrb	r3, [r6, #6]
 8002f50:	5cf9      	ldrb	r1, [r7, r3]
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7ff ff24 	bl	8002da0 <AppImageFond>
          HAL_Delay_Microseconds(20);
 8002f58:	2014      	movs	r0, #20
 8002f5a:	f000 f879 	bl	8003050 <HAL_Delay_Microseconds>
          AppImageFond(VRAI,ImgInit[NumImage_]+1);
 8002f5e:	79b3      	ldrb	r3, [r6, #6]
 8002f60:	5cf9      	ldrb	r1, [r7, r3]
 8002f62:	3101      	adds	r1, #1
 8002f64:	b2c9      	uxtb	r1, r1
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7ff ff1a 	bl	8002da0 <AppImageFond>
          HAL_Delay_Microseconds(20);
 8002f6c:	2014      	movs	r0, #20
 8002f6e:	f000 f86f 	bl	8003050 <HAL_Delay_Microseconds>
          ptAppelImg->Tempo2Img = ImgTempo[NumImage_];
 8002f72:	79b3      	ldrb	r3, [r6, #6]
 8002f74:	441f      	add	r7, r3
 8002f76:	7a3b      	ldrb	r3, [r7, #8]
 8002f78:	71e3      	strb	r3, [r4, #7]
          *ptTempoImg = 0;
 8002f7a:	2700      	movs	r7, #0
 8002f7c:	702f      	strb	r7, [r5, #0]
          TypeVoletA = GeneNbAlea(VOLET_MINI_O, VOLET_MAXI_O);  //###################
 8002f7e:	2103      	movs	r1, #3
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7ff ffb9 	bl	8002ef8 <GeneNbAlea>
          ptAppelImg->TypeVolet  = TypeVoletA;
 8002f86:	70e0      	strb	r0, [r4, #3]
          ptAppelImg->TempoVolet = VIT_OUV_VOLET_DEF;
 8002f88:	2319      	movs	r3, #25
 8002f8a:	7123      	strb	r3, [r4, #4]
          HAL_TIM_Base_Start_IT(&htim1);
 8002f8c:	4816      	ldr	r0, [pc, #88]	; (8002fe8 <GesBandeauInit+0xc8>)
 8002f8e:	f7ff f93d 	bl	800220c <HAL_TIM_Base_Start_IT>
          MemITTimer = 1;
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <GesBandeauInit+0xc0>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
          VoletOuvrant = FAUX;
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <GesBandeauInit+0xb8>)
 8002f9a:	f883 7020 	strb.w	r7, [r3, #32]
          NumImage_++;
 8002f9e:	79b3      	ldrb	r3, [r6, #6]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	71b3      	strb	r3, [r6, #6]
          if (NumImage_ == NUM_LIST_IMG)
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d1c9      	bne.n	8002f3e <GesBandeauInit+0x1e>
             NumImage_ = 0;
 8002faa:	71b7      	strb	r7, [r6, #6]
 8002fac:	e7c7      	b.n	8002f3e <GesBandeauInit+0x1e>
           TempoAffImg = 0;
 8002fae:	4613      	mov	r3, r2
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	811a      	strh	r2, [r3, #8]
           TypeVoletA = GeneNbAlea(VOLET_MINI_F, VOLET_MAXI_F); //###################
 8002fb4:	2106      	movs	r1, #6
 8002fb6:	2004      	movs	r0, #4
 8002fb8:	f7ff ff9e 	bl	8002ef8 <GeneNbAlea>
           ptAppelImg->TypeVolet  = TypeVoletA;
 8002fbc:	70e0      	strb	r0, [r4, #3]
           ptAppelImg->TempoVolet = VIT_OUV_VOLET_DEF;
 8002fbe:	2319      	movs	r3, #25
 8002fc0:	7123      	strb	r3, [r4, #4]
           HAL_TIM_Base_Start_IT(&htim1);
 8002fc2:	4809      	ldr	r0, [pc, #36]	; (8002fe8 <GesBandeauInit+0xc8>)
 8002fc4:	f7ff f922 	bl	800220c <HAL_TIM_Base_Start_IT>
           MemITTimer = 1;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <GesBandeauInit+0xc0>)
 8002fcc:	7013      	strb	r3, [r2, #0]
           VoletOuvrant = VRAI;
 8002fce:	4a02      	ldr	r2, [pc, #8]	; (8002fd8 <GesBandeauInit+0xb8>)
 8002fd0:	f882 3020 	strb.w	r3, [r2, #32]
}
 8002fd4:	e7b3      	b.n	8002f3e <GesBandeauInit+0x1e>
 8002fd6:	bf00      	nop
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	200000b4 	.word	0x200000b4
 8002fe0:	200000c1 	.word	0x200000c1
 8002fe4:	0800505c 	.word	0x0800505c
 8002fe8:	2000048c 	.word	0x2000048c

08002fec <GesBandeauJeu>:
#define NUM_JEU_DEFAUT 14

#define VOLET_MAX 255

void GesBandeauJeu (uint8_t *ptTempoImg, uint8_t JeuEnCours_, t_AppImg *ptAppelImg)
{
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	4607      	mov	r7, r0
 8002ff0:	4615      	mov	r5, r2
uint8_t TypeVoletA;

    JeuEnCours_--;
 8002ff2:	3901      	subs	r1, #1
 8002ff4:	b2cc      	uxtb	r4, r1
    if (JeuEnCours_ > NUM_LIST_JEUX)
 8002ff6:	2c0f      	cmp	r4, #15
 8002ff8:	d900      	bls.n	8002ffc <GesBandeauJeu+0x10>
       JeuEnCours_ = NUM_JEU_DEFAUT;
 8002ffa:	240e      	movs	r4, #14
    //-- le volet precedant est fermé --//
    //-- appelle image  --//
    AppImageFond(FAUX,ImgJeux[JeuEnCours_]);
 8002ffc:	4e10      	ldr	r6, [pc, #64]	; (8003040 <GesBandeauJeu+0x54>)
 8002ffe:	5d31      	ldrb	r1, [r6, r4]
 8003000:	2000      	movs	r0, #0
 8003002:	f7ff fecd 	bl	8002da0 <AppImageFond>
    AppImageFond(VRAI,ImgJeux[JeuEnCours_]+1);
 8003006:	5d31      	ldrb	r1, [r6, r4]
 8003008:	3101      	adds	r1, #1
 800300a:	b2c9      	uxtb	r1, r1
 800300c:	2001      	movs	r0, #1
 800300e:	f7ff fec7 	bl	8002da0 <AppImageFond>
    ptAppelImg->Tempo2Img = ImgTempoJeux[JeuEnCours_];
 8003012:	4434      	add	r4, r6
 8003014:	7c23      	ldrb	r3, [r4, #16]
 8003016:	71eb      	strb	r3, [r5, #7]
    *ptTempoImg = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	703b      	strb	r3, [r7, #0]
    //-- on force l'extinction --//
    VoletGauche  = VOLET_MAX;  //bidouille pour forcer l'extinction avant ouverture volet
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <GesBandeauJeu+0x58>)
 800301e:	22ff      	movs	r2, #255	; 0xff
 8003020:	701a      	strb	r2, [r3, #0]
                               //et eviter le beug de l'affichage temporaire d'image avant début volet
    						   //lié a la durée de mise en route de la tache de gestion de volet

    //-- init volet central --//
    TypeVoletA = GeneNbAlea(VOLET_MINI_O, VOLET_MAXI_O);
 8003022:	2103      	movs	r1, #3
 8003024:	2001      	movs	r0, #1
 8003026:	f7ff ff67 	bl	8002ef8 <GeneNbAlea>
    ptAppelImg->TypeVolet  = TypeVoletA;
 800302a:	70e8      	strb	r0, [r5, #3]
    ptAppelImg->TempoVolet = VIT_OUV_VOLET_DEF;
 800302c:	2319      	movs	r3, #25
 800302e:	712b      	strb	r3, [r5, #4]
    //pie1.TMR1IE = 1;      //It gestion volet
    HAL_TIM_Base_Start_IT(&htim1);
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <GesBandeauJeu+0x5c>)
 8003032:	f7ff f8eb 	bl	800220c <HAL_TIM_Base_Start_IT>
    MemITTimer = 1;
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <GesBandeauJeu+0x60>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]

}
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303e:	bf00      	nop
 8003040:	20000008 	.word	0x20000008
 8003044:	20000029 	.word	0x20000029
 8003048:	2000048c 	.word	0x2000048c
 800304c:	200000c1 	.word	0x200000c1

08003050 <HAL_Delay_Microseconds>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
#define SYSTEM_US_TICKS 72   //fonction de la frequence systeme (72MHz ici)
void HAL_Delay_Microseconds(uint16_t uSec)
{
 8003050:	b082      	sub	sp, #8
  volatile uint32_t DWT_START = DWT->CYCCNT;
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_Delay_Microseconds+0x4c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	9301      	str	r3, [sp, #4]
  volatile uint32_t DWT_TOTAL = (SYSTEM_US_TICKS * uSec);
 8003058:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800305c:	00c0      	lsls	r0, r0, #3
 800305e:	9000      	str	r0, [sp, #0]

  if ((UINT32_MAX - DWT_START) < DWT_TOTAL)
 8003060:	9b01      	ldr	r3, [sp, #4]
 8003062:	43db      	mvns	r3, r3
 8003064:	9a00      	ldr	r2, [sp, #0]
 8003066:	4293      	cmp	r3, r2
 8003068:	d210      	bcs.n	800308c <HAL_Delay_Microseconds+0x3c>
  {
	  DWT_TOTAL = DWT_TOTAL - (UINT32_MAX - DWT_START);
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	9a00      	ldr	r2, [sp, #0]
 800306e:	4413      	add	r3, r2
 8003070:	3301      	adds	r3, #1
 8003072:	9300      	str	r3, [sp, #0]
	  while ((DWT->CYCCNT > DWT_START) || (DWT->CYCCNT  < DWT_TOTAL));
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_Delay_Microseconds+0x4c>)
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	9b01      	ldr	r3, [sp, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d8fa      	bhi.n	8003074 <HAL_Delay_Microseconds+0x24>
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_Delay_Microseconds+0x4c>)
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	9b00      	ldr	r3, [sp, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d3f5      	bcc.n	8003074 <HAL_Delay_Microseconds+0x24>
	  while((DWT->CYCCNT - DWT_START) < DWT_TOTAL)
	  {
		  //HAL_Notify_WDT(); //a remettre en cas d'utilisation du chien de garde
	  }
  }
}
 8003088:	b002      	add	sp, #8
 800308a:	4770      	bx	lr
	  while((DWT->CYCCNT - DWT_START) < DWT_TOTAL)
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_Delay_Microseconds+0x4c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	9a01      	ldr	r2, [sp, #4]
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	9a00      	ldr	r2, [sp, #0]
 8003096:	4293      	cmp	r3, r2
 8003098:	d3f8      	bcc.n	800308c <HAL_Delay_Microseconds+0x3c>
 800309a:	e7f5      	b.n	8003088 <HAL_Delay_Microseconds+0x38>
 800309c:	e0001000 	.word	0xe0001000

080030a0 <HAL_InitDelayUs>:

void HAL_InitDelayUs()
{

  ITM->LAR = 0xC5ACCE55; // unlock (CM7)
 80030a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_InitDelayUs+0x24>)
 80030a6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  CoreDebug->DEMCR |= 0x01000000;
 80030aa:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_InitDelayUs+0x28>)
 80030ac:	68d3      	ldr	r3, [r2, #12]
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_InitDelayUs+0x2c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= 1 ; // enable the counter
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

}
 80030c2:	4770      	bx	lr
 80030c4:	c5acce55 	.word	0xc5acce55
 80030c8:	e000edf0 	.word	0xe000edf0
 80030cc:	e0001000 	.word	0xe0001000

080030d0 <SpgIntMatrice>:
//
// Variable:
//
//
void SpgIntMatrice()
{
 80030d0:	b570      	push	{r4, r5, r6, lr}
  //portb.BIT_DEBUG_1 = 1;
  // gestion des volets
  if ((NumLigne >= VoletGauche) && (NumLigne <= VoletDroit))
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <SpgIntMatrice+0xfc>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4a3e      	ldr	r2, [pc, #248]	; (80031d0 <SpgIntMatrice+0x100>)
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	4293      	cmp	r3, r2
 80030dc:	d303      	bcc.n	80030e6 <SpgIntMatrice+0x16>
 80030de:	4a3b      	ldr	r2, [pc, #236]	; (80031cc <SpgIntMatrice+0xfc>)
 80030e0:	7852      	ldrb	r2, [r2, #1]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d924      	bls.n	8003130 <SpgIntMatrice+0x60>
     /*portc.BIT_OE_MEM = 1;       //-- on force a zro la donnée
     portc.BIT_CLK_MTRX = 1;     //-- gene front d'horloge
     portc.BIT_CLK_MEM = 0;
     portc.BIT_CLK_MTRX = 0;
     portc.BIT_CLK_MEM = 1; */
     HAL_GPIO_WritePin(OE_MEM_GPIO_Port, OE_MEM_Pin, GPIO_PIN_SET);
 80030e6:	4c3b      	ldr	r4, [pc, #236]	; (80031d4 <SpgIntMatrice+0x104>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7fd fe36 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_SET);
 80030f4:	4d38      	ldr	r5, [pc, #224]	; (80031d8 <SpgIntMatrice+0x108>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	4611      	mov	r1, r2
 80030fa:	4628      	mov	r0, r5
 80030fc:	f7fd fe30 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_RESET);
 8003100:	2200      	movs	r2, #0
 8003102:	2110      	movs	r1, #16
 8003104:	4620      	mov	r0, r4
 8003106:	f7fd fe2b 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_RESET);
 800310a:	2200      	movs	r2, #0
 800310c:	2101      	movs	r1, #1
 800310e:	4628      	mov	r0, r5
 8003110:	f7fd fe26 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 8003114:	2201      	movs	r2, #1
 8003116:	2110      	movs	r1, #16
 8003118:	4620      	mov	r0, r4
 800311a:	f7fd fe21 	bl	8000d60 <HAL_GPIO_WritePin>
  }

  NumLigne++;
 800311e:	4a2b      	ldr	r2, [pc, #172]	; (80031cc <SpgIntMatrice+0xfc>)
 8003120:	7813      	ldrb	r3, [r2, #0]
 8003122:	3301      	adds	r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	7013      	strb	r3, [r2, #0]
  //if (NumLigne.F7)
  if ((NumLigne & TST_BIT7) != 0)  //en fait, le numero du point dans la ligne (colonne)
 8003128:	f013 0f80 	tst.w	r3, #128	; 0x80
 800312c:	d11d      	bne.n	800316a <SpgIntMatrice+0x9a>
  }


  //PIR2.TMR3IF = 0;
  //portb.BIT_DEBUG_1 = 0;
}
 800312e:	bd70      	pop	{r4, r5, r6, pc}
	 HAL_GPIO_WritePin(OE_MEM_GPIO_Port, OE_MEM_Pin, GPIO_PIN_RESET);
 8003130:	4c28      	ldr	r4, [pc, #160]	; (80031d4 <SpgIntMatrice+0x104>)
 8003132:	2200      	movs	r2, #0
 8003134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003138:	4620      	mov	r0, r4
 800313a:	f7fd fe11 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_SET);
 800313e:	4d26      	ldr	r5, [pc, #152]	; (80031d8 <SpgIntMatrice+0x108>)
 8003140:	2201      	movs	r2, #1
 8003142:	4611      	mov	r1, r2
 8003144:	4628      	mov	r0, r5
 8003146:	f7fd fe0b 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_RESET);
 800314a:	2200      	movs	r2, #0
 800314c:	2110      	movs	r1, #16
 800314e:	4620      	mov	r0, r4
 8003150:	f7fd fe06 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_RESET);
 8003154:	2200      	movs	r2, #0
 8003156:	2101      	movs	r1, #1
 8003158:	4628      	mov	r0, r5
 800315a:	f7fd fe01 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 800315e:	2201      	movs	r2, #1
 8003160:	2110      	movs	r1, #16
 8003162:	4620      	mov	r0, r4
 8003164:	f7fd fdfc 	bl	8000d60 <HAL_GPIO_WritePin>
 8003168:	e7d9      	b.n	800311e <SpgIntMatrice+0x4e>
	 HAL_GPIO_WritePin(LATCH_MTRX_GPIO_Port, LATCH_MTRX_Pin, GPIO_PIN_SET);
 800316a:	4c1b      	ldr	r4, [pc, #108]	; (80031d8 <SpgIntMatrice+0x108>)
 800316c:	2201      	movs	r2, #1
 800316e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003172:	4620      	mov	r0, r4
 8003174:	f7fd fdf4 	bl	8000d60 <HAL_GPIO_WritePin>
     NumLigne = 0;
 8003178:	2600      	movs	r6, #0
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <SpgIntMatrice+0xfc>)
 800317c:	701e      	strb	r6, [r3, #0]
     NumColonne++;                 //en fait, le numero de la ligne
 800317e:	4d14      	ldr	r5, [pc, #80]	; (80031d0 <SpgIntMatrice+0x100>)
 8003180:	786a      	ldrb	r2, [r5, #1]
 8003182:	3201      	adds	r2, #1
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	706a      	strb	r2, [r5, #1]
     HAL_GPIO_WritePin(LIGNE_A_GPIO_Port, LIGNE_A_Pin, (NumColonne & TST_BIT0));
 8003188:	f002 0201 	and.w	r2, r2, #1
 800318c:	2104      	movs	r1, #4
 800318e:	4620      	mov	r0, r4
 8003190:	f7fd fde6 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LIGNE_B_GPIO_Port, LIGNE_B_Pin, ((NumColonne & TST_BIT1) >> 1));
 8003194:	786a      	ldrb	r2, [r5, #1]
 8003196:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800319a:	2108      	movs	r1, #8
 800319c:	4620      	mov	r0, r4
 800319e:	f7fd fddf 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LIGNE_C_GPIO_Port, LIGNE_C_Pin, ((NumColonne & TST_BIT2) >> 2));
 80031a2:	786a      	ldrb	r2, [r5, #1]
 80031a4:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80031a8:	2110      	movs	r1, #16
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7fd fdd8 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LIGNE_D_GPIO_Port, LIGNE_D_Pin, ((NumColonne & TST_BIT3) >> 3));
 80031b0:	786a      	ldrb	r2, [r5, #1]
 80031b2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80031b6:	2120      	movs	r1, #32
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7fd fdd1 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LATCH_MTRX_GPIO_Port, LATCH_MTRX_Pin, GPIO_PIN_RESET);
 80031be:	4632      	mov	r2, r6
 80031c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7fd fdcb 	bl	8000d60 <HAL_GPIO_WritePin>
}
 80031ca:	e7b0      	b.n	800312e <SpgIntMatrice+0x5e>
 80031cc:	200000be 	.word	0x200000be
 80031d0:	20000029 	.word	0x20000029
 80031d4:	40010c00 	.word	0x40010c00
 80031d8:	40010800 	.word	0x40010800

080031dc <SpgIntVolet>:
//
// Variable:
//
//
void SpgIntVolet()
{
 80031dc:	b508      	push	{r3, lr}
	  TempoVolet++;
 80031de:	4a7a      	ldr	r2, [pc, #488]	; (80033c8 <SpgIntVolet+0x1ec>)
 80031e0:	7813      	ldrb	r3, [r2, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	7013      	strb	r3, [r2, #0]
	  if (TempoVolet == AppelImg.TempoVolet)
 80031e8:	4a78      	ldr	r2, [pc, #480]	; (80033cc <SpgIntVolet+0x1f0>)
 80031ea:	7912      	ldrb	r2, [r2, #4]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d000      	beq.n	80031f2 <SpgIntVolet+0x16>
	             }
	             break;
	         }
	      }
	  }
}
 80031f0:	bd08      	pop	{r3, pc}
	      TempoVolet = 0;
 80031f2:	4b75      	ldr	r3, [pc, #468]	; (80033c8 <SpgIntVolet+0x1ec>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
	      switch (AppelImg.TypeVolet)
 80031f8:	4b74      	ldr	r3, [pc, #464]	; (80033cc <SpgIntVolet+0x1f0>)
 80031fa:	78db      	ldrb	r3, [r3, #3]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d8f6      	bhi.n	80031f0 <SpgIntVolet+0x14>
 8003202:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003206:	0006      	.short	0x0006
 8003208:	009a0046 	.word	0x009a0046
 800320c:	00700028 	.word	0x00700028
 8003210:	00be      	.short	0x00be
	             if (DebutVolet == VRAI)
 8003212:	4b6f      	ldr	r3, [pc, #444]	; (80033d0 <SpgIntVolet+0x1f4>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d013      	beq.n	8003242 <SpgIntVolet+0x66>
	                 VoletGauche--;
 800321a:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <SpgIntVolet+0x1f8>)
 800321c:	7813      	ldrb	r3, [r2, #0]
 800321e:	3b01      	subs	r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	7013      	strb	r3, [r2, #0]
	                 if (VoletGauche == G_INIT_VG_F)
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e3      	bne.n	80031f0 <SpgIntVolet+0x14>
	                     DebutVolet = VRAI;
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <SpgIntVolet+0x1f4>)
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
	                     VoletDroit = G_INIT_VD_O+1;  //correction bug affichage dernier colonne
 800322e:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <SpgIntVolet+0x1fc>)
 8003230:	227f      	movs	r2, #127	; 0x7f
 8003232:	701a      	strb	r2, [r3, #0]
	                     HAL_TIM_Base_Stop_IT(&htim1);
 8003234:	4869      	ldr	r0, [pc, #420]	; (80033dc <SpgIntVolet+0x200>)
 8003236:	f7ff f81d 	bl	8002274 <HAL_TIM_Base_Stop_IT>
	                     MemITTimer = 0;
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <SpgIntVolet+0x1ec>)
 800323c:	2200      	movs	r2, #0
 800323e:	705a      	strb	r2, [r3, #1]
 8003240:	e7d6      	b.n	80031f0 <SpgIntVolet+0x14>
	                VoletGauche = G_INIT_VG_O;
 8003242:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <SpgIntVolet+0x1f8>)
 8003244:	227f      	movs	r2, #127	; 0x7f
 8003246:	701a      	strb	r2, [r3, #0]
	                VoletDroit  = G_INIT_VD_O;
 8003248:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <SpgIntVolet+0x1fc>)
 800324a:	227e      	movs	r2, #126	; 0x7e
 800324c:	701a      	strb	r2, [r3, #0]
	                DebutVolet = FAUX;
 800324e:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <SpgIntVolet+0x1f4>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e7cc      	b.n	80031f0 <SpgIntVolet+0x14>
	             if (DebutVolet == VRAI)
 8003256:	4b5e      	ldr	r3, [pc, #376]	; (80033d0 <SpgIntVolet+0x1f4>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d010      	beq.n	8003280 <SpgIntVolet+0xa4>
	                 VoletGauche++;
 800325e:	4a5d      	ldr	r2, [pc, #372]	; (80033d4 <SpgIntVolet+0x1f8>)
 8003260:	7813      	ldrb	r3, [r2, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	7013      	strb	r3, [r2, #0]
	                 if (VoletGauche == G_INIT_VG_O)
 8003268:	2b7f      	cmp	r3, #127	; 0x7f
 800326a:	d1c1      	bne.n	80031f0 <SpgIntVolet+0x14>
	                     DebutVolet = VRAI;
 800326c:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <SpgIntVolet+0x1f4>)
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
	                     HAL_TIM_Base_Stop_IT(&htim1);
 8003272:	485a      	ldr	r0, [pc, #360]	; (80033dc <SpgIntVolet+0x200>)
 8003274:	f7fe fffe 	bl	8002274 <HAL_TIM_Base_Stop_IT>
	                     MemITTimer = 0;
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <SpgIntVolet+0x1ec>)
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
 800327e:	e7b7      	b.n	80031f0 <SpgIntVolet+0x14>
	                VoletGauche = G_INIT_VG_F;
 8003280:	2300      	movs	r3, #0
 8003282:	4a54      	ldr	r2, [pc, #336]	; (80033d4 <SpgIntVolet+0x1f8>)
 8003284:	7013      	strb	r3, [r2, #0]
	                VoletDroit  = G_INIT_VD_F;
 8003286:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <SpgIntVolet+0x1fc>)
 8003288:	217e      	movs	r1, #126	; 0x7e
 800328a:	7011      	strb	r1, [r2, #0]
	                DebutVolet = FAUX;
 800328c:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <SpgIntVolet+0x1f4>)
 800328e:	7013      	strb	r3, [r2, #0]
 8003290:	e7ae      	b.n	80031f0 <SpgIntVolet+0x14>
	             if (DebutVolet == VRAI)
 8003292:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <SpgIntVolet+0x1f4>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d018      	beq.n	80032cc <SpgIntVolet+0xf0>
	                 if (VoletGauche == D_INIT_VG_O)    //cas particulier ouverture volet droit
 800329a:	4b4e      	ldr	r3, [pc, #312]	; (80033d4 <SpgIntVolet+0x1f8>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b7f      	cmp	r3, #127	; 0x7f
 80032a0:	d01d      	beq.n	80032de <SpgIntVolet+0x102>
	                     VoletDroit++;
 80032a2:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <SpgIntVolet+0x1fc>)
 80032a4:	7813      	ldrb	r3, [r2, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	7013      	strb	r3, [r2, #0]
	                 if (VoletDroit == D_INIT_VD_F)
 80032aa:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <SpgIntVolet+0x1fc>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b7e      	cmp	r3, #126	; 0x7e
 80032b0:	d19e      	bne.n	80031f0 <SpgIntVolet+0x14>
	                     DebutVolet = VRAI;
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <SpgIntVolet+0x1f4>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
	                     VoletDroit = D_INIT_VD_F+1;  //correction bug affichage dernier colonne
 80032b8:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <SpgIntVolet+0x1fc>)
 80032ba:	227f      	movs	r2, #127	; 0x7f
 80032bc:	701a      	strb	r2, [r3, #0]
	                     HAL_TIM_Base_Stop_IT(&htim1);
 80032be:	4847      	ldr	r0, [pc, #284]	; (80033dc <SpgIntVolet+0x200>)
 80032c0:	f7fe ffd8 	bl	8002274 <HAL_TIM_Base_Stop_IT>
	                     MemITTimer = 0;
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <SpgIntVolet+0x1ec>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	705a      	strb	r2, [r3, #1]
 80032ca:	e791      	b.n	80031f0 <SpgIntVolet+0x14>
	                VoletGauche = D_INIT_VG_O;
 80032cc:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <SpgIntVolet+0x1f8>)
 80032ce:	227f      	movs	r2, #127	; 0x7f
 80032d0:	701a      	strb	r2, [r3, #0]
	                VoletDroit  = D_INIT_VD_O;
 80032d2:	2300      	movs	r3, #0
 80032d4:	4a40      	ldr	r2, [pc, #256]	; (80033d8 <SpgIntVolet+0x1fc>)
 80032d6:	7013      	strb	r3, [r2, #0]
	                DebutVolet = FAUX;
 80032d8:	4a3d      	ldr	r2, [pc, #244]	; (80033d0 <SpgIntVolet+0x1f4>)
 80032da:	7013      	strb	r3, [r2, #0]
 80032dc:	e788      	b.n	80031f0 <SpgIntVolet+0x14>
	                     VoletGauche = D_INIT_VG_F;     //
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <SpgIntVolet+0x1f8>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e7e1      	b.n	80032aa <SpgIntVolet+0xce>
	             if (DebutVolet == VRAI)
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <SpgIntVolet+0x1f4>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d012      	beq.n	8003314 <SpgIntVolet+0x138>
	                 if (VoletGauche == D_INIT_VG_O)
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <SpgIntVolet+0x1f8>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b7f      	cmp	r3, #127	; 0x7f
 80032f4:	d017      	beq.n	8003326 <SpgIntVolet+0x14a>
	                 if (VoletDroit == D_INIT_VD_O)
 80032f6:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <SpgIntVolet+0x1fc>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b913      	cbnz	r3, 8003302 <SpgIntVolet+0x126>
	                    VoletGauche = D_INIT_VG_O;
 80032fc:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <SpgIntVolet+0x1f8>)
 80032fe:	217f      	movs	r1, #127	; 0x7f
 8003300:	7011      	strb	r1, [r2, #0]
	                 if (VoletGauche == D_INIT_VG_F)
 8003302:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <SpgIntVolet+0x1f8>)
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	2a00      	cmp	r2, #0
 8003308:	f47f af72 	bne.w	80031f0 <SpgIntVolet+0x14>
	                    VoletDroit--;
 800330c:	3b01      	subs	r3, #1
 800330e:	4a32      	ldr	r2, [pc, #200]	; (80033d8 <SpgIntVolet+0x1fc>)
 8003310:	7013      	strb	r3, [r2, #0]
 8003312:	e76d      	b.n	80031f0 <SpgIntVolet+0x14>
	                VoletGauche = D_INIT_VG_F;
 8003314:	2300      	movs	r3, #0
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <SpgIntVolet+0x1f8>)
 8003318:	7013      	strb	r3, [r2, #0]
	                VoletDroit  = D_INIT_VD_F;
 800331a:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <SpgIntVolet+0x1fc>)
 800331c:	217e      	movs	r1, #126	; 0x7e
 800331e:	7011      	strb	r1, [r2, #0]
	                DebutVolet = FAUX;
 8003320:	4a2b      	ldr	r2, [pc, #172]	; (80033d0 <SpgIntVolet+0x1f4>)
 8003322:	7013      	strb	r3, [r2, #0]
 8003324:	e764      	b.n	80031f0 <SpgIntVolet+0x14>
	                     DebutVolet = VRAI;
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <SpgIntVolet+0x1f4>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
	                     HAL_TIM_Base_Stop_IT(&htim1);
 800332c:	482b      	ldr	r0, [pc, #172]	; (80033dc <SpgIntVolet+0x200>)
 800332e:	f7fe ffa1 	bl	8002274 <HAL_TIM_Base_Stop_IT>
	                     MemITTimer = 0;
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <SpgIntVolet+0x1ec>)
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
 8003338:	e7dd      	b.n	80032f6 <SpgIntVolet+0x11a>
	             if (DebutVolet == VRAI)
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <SpgIntVolet+0x1f4>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d015      	beq.n	800336e <SpgIntVolet+0x192>
	                 VoletGauche--;
 8003342:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <SpgIntVolet+0x1f8>)
 8003344:	7813      	ldrb	r3, [r2, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	7013      	strb	r3, [r2, #0]
	                 VoletDroit++;
 800334c:	4922      	ldr	r1, [pc, #136]	; (80033d8 <SpgIntVolet+0x1fc>)
 800334e:	780a      	ldrb	r2, [r1, #0]
 8003350:	3201      	adds	r2, #1
 8003352:	700a      	strb	r2, [r1, #0]
	                 if (VoletGauche == C_INIT_VG_F)
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f af4b 	bne.w	80031f0 <SpgIntVolet+0x14>
	                     DebutVolet = VRAI;
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <SpgIntVolet+0x1f4>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
	                     HAL_TIM_Base_Stop_IT(&htim1);
 8003360:	481e      	ldr	r0, [pc, #120]	; (80033dc <SpgIntVolet+0x200>)
 8003362:	f7fe ff87 	bl	8002274 <HAL_TIM_Base_Stop_IT>
	                     MemITTimer = 0;
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <SpgIntVolet+0x1ec>)
 8003368:	2200      	movs	r2, #0
 800336a:	705a      	strb	r2, [r3, #1]
 800336c:	e740      	b.n	80031f0 <SpgIntVolet+0x14>
	                VoletGauche = C_INIT_VG_O;
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <SpgIntVolet+0x1f8>)
 8003370:	2240      	movs	r2, #64	; 0x40
 8003372:	701a      	strb	r2, [r3, #0]
	                VoletDroit  = C_INIT_VD_O;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <SpgIntVolet+0x1fc>)
 8003376:	223f      	movs	r2, #63	; 0x3f
 8003378:	701a      	strb	r2, [r3, #0]
	                DebutVolet = FAUX;
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <SpgIntVolet+0x1f4>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e736      	b.n	80031f0 <SpgIntVolet+0x14>
	             if (DebutVolet == VRAI)
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <SpgIntVolet+0x1f4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d015      	beq.n	80033b6 <SpgIntVolet+0x1da>
	                 VoletGauche++;
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <SpgIntVolet+0x1f8>)
 800338c:	7813      	ldrb	r3, [r2, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	7013      	strb	r3, [r2, #0]
	                 VoletDroit--;
 8003394:	4910      	ldr	r1, [pc, #64]	; (80033d8 <SpgIntVolet+0x1fc>)
 8003396:	780a      	ldrb	r2, [r1, #0]
 8003398:	3a01      	subs	r2, #1
 800339a:	700a      	strb	r2, [r1, #0]
	                 if (VoletGauche == C_INIT_VG_O)
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	f47f af27 	bne.w	80031f0 <SpgIntVolet+0x14>
	                     DebutVolet = VRAI;
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <SpgIntVolet+0x1f4>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
	                     HAL_TIM_Base_Stop_IT(&htim1);
 80033a8:	480c      	ldr	r0, [pc, #48]	; (80033dc <SpgIntVolet+0x200>)
 80033aa:	f7fe ff63 	bl	8002274 <HAL_TIM_Base_Stop_IT>
	                     MemITTimer = 0;
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <SpgIntVolet+0x1ec>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	705a      	strb	r2, [r3, #1]
}
 80033b4:	e71c      	b.n	80031f0 <SpgIntVolet+0x14>
	                VoletGauche = C_INIT_VG_F;
 80033b6:	2300      	movs	r3, #0
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <SpgIntVolet+0x1f8>)
 80033ba:	7013      	strb	r3, [r2, #0]
	                VoletDroit  = C_INIT_VD_F;
 80033bc:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <SpgIntVolet+0x1fc>)
 80033be:	217e      	movs	r1, #126	; 0x7e
 80033c0:	7011      	strb	r1, [r2, #0]
	                DebutVolet = FAUX;
 80033c2:	4a03      	ldr	r2, [pc, #12]	; (80033d0 <SpgIntVolet+0x1f4>)
 80033c4:	7013      	strb	r3, [r2, #0]
 80033c6:	e713      	b.n	80031f0 <SpgIntVolet+0x14>
 80033c8:	200000c0 	.word	0x200000c0
 80033cc:	200003c0 	.word	0x200003c0
 80033d0:	2000002b 	.word	0x2000002b
 80033d4:	20000029 	.word	0x20000029
 80033d8:	200000bf 	.word	0x200000bf
 80033dc:	2000048c 	.word	0x2000048c

080033e0 <GesRecImage>:
#define HEADER_1 0x55
#define HEADER_2 0xAA


void GesRecImage(uint8_t *ptDataRec)
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4604      	mov	r4, r0

uint8_t i, Res;
HAL_StatusTypeDef Etat;

     //--------------- test reception header debut -----------//
     if ((ptDataRec[0] == HEADER_1) && (ptDataRec[7] == HEADER_2))
 80033e4:	7803      	ldrb	r3, [r0, #0]
 80033e6:	2b55      	cmp	r3, #85	; 0x55
 80033e8:	d008      	beq.n	80033fc <GesRecImage+0x1c>
            Etat = HAL_TIM_Base_Init(&htim2);
            Etat = HAL_TIM_Base_Start_IT (&htim2);
        }
     }
     //--------------- test reception header Fin -----------//
     if (HeaderFin == VRAI)
 80033ea:	4b6c      	ldr	r3, [pc, #432]	; (800359c <GesRecImage+0x1bc>)
 80033ec:	79db      	ldrb	r3, [r3, #7]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d032      	beq.n	8003458 <GesRecImage+0x78>
        htim2.Init.Period = VAL_PER_IT_MTRX_HS;
        Etat = HAL_TIM_Base_Init(&htim2);
        Etat = HAL_TIM_Base_Start_IT (&htim2);
     }
     //------------- test reception donnée utile -----------//
     if (HeaderOK == VRAI)
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <GesRecImage+0x1bc>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d054      	beq.n	80034a4 <GesRecImage+0xc4>
                  HeaderOK = FAUX;
                  HeaderFin = VRAI;
              }
        }
     }
}
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
     if ((ptDataRec[0] == HEADER_1) && (ptDataRec[7] == HEADER_2))
 80033fc:	79c3      	ldrb	r3, [r0, #7]
 80033fe:	2baa      	cmp	r3, #170	; 0xaa
 8003400:	d1f3      	bne.n	80033ea <GesRecImage+0xa>
        HeaderOK = VRAI;
 8003402:	4b66      	ldr	r3, [pc, #408]	; (800359c <GesRecImage+0x1bc>)
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
        NumImage = ptDataRec[1];
 8003408:	7842      	ldrb	r2, [r0, #1]
 800340a:	705a      	strb	r2, [r3, #1]
        for (i=2 ; i!=7 ; i++)
 800340c:	2302      	movs	r3, #2
 800340e:	e001      	b.n	8003414 <GesRecImage+0x34>
 8003410:	3301      	adds	r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b07      	cmp	r3, #7
 8003416:	d006      	beq.n	8003426 <GesRecImage+0x46>
          if (ptDataRec[i] != 0) HeaderOK = FAUX;
 8003418:	5ce2      	ldrb	r2, [r4, r3]
 800341a:	2a00      	cmp	r2, #0
 800341c:	d0f8      	beq.n	8003410 <GesRecImage+0x30>
 800341e:	4a5f      	ldr	r2, [pc, #380]	; (800359c <GesRecImage+0x1bc>)
 8003420:	2100      	movs	r1, #0
 8003422:	7011      	strb	r1, [r2, #0]
 8003424:	e7f4      	b.n	8003410 <GesRecImage+0x30>
        if (HeaderOK == VRAI)
 8003426:	4b5d      	ldr	r3, [pc, #372]	; (800359c <GesRecImage+0x1bc>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d1dd      	bne.n	80033ea <GesRecImage+0xa>
            RecHeader = VRAI;
 800342e:	4b5b      	ldr	r3, [pc, #364]	; (800359c <GesRecImage+0x1bc>)
 8003430:	2201      	movs	r2, #1
 8003432:	709a      	strb	r2, [r3, #2]
            NumOctet   = 0;
 8003434:	2200      	movs	r2, #0
 8003436:	70da      	strb	r2, [r3, #3]
            NumPartImg = 0;
 8003438:	711a      	strb	r2, [r3, #4]
            ChkImg     = 0;
 800343a:	715a      	strb	r2, [r3, #5]
            RecOK = REC_OK;
 800343c:	719a      	strb	r2, [r3, #6]
            Etat = HAL_TIM_Base_Stop_IT (&htim2);
 800343e:	4d58      	ldr	r5, [pc, #352]	; (80035a0 <GesRecImage+0x1c0>)
 8003440:	4628      	mov	r0, r5
 8003442:	f7fe ff17 	bl	8002274 <HAL_TIM_Base_Stop_IT>
            htim2.Init.Period = VAL_PER_IT_MTRX_LS;
 8003446:	2320      	movs	r3, #32
 8003448:	60eb      	str	r3, [r5, #12]
            Etat = HAL_TIM_Base_Init(&htim2);
 800344a:	4628      	mov	r0, r5
 800344c:	f7ff f828 	bl	80024a0 <HAL_TIM_Base_Init>
            Etat = HAL_TIM_Base_Start_IT (&htim2);
 8003450:	4628      	mov	r0, r5
 8003452:	f7fe fedb 	bl	800220c <HAL_TIM_Base_Start_IT>
 8003456:	e7c8      	b.n	80033ea <GesRecImage+0xa>
        if ((ptDataRec[0] == HEADER_2) && (ptDataRec[7] == HEADER_1))
 8003458:	7823      	ldrb	r3, [r4, #0]
 800345a:	2baa      	cmp	r3, #170	; 0xaa
 800345c:	d014      	beq.n	8003488 <GesRecImage+0xa8>
        	RecOK = RecOK | BIT_ERR_HDF;
 800345e:	4a4f      	ldr	r2, [pc, #316]	; (800359c <GesRecImage+0x1bc>)
 8003460:	7993      	ldrb	r3, [r2, #6]
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	7193      	strb	r3, [r2, #6]
        HeaderFin = FAUX;
 8003468:	4b4c      	ldr	r3, [pc, #304]	; (800359c <GesRecImage+0x1bc>)
 800346a:	2200      	movs	r2, #0
 800346c:	71da      	strb	r2, [r3, #7]
        Etat = HAL_TIM_Base_Stop_IT (&htim2);
 800346e:	4d4c      	ldr	r5, [pc, #304]	; (80035a0 <GesRecImage+0x1c0>)
 8003470:	4628      	mov	r0, r5
 8003472:	f7fe feff 	bl	8002274 <HAL_TIM_Base_Stop_IT>
        htim2.Init.Period = VAL_PER_IT_MTRX_HS;
 8003476:	2304      	movs	r3, #4
 8003478:	60eb      	str	r3, [r5, #12]
        Etat = HAL_TIM_Base_Init(&htim2);
 800347a:	4628      	mov	r0, r5
 800347c:	f7ff f810 	bl	80024a0 <HAL_TIM_Base_Init>
        Etat = HAL_TIM_Base_Start_IT (&htim2);
 8003480:	4628      	mov	r0, r5
 8003482:	f7fe fec3 	bl	800220c <HAL_TIM_Base_Start_IT>
 8003486:	e7b4      	b.n	80033f2 <GesRecImage+0x12>
        if ((ptDataRec[0] == HEADER_2) && (ptDataRec[7] == HEADER_1))
 8003488:	79e3      	ldrb	r3, [r4, #7]
 800348a:	2b55      	cmp	r3, #85	; 0x55
 800348c:	d1e7      	bne.n	800345e <GesRecImage+0x7e>
            if (ChkImg == ptDataRec[2])
 800348e:	78a2      	ldrb	r2, [r4, #2]
 8003490:	4b42      	ldr	r3, [pc, #264]	; (800359c <GesRecImage+0x1bc>)
 8003492:	795b      	ldrb	r3, [r3, #5]
 8003494:	429a      	cmp	r2, r3
 8003496:	d0e7      	beq.n	8003468 <GesRecImage+0x88>
            	RecOK = RecOK | BIT_ERR_CHK;
 8003498:	4a40      	ldr	r2, [pc, #256]	; (800359c <GesRecImage+0x1bc>)
 800349a:	7993      	ldrb	r3, [r2, #6]
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	7193      	strb	r3, [r2, #6]
 80034a2:	e7e1      	b.n	8003468 <GesRecImage+0x88>
        if (RecHeader == VRAI)
 80034a4:	4b3d      	ldr	r3, [pc, #244]	; (800359c <GesRecImage+0x1bc>)
 80034a6:	789b      	ldrb	r3, [r3, #2]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d069      	beq.n	8003580 <GesRecImage+0x1a0>
              ChkImg = ChkImg + ptDataRec[0] + ptDataRec[1] + ptDataRec[2] + ptDataRec[3];
 80034ac:	7821      	ldrb	r1, [r4, #0]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	; (800359c <GesRecImage+0x1bc>)
 80034b0:	7953      	ldrb	r3, [r2, #5]
 80034b2:	440b      	add	r3, r1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	7860      	ldrb	r0, [r4, #1]
 80034b8:	4403      	add	r3, r0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	78a0      	ldrb	r0, [r4, #2]
 80034be:	4403      	add	r3, r0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	78e0      	ldrb	r0, [r4, #3]
 80034c4:	4403      	add	r3, r0
 80034c6:	b2db      	uxtb	r3, r3
              ChkImg = ChkImg + ptDataRec[4] + ptDataRec[5] + ptDataRec[6] + ptDataRec[7];
 80034c8:	7920      	ldrb	r0, [r4, #4]
 80034ca:	4403      	add	r3, r0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	7960      	ldrb	r0, [r4, #5]
 80034d0:	4403      	add	r3, r0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	79a0      	ldrb	r0, [r4, #6]
 80034d6:	4403      	add	r3, r0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	79e0      	ldrb	r0, [r4, #7]
 80034dc:	4403      	add	r3, r0
 80034de:	7153      	strb	r3, [r2, #5]
              TabMatrix[NumOctet++] = ptDataRec[0];
 80034e0:	78d5      	ldrb	r5, [r2, #3]
 80034e2:	1c68      	adds	r0, r5, #1
 80034e4:	b2c0      	uxtb	r0, r0
 80034e6:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <GesRecImage+0x1c4>)
 80034e8:	5559      	strb	r1, [r3, r5]
              TabMatrix[NumOctet++] = ptDataRec[1];
 80034ea:	1c41      	adds	r1, r0, #1
 80034ec:	b2c9      	uxtb	r1, r1
 80034ee:	7865      	ldrb	r5, [r4, #1]
 80034f0:	541d      	strb	r5, [r3, r0]
              TabMatrix[NumOctet++] = ptDataRec[2];
 80034f2:	1c48      	adds	r0, r1, #1
 80034f4:	b2c0      	uxtb	r0, r0
 80034f6:	78a5      	ldrb	r5, [r4, #2]
 80034f8:	545d      	strb	r5, [r3, r1]
              TabMatrix[NumOctet++] = ptDataRec[3];
 80034fa:	1c41      	adds	r1, r0, #1
 80034fc:	b2c9      	uxtb	r1, r1
 80034fe:	78e5      	ldrb	r5, [r4, #3]
 8003500:	541d      	strb	r5, [r3, r0]
              TabMatrix[NumOctet++] = ptDataRec[4];
 8003502:	1c48      	adds	r0, r1, #1
 8003504:	b2c0      	uxtb	r0, r0
 8003506:	7925      	ldrb	r5, [r4, #4]
 8003508:	545d      	strb	r5, [r3, r1]
              TabMatrix[NumOctet++] = ptDataRec[5];
 800350a:	1c41      	adds	r1, r0, #1
 800350c:	b2c9      	uxtb	r1, r1
 800350e:	7965      	ldrb	r5, [r4, #5]
 8003510:	541d      	strb	r5, [r3, r0]
              TabMatrix[NumOctet++] = ptDataRec[6];
 8003512:	1c48      	adds	r0, r1, #1
 8003514:	b2c0      	uxtb	r0, r0
 8003516:	79a5      	ldrb	r5, [r4, #6]
 8003518:	545d      	strb	r5, [r3, r1]
              TabMatrix[NumOctet++] = ptDataRec[7];
 800351a:	1c41      	adds	r1, r0, #1
 800351c:	b2c9      	uxtb	r1, r1
 800351e:	70d1      	strb	r1, [r2, #3]
 8003520:	79e2      	ldrb	r2, [r4, #7]
 8003522:	541a      	strb	r2, [r3, r0]
              if (NumOctet == 0)
 8003524:	bb09      	cbnz	r1, 800356a <GesRecImage+0x18a>
                  if (NumImage >= IMG_PAGE_BAS)
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <GesRecImage+0x1bc>)
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	2b0f      	cmp	r3, #15
 800352c:	d92c      	bls.n	8003588 <GesRecImage+0x1a8>
                      PageHt = VRAI;
 800352e:	4a1b      	ldr	r2, [pc, #108]	; (800359c <GesRecImage+0x1bc>)
 8003530:	2101      	movs	r1, #1
 8003532:	7211      	strb	r1, [r2, #8]
                      AdrInt = (((NumImage - IMG_PAGE_BAS) << 4) + NumPartImg) << 8;
 8003534:	3b10      	subs	r3, #16
 8003536:	b29b      	uxth	r3, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	b29b      	uxth	r3, r3
 800353c:	7911      	ldrb	r1, [r2, #4]
 800353e:	440b      	add	r3, r1
 8003540:	b29b      	uxth	r3, r3
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	8153      	strh	r3, [r2, #10]
                  Res = EcrI2CPoll(AdrInt, PageHt, TabMatrix, LG_TAB_MATRIX);
 8003546:	4815      	ldr	r0, [pc, #84]	; (800359c <GesRecImage+0x1bc>)
 8003548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <GesRecImage+0x1c4>)
 800354e:	7a01      	ldrb	r1, [r0, #8]
 8003550:	8940      	ldrh	r0, [r0, #10]
 8003552:	f7ff fa73 	bl	8002a3c <EcrI2CPoll>
                  if (Res == FAUX)
 8003556:	b920      	cbnz	r0, 8003562 <GesRecImage+0x182>
                	  RecOK = RecOK | BIT_ERR_EEP;
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <GesRecImage+0x1bc>)
 800355a:	7993      	ldrb	r3, [r2, #6]
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	7193      	strb	r3, [r2, #6]
                  NumPartImg++;
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <GesRecImage+0x1bc>)
 8003564:	7913      	ldrb	r3, [r2, #4]
 8003566:	3301      	adds	r3, #1
 8003568:	7113      	strb	r3, [r2, #4]
              if ( NumPartImg == NB_PART_IMG)
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <GesRecImage+0x1bc>)
 800356c:	791b      	ldrb	r3, [r3, #4]
 800356e:	2b10      	cmp	r3, #16
 8003570:	f47f af43 	bne.w	80033fa <GesRecImage+0x1a>
                  HeaderOK = FAUX;
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <GesRecImage+0x1bc>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
                  HeaderFin = VRAI;
 800357a:	2201      	movs	r2, #1
 800357c:	71da      	strb	r2, [r3, #7]
}
 800357e:	e73c      	b.n	80033fa <GesRecImage+0x1a>
              RecHeader = FAUX;
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <GesRecImage+0x1bc>)
 8003582:	2200      	movs	r2, #0
 8003584:	709a      	strb	r2, [r3, #2]
 8003586:	e738      	b.n	80033fa <GesRecImage+0x1a>
                      PageHt = FAUX;
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <GesRecImage+0x1bc>)
 800358a:	2200      	movs	r2, #0
 800358c:	720a      	strb	r2, [r1, #8]
                      AdrInt = ((NumImage << 4) + NumPartImg) << 8;
 800358e:	790a      	ldrb	r2, [r1, #4]
 8003590:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	814b      	strh	r3, [r1, #10]
 8003598:	e7d5      	b.n	8003546 <GesRecImage+0x166>
 800359a:	bf00      	nop
 800359c:	200000c2 	.word	0x200000c2
 80035a0:	200004d4 	.word	0x200004d4
 80035a4:	20000170 	.word	0x20000170

080035a8 <GesCmdImage>:
//      PS : Aucun
//
// Variable globale : AppelImg, htim3
//
void GesCmdImage(uint8_t *ptDataRec, t_AppImg *ptAppelImg)
{
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	4604      	mov	r4, r0
 80035ac:	460d      	mov	r5, r1
uint8_t Param;
HAL_StatusTypeDef Etat;

     //-- determibnation commande a maj --//
     switch  (ptDataRec[CMD_IMG])
 80035ae:	7803      	ldrb	r3, [r0, #0]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d817      	bhi.n	80035e4 <GesCmdImage+0x3c>
 80035b4:	e8df f003 	tbb	[pc, r3]
 80035b8:	16251704 	.word	0x16251704
 80035bc:	3016      	.short	0x3016
 80035be:	33          	.byte	0x33
 80035bf:	00          	.byte	0x00
     {
         case MAJ_LUMINOSITE:
         {
               //-- maj luminosité --//
               // ccpr1l = ptDataRec[LUM_VAL_PWM];
        	   Etat = HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_3);
 80035c0:	4e18      	ldr	r6, [pc, #96]	; (8003624 <GesCmdImage+0x7c>)
 80035c2:	2108      	movs	r1, #8
 80035c4:	4630      	mov	r0, r6
 80035c6:	f7ff f955 	bl	8002874 <HAL_TIM_PWM_Stop>
        	   sConfigOCUser.Pulse = ptDataRec[LUM_VAL_PWM];
 80035ca:	7863      	ldrb	r3, [r4, #1]
 80035cc:	4916      	ldr	r1, [pc, #88]	; (8003628 <GesCmdImage+0x80>)
 80035ce:	604b      	str	r3, [r1, #4]
        	   Etat = HAL_TIM_PWM_ConfigChannel (&htim3, &sConfigOCUser, TIM_CHANNEL_3);
 80035d0:	2208      	movs	r2, #8
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7fe ffee 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
        	   Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 80035d8:	2108      	movs	r1, #8
 80035da:	4630      	mov	r0, r6
 80035dc:	f7ff f8dc 	bl	8002798 <HAL_TIM_PWM_Start>

               ptAppelImg->ValPWM = ptDataRec[LUM_VAL_PWM];
 80035e0:	7863      	ldrb	r3, [r4, #1]
 80035e2:	716b      	strb	r3, [r5, #5]
         {
               ptAppelImg->Tempo2Img = ptDataRec[APP_VITESSE];
               break;
         }
     }
}
 80035e4:	bd70      	pop	{r4, r5, r6, pc}
               Param = ptDataRec[IMG_NUM_IMG];
 80035e6:	7843      	ldrb	r3, [r0, #1]
               ptAppelImg->MajImg = VRAI;
 80035e8:	2201      	movs	r2, #1
 80035ea:	700a      	strb	r2, [r1, #0]
               if ((Param & BIT_PAGE_IMG) != 0)
 80035ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035f0:	d105      	bne.n	80035fe <GesCmdImage+0x56>
                   ptAppelImg->PageHaut = FAUX;
 80035f2:	2200      	movs	r2, #0
 80035f4:	704a      	strb	r2, [r1, #1]
               ptAppelImg->NumImage  = Param & MASQ_NUM_IMG;
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	70ab      	strb	r3, [r5, #2]
               break;
 80035fc:	e7f2      	b.n	80035e4 <GesCmdImage+0x3c>
                   ptAppelImg->PageHaut = VRAI;
 80035fe:	704a      	strb	r2, [r1, #1]
 8003600:	e7f9      	b.n	80035f6 <GesCmdImage+0x4e>
               ptAppelImg->TypeVolet  = ptDataRec[IMG_VOLET_TYP];
 8003602:	7843      	ldrb	r3, [r0, #1]
 8003604:	70cb      	strb	r3, [r1, #3]
               ptAppelImg->TempoVolet = ptDataRec[IMG_VOLET_PER];
 8003606:	7883      	ldrb	r3, [r0, #2]
 8003608:	710b      	strb	r3, [r1, #4]
               HAL_TIM_Base_Start_IT(&htim1);
 800360a:	4808      	ldr	r0, [pc, #32]	; (800362c <GesCmdImage+0x84>)
 800360c:	f7fe fdfe 	bl	800220c <HAL_TIM_Base_Start_IT>
               MemITTimer = 1;
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <GesCmdImage+0x88>)
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
               break;
 8003616:	e7e5      	b.n	80035e4 <GesCmdImage+0x3c>
               ptAppelImg->TempoCli = ptDataRec[CLI_VITESSE];
 8003618:	7843      	ldrb	r3, [r0, #1]
 800361a:	718b      	strb	r3, [r1, #6]
               break;
 800361c:	e7e2      	b.n	80035e4 <GesCmdImage+0x3c>
               ptAppelImg->Tempo2Img = ptDataRec[APP_VITESSE];
 800361e:	7843      	ldrb	r3, [r0, #1]
 8003620:	71cb      	strb	r3, [r1, #7]
}
 8003622:	e7df      	b.n	80035e4 <GesCmdImage+0x3c>
 8003624:	20000444 	.word	0x20000444
 8003628:	200000d4 	.word	0x200000d4
 800362c:	2000048c 	.word	0x2000048c
 8003630:	200000c1 	.word	0x200000c1

08003634 <GesMajEEprom>:
// Variable globale : TabMatrix[], RecOK
//
#define ATT_ECR 25

void GesMajEEprom(uint32_t Id_, uint8_t *ptDataRec)
{
 8003634:	b510      	push	{r4, lr}
uint8_t i;

      switch (Id_)
 8003636:	3850      	subs	r0, #80	; 0x50
 8003638:	2803      	cmp	r0, #3
 800363a:	d80a      	bhi.n	8003652 <GesMajEEprom+0x1e>
 800363c:	e8df f000 	tbb	[pc, r0]
 8003640:	3922160a 	.word	0x3922160a
        	//############### freq IT
            //###############t3con = VAL_CONF_T3CON_LS;  //diminution vitesse affichage
        	//############### A priori OK le 21/02/2022 ####################
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
            {
                DataEEp[i+EEP_NUM_IMAG_PROC_L] = ptDataRec[i];
 8003644:	5cc8      	ldrb	r0, [r1, r3]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <GesMajEEprom+0x84>)
 8003648:	54d0      	strb	r0, [r2, r3]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 800364a:	3301      	adds	r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b08      	cmp	r3, #8
 8003650:	d1f8      	bne.n	8003644 <GesMajEEprom+0x10>
            HAL_NVIC_SystemReset();
            break;
         }
      }

}
 8003652:	bd10      	pop	{r4, pc}
{
 8003654:	2300      	movs	r3, #0
 8003656:	e7fa      	b.n	800364e <GesMajEEprom+0x1a>
                DataEEp[i+EEP_NUM_IMAG_PROC_H] = ptDataRec[i];
 8003658:	f103 0208 	add.w	r2, r3, #8
 800365c:	5ccc      	ldrb	r4, [r1, r3]
 800365e:	4816      	ldr	r0, [pc, #88]	; (80036b8 <GesMajEEprom+0x84>)
 8003660:	5484      	strb	r4, [r0, r2]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 8003662:	3301      	adds	r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b08      	cmp	r3, #8
 8003668:	d1f6      	bne.n	8003658 <GesMajEEprom+0x24>
 800366a:	e7f2      	b.n	8003652 <GesMajEEprom+0x1e>
{
 800366c:	2300      	movs	r3, #0
 800366e:	e7fa      	b.n	8003666 <GesMajEEprom+0x32>
                DataEEp[i+EEP_NUM_DURE_PROC_L] = ptDataRec[i];
 8003670:	f103 0210 	add.w	r2, r3, #16
 8003674:	5ccc      	ldrb	r4, [r1, r3]
 8003676:	4810      	ldr	r0, [pc, #64]	; (80036b8 <GesMajEEprom+0x84>)
 8003678:	5484      	strb	r4, [r0, r2]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 800367a:	3301      	adds	r3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b08      	cmp	r3, #8
 8003680:	d1f6      	bne.n	8003670 <GesMajEEprom+0x3c>
 8003682:	e7e6      	b.n	8003652 <GesMajEEprom+0x1e>
{
 8003684:	2300      	movs	r3, #0
 8003686:	e7fa      	b.n	800367e <GesMajEEprom+0x4a>
                DataEEp[i+EEP_NUM_DURE_PROC_H] = ptDataRec[i];
 8003688:	f103 0218 	add.w	r2, r3, #24
 800368c:	5ccc      	ldrb	r4, [r1, r3]
 800368e:	480a      	ldr	r0, [pc, #40]	; (80036b8 <GesMajEEprom+0x84>)
 8003690:	5484      	strb	r4, [r0, r2]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 8003692:	3301      	adds	r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b08      	cmp	r3, #8
 8003698:	d1f6      	bne.n	8003688 <GesMajEEprom+0x54>
            EcrLecEEprom(DataEEp, 4*LG_EEP_CONFIG, VRAI, EEP_NUM_IMAG_PROC_L);
 800369a:	2300      	movs	r3, #0
 800369c:	2201      	movs	r2, #1
 800369e:	2120      	movs	r1, #32
 80036a0:	4805      	ldr	r0, [pc, #20]	; (80036b8 <GesMajEEprom+0x84>)
 80036a2:	f7ff f9a3 	bl	80029ec <EcrLecEEprom>
            HAL_Delay(ATT_ECR);
 80036a6:	2019      	movs	r0, #25
 80036a8:	f7fc fd98 	bl	80001dc <HAL_Delay>
            HAL_NVIC_SystemReset();
 80036ac:	f7fd f934 	bl	8000918 <HAL_NVIC_SystemReset>
}
 80036b0:	e7cf      	b.n	8003652 <GesMajEEprom+0x1e>
{
 80036b2:	2300      	movs	r3, #0
 80036b4:	e7ef      	b.n	8003696 <GesMajEEprom+0x62>
 80036b6:	bf00      	nop
 80036b8:	20000388 	.word	0x20000388

080036bc <TrtRecCAN>:
	if (Status == HAL_OK)
 80036bc:	bb00      	cbnz	r0, 8003700 <TrtRecCAN+0x44>
{
 80036be:	b538      	push	{r3, r4, r5, lr}
 80036c0:	460c      	mov	r4, r1
 80036c2:	461d      	mov	r5, r3
		if (IdTrame == ID_REC_IMG_BMP)
 80036c4:	2942      	cmp	r1, #66	; 0x42
 80036c6:	d009      	beq.n	80036dc <TrtRecCAN+0x20>
		if (IdTrame == ID_REC_IMG_CMD)
 80036c8:	2c41      	cmp	r4, #65	; 0x41
 80036ca:	d00b      	beq.n	80036e4 <TrtRecCAN+0x28>
		if (IdTrame == ID_MSG_REC_ST_PAY)
 80036cc:	2c40      	cmp	r4, #64	; 0x40
 80036ce:	d00e      	beq.n	80036ee <TrtRecCAN+0x32>
		if ((IdTrame & MASK_ACCEPT_B2) == ID_MSG_CONFIG_EEP)
 80036d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d4:	4023      	ands	r3, r4
 80036d6:	2b50      	cmp	r3, #80	; 0x50
 80036d8:	d00d      	beq.n	80036f6 <TrtRecCAN+0x3a>
}
 80036da:	bd38      	pop	{r3, r4, r5, pc}
		     GesRecImage(DataRec);
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fe7f 	bl	80033e0 <GesRecImage>
 80036e2:	e7f1      	b.n	80036c8 <TrtRecCAN+0xc>
		     GesCmdImage(DataRec, &AppelImg);
 80036e4:	4907      	ldr	r1, [pc, #28]	; (8003704 <TrtRecCAN+0x48>)
 80036e6:	4628      	mov	r0, r5
 80036e8:	f7ff ff5e 	bl	80035a8 <GesCmdImage>
 80036ec:	e7ee      	b.n	80036cc <TrtRecCAN+0x10>
		     ModeEnCours = DataRec[1];
 80036ee:	786a      	ldrb	r2, [r5, #1]
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <TrtRecCAN+0x4c>)
 80036f2:	731a      	strb	r2, [r3, #12]
 80036f4:	e7ec      	b.n	80036d0 <TrtRecCAN+0x14>
		     GesMajEEprom(IdTrame, DataRec);
 80036f6:	4629      	mov	r1, r5
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7ff ff9b 	bl	8003634 <GesMajEEprom>
}
 80036fe:	e7ec      	b.n	80036da <TrtRecCAN+0x1e>
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	200003c0 	.word	0x200003c0
 8003708:	200000c2 	.word	0x200000c2

0800370c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 800370c:	b500      	push	{lr}
 800370e:	b08b      	sub	sp, #44	; 0x2c
	StatusCAN = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003710:	ab01      	add	r3, sp, #4
 8003712:	aa03      	add	r2, sp, #12
 8003714:	2100      	movs	r1, #0
 8003716:	f7fc fec8 	bl	80004aa <HAL_CAN_GetRxMessage>
	TrtRecCAN(StatusCAN, RxHeader.StdId, RxHeader.DLC, RxData);
 800371a:	ab01      	add	r3, sp, #4
 800371c:	9a07      	ldr	r2, [sp, #28]
 800371e:	9903      	ldr	r1, [sp, #12]
 8003720:	f7ff ffcc 	bl	80036bc <TrtRecCAN>
}
 8003724:	b00b      	add	sp, #44	; 0x2c
 8003726:	f85d fb04 	ldr.w	pc, [sp], #4

0800372a <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 800372a:	b500      	push	{lr}
 800372c:	b08b      	sub	sp, #44	; 0x2c
	StatusCAN = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800372e:	ab01      	add	r3, sp, #4
 8003730:	aa03      	add	r2, sp, #12
 8003732:	2101      	movs	r1, #1
 8003734:	f7fc feb9 	bl	80004aa <HAL_CAN_GetRxMessage>
	TrtRecCAN(StatusCAN, RxHeader.StdId, RxHeader.DLC, RxData);
 8003738:	ab01      	add	r3, sp, #4
 800373a:	9a07      	ldr	r2, [sp, #28]
 800373c:	9903      	ldr	r1, [sp, #12]
 800373e:	f7ff ffbd 	bl	80036bc <TrtRecCAN>
}
 8003742:	b00b      	add	sp, #44	; 0x2c
 8003744:	f85d fb04 	ldr.w	pc, [sp], #4

08003748 <InitBusCAN>:
//

#define ID_MSG_TEST_EMI 0x64

void InitBusCAN(CAN_TxHeaderTypeDef *ptTxHeader, uint8_t *ptTxData, CAN_FilterTypeDef *ptFilterConfig)
{
 8003748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800374c:	4614      	mov	r4, r2

	HAL_StatusTypeDef StatusCAN;

	ptTxHeader->StdId = ID_MSG_TEST_EMI;      // D�termine l'adresse du p�riph�rique au quel la trame est destin�.
 800374e:	2364      	movs	r3, #100	; 0x64
 8003750:	6003      	str	r3, [r0, #0]

	ptTxHeader->ExtId = 0x01;       // Adresse �tendue, non utilis�e dans note cas
 8003752:	2601      	movs	r6, #1
 8003754:	6046      	str	r6, [r0, #4]
	ptTxHeader->RTR = CAN_RTR_DATA; // Pr�cise que la trame contient des donn�es
 8003756:	2500      	movs	r5, #0
 8003758:	60c5      	str	r5, [r0, #12]
	ptTxHeader->IDE = CAN_ID_STD;   // Pr�cise que la trame est de type Standard
 800375a:	6085      	str	r5, [r0, #8]
	ptTxHeader->DLC = 2;            // Pr�cise le nombre d'octets de donn�es que la trame transporte ( De 0 � 8 )
 800375c:	2302      	movs	r3, #2
 800375e:	6103      	str	r3, [r0, #16]
	ptTxHeader->TransmitGlobalTime = DISABLE;
 8003760:	7505      	strb	r5, [r0, #20]
	ptTxData[0] = 0xAA;
 8003762:	23aa      	movs	r3, #170	; 0xaa
 8003764:	700b      	strb	r3, [r1, #0]
	ptTxData[1] = 0x55;
 8003766:	2355      	movs	r3, #85	; 0x55
 8003768:	704b      	strb	r3, [r1, #1]

	//-- filtre 1 --//
    ptFilterConfig->FilterBank = 0;
 800376a:	6155      	str	r5, [r2, #20]
	ptFilterConfig->FilterMode = CAN_FILTERMODE_IDMASK;
 800376c:	6195      	str	r5, [r2, #24]
	ptFilterConfig->FilterScale = CAN_FILTERSCALE_32BIT;
 800376e:	61d6      	str	r6, [r2, #28]
	ptFilterConfig->FilterIdHigh = ID_REC_IMG_BMP << 5;           // Ici, 320 est l'adresse de la carte. Il peux �tre diff�rent pour chaque carte.
 8003770:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8003774:	6013      	str	r3, [r2, #0]
	ptFilterConfig->FilterIdLow  = 0;
 8003776:	6055      	str	r5, [r2, #4]
	ptFilterConfig->FilterMaskIdHigh = MASK_ACCEPT_B1 << 5;       // Le masque peux servir � accepter une plage d'adresse au lieu d'une adresse unique.
 8003778:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80037d4 <InitBusCAN+0x8c>
 800377c:	f8c2 9008 	str.w	r9, [r2, #8]
	ptFilterConfig->FilterMaskIdLow = 0;
 8003780:	60d5      	str	r5, [r2, #12]
	ptFilterConfig->FilterFIFOAssignment = CAN_RX_FIFO0;
 8003782:	6115      	str	r5, [r2, #16]
	ptFilterConfig->FilterActivation = ENABLE;
 8003784:	6216      	str	r6, [r2, #32]
	ptFilterConfig->SlaveStartFilterBank = 14;			 // de 0 � 27
 8003786:	f04f 080e 	mov.w	r8, #14
 800378a:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	StatusCAN = HAL_CAN_ConfigFilter(&hcan, ptFilterConfig);      // Configure le filtre comme ci-dessus
 800378e:	4f10      	ldr	r7, [pc, #64]	; (80037d0 <InitBusCAN+0x88>)
 8003790:	4611      	mov	r1, r2
 8003792:	4638      	mov	r0, r7
 8003794:	f7fc fddc 	bl	8000350 <HAL_CAN_ConfigFilter>


	//-- filtre 2 --//
	ptFilterConfig->FilterBank = 1;
 8003798:	6166      	str	r6, [r4, #20]
	ptFilterConfig->FilterMode = CAN_FILTERMODE_IDMASK;
 800379a:	61a5      	str	r5, [r4, #24]
	ptFilterConfig->FilterScale = CAN_FILTERSCALE_32BIT;
 800379c:	61e6      	str	r6, [r4, #28]
	ptFilterConfig->FilterIdHigh = ID_MSG_CONFIG_EEP << 5;           // Ici, 320 est l'adresse de la carte. Il peux �tre diff�rent pour chaque carte.
 800379e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80037a2:	6023      	str	r3, [r4, #0]
	ptFilterConfig->FilterIdLow  = 0;
 80037a4:	6065      	str	r5, [r4, #4]
	ptFilterConfig->FilterMaskIdHigh = MASK_ACCEPT_B2 << 5;       // Le masque peux servir � accepter une plage d'adresse au lieu d'une adresse unique.
 80037a6:	f8c4 9008 	str.w	r9, [r4, #8]
	ptFilterConfig->FilterMaskIdLow = 0;
 80037aa:	60e5      	str	r5, [r4, #12]
	ptFilterConfig->FilterFIFOAssignment = CAN_RX_FIFO1;
 80037ac:	6126      	str	r6, [r4, #16]
	ptFilterConfig->FilterActivation = ENABLE;
 80037ae:	6226      	str	r6, [r4, #32]
	ptFilterConfig->SlaveStartFilterBank = 14;			 // de 0 � 27
 80037b0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	StatusCAN = HAL_CAN_ConfigFilter(&hcan, ptFilterConfig);      // Configure le filtre comme ci-dessus
 80037b4:	4621      	mov	r1, r4
 80037b6:	4638      	mov	r0, r7
 80037b8:	f7fc fdca 	bl	8000350 <HAL_CAN_ConfigFilter>



	StatusCAN = HAL_CAN_Start(&hcan);
 80037bc:	4638      	mov	r0, r7
 80037be:	f7fc fe46 	bl	800044e <HAL_CAN_Start>

	//-- initialisation des notifications sous IT --//
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 80037c2:	2112      	movs	r1, #18
 80037c4:	4638      	mov	r0, r7
 80037c6:	f7fc ff10 	bl	80005ea <HAL_CAN_ActivateNotification>


}
 80037ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ce:	bf00      	nop
 80037d0:	2000041c 	.word	0x2000041c
 80037d4:	0001ff80 	.word	0x0001ff80

080037d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037dc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037de:	2400      	movs	r4, #0
 80037e0:	9404      	str	r4, [sp, #16]
 80037e2:	9405      	str	r4, [sp, #20]
 80037e4:	9406      	str	r4, [sp, #24]
 80037e6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <MX_GPIO_Init+0xd0>)
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	f042 0210 	orr.w	r2, r2, #16
 80037f0:	619a      	str	r2, [r3, #24]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	f002 0210 	and.w	r2, r2, #16
 80037f8:	9200      	str	r2, [sp, #0]
 80037fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	f042 0220 	orr.w	r2, r2, #32
 8003802:	619a      	str	r2, [r3, #24]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	f002 0220 	and.w	r2, r2, #32
 800380a:	9201      	str	r2, [sp, #4]
 800380c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	f042 0204 	orr.w	r2, r2, #4
 8003814:	619a      	str	r2, [r3, #24]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	f002 0204 	and.w	r2, r2, #4
 800381c:	9202      	str	r2, [sp, #8]
 800381e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	f042 0208 	orr.w	r2, r2, #8
 8003826:	619a      	str	r2, [r3, #24]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, GPIO_PIN_RESET);
 8003832:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80038b0 <MX_GPIO_Init+0xd8>
 8003836:	4622      	mov	r2, r4
 8003838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800383c:	4648      	mov	r0, r9
 800383e:	f7fd fa8f 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_MTRX_Pin|PAGE_MEM_Pin|LIGNE_A_Pin|LIGNE_B_Pin
 8003842:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80038b4 <MX_GPIO_Init+0xdc>
 8003846:	4622      	mov	r2, r4
 8003848:	f248 313f 	movw	r1, #33599	; 0x833f
 800384c:	4640      	mov	r0, r8
 800384e:	f7fd fa87 	bl	8000d60 <HAL_GPIO_WritePin>
                          |LIGNE_C_Pin|LIGNE_D_Pin|LATCH_MTRX_Pin|RAZ_CPT_Pin
                          |DBG1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|G1_Pin|B1_Pin|R2_Pin
 8003852:	4f16      	ldr	r7, [pc, #88]	; (80038ac <MX_GPIO_Init+0xd4>)
 8003854:	4622      	mov	r2, r4
 8003856:	f64f 7130 	movw	r1, #65328	; 0xff30
 800385a:	4638      	mov	r0, r7
 800385c:	f7fd fa80 	bl	8000d60 <HAL_GPIO_WritePin>
                          |G2_Pin|B2_Pin|CLK_MEM_Pin|DBG2_Pin
                          |R_W_Pin|OE_MEM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_BP_Pin */
  GPIO_InitStruct.Pin = LED_BP_Pin;
 8003860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003864:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003866:	2601      	movs	r6, #1
 8003868:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2502      	movs	r5, #2
 800386e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LED_BP_GPIO_Port, &GPIO_InitStruct);
 8003870:	a904      	add	r1, sp, #16
 8003872:	4648      	mov	r0, r9
 8003874:	f7fd f964 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_MTRX_Pin PAGE_MEM_Pin LIGNE_A_Pin LIGNE_B_Pin
                           LIGNE_C_Pin LIGNE_D_Pin LATCH_MTRX_Pin RAZ_CPT_Pin
                           DBG1_Pin */
  GPIO_InitStruct.Pin = CLK_MTRX_Pin|PAGE_MEM_Pin|LIGNE_A_Pin|LIGNE_B_Pin
 8003878:	f248 333f 	movw	r3, #33599	; 0x833f
 800387c:	9304      	str	r3, [sp, #16]
                          |LIGNE_C_Pin|LIGNE_D_Pin|LATCH_MTRX_Pin|RAZ_CPT_Pin
                          |DBG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003882:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	a904      	add	r1, sp, #16
 8003886:	4640      	mov	r0, r8
 8003888:	f7fd f95a 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin G1_Pin B1_Pin R2_Pin
                           G2_Pin B2_Pin CLK_MEM_Pin DBG2_Pin
                           R_W_Pin OE_MEM_Pin */
  GPIO_InitStruct.Pin = R1_Pin|G1_Pin|B1_Pin|R2_Pin
 800388c:	f64f 7330 	movw	r3, #65328	; 0xff30
 8003890:	9304      	str	r3, [sp, #16]
                          |G2_Pin|B2_Pin|CLK_MEM_Pin|DBG2_Pin
                          |R_W_Pin|OE_MEM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003892:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	a904      	add	r1, sp, #16
 800389a:	4638      	mov	r0, r7
 800389c:	f7fd f950 	bl	8000b40 <HAL_GPIO_Init>

}
 80038a0:	b009      	add	sp, #36	; 0x24
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40010c00 	.word	0x40010c00
 80038b0:	40011000 	.word	0x40011000
 80038b4:	40010800 	.word	0x40010800

080038b8 <MX_TIM1_Init>:
{
 80038b8:	b530      	push	{r4, r5, lr}
 80038ba:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038bc:	2400      	movs	r4, #0
 80038be:	9402      	str	r4, [sp, #8]
 80038c0:	9403      	str	r4, [sp, #12]
 80038c2:	9404      	str	r4, [sp, #16]
 80038c4:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c6:	9400      	str	r4, [sp, #0]
 80038c8:	9401      	str	r4, [sp, #4]
  htim1.Instance = TIM1;
 80038ca:	4d0f      	ldr	r5, [pc, #60]	; (8003908 <MX_TIM1_Init+0x50>)
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <MX_TIM1_Init+0x54>)
 80038ce:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 72;
 80038d0:	2348      	movs	r3, #72	; 0x48
 80038d2:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d4:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 1000;
 80038d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038da:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038dc:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80038de:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7fe fddb 	bl	80024a0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ee:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038f0:	a902      	add	r1, sp, #8
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7fe fed1 	bl	800269a <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f8:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fa:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038fc:	4669      	mov	r1, sp
 80038fe:	4628      	mov	r0, r5
 8003900:	f7fe fffa 	bl	80028f8 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003904:	b007      	add	sp, #28
 8003906:	bd30      	pop	{r4, r5, pc}
 8003908:	2000048c 	.word	0x2000048c
 800390c:	40012c00 	.word	0x40012c00

08003910 <MX_TIM3_Init>:
{
 8003910:	b530      	push	{r4, r5, lr}
 8003912:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003914:	2400      	movs	r4, #0
 8003916:	940a      	str	r4, [sp, #40]	; 0x28
 8003918:	940b      	str	r4, [sp, #44]	; 0x2c
 800391a:	940c      	str	r4, [sp, #48]	; 0x30
 800391c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800391e:	9408      	str	r4, [sp, #32]
 8003920:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003922:	9401      	str	r4, [sp, #4]
 8003924:	9402      	str	r4, [sp, #8]
 8003926:	9403      	str	r4, [sp, #12]
 8003928:	9404      	str	r4, [sp, #16]
 800392a:	9405      	str	r4, [sp, #20]
 800392c:	9406      	str	r4, [sp, #24]
 800392e:	9407      	str	r4, [sp, #28]
  htim3.Instance = TIM3;
 8003930:	4d19      	ldr	r5, [pc, #100]	; (8003998 <MX_TIM3_Init+0x88>)
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <MX_TIM3_Init+0x8c>)
 8003934:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 36;
 8003936:	2324      	movs	r3, #36	; 0x24
 8003938:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 254;
 800393c:	23fe      	movs	r3, #254	; 0xfe
 800393e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003940:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003942:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003944:	4628      	mov	r0, r5
 8003946:	f7fe fdab 	bl	80024a0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800394a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800394e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003950:	a90a      	add	r1, sp, #40	; 0x28
 8003952:	4628      	mov	r0, r5
 8003954:	f7fe fea1 	bl	800269a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003958:	4628      	mov	r0, r5
 800395a:	f7fe fdcd 	bl	80024f8 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395e:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003960:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003962:	a908      	add	r1, sp, #32
 8003964:	4628      	mov	r0, r5
 8003966:	f7fe ffc7 	bl	80028f8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396a:	2360      	movs	r3, #96	; 0x60
 800396c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 128;
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003972:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003974:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003976:	2208      	movs	r2, #8
 8003978:	a901      	add	r1, sp, #4
 800397a:	4628      	mov	r0, r5
 800397c:	f7fe fe1a 	bl	80025b4 <HAL_TIM_PWM_ConfigChannel>
  sConfigOCUser.OCMode     = sConfigOC.OCMode;
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <MX_TIM3_Init+0x90>)
 8003982:	9a01      	ldr	r2, [sp, #4]
 8003984:	601a      	str	r2, [r3, #0]
  sConfigOCUser.OCPolarity = sConfigOC.OCPolarity;
 8003986:	9a03      	ldr	r2, [sp, #12]
 8003988:	609a      	str	r2, [r3, #8]
  sConfigOCUser.OCFastMode = sConfigOC.OCFastMode;
 800398a:	9a05      	ldr	r2, [sp, #20]
 800398c:	611a      	str	r2, [r3, #16]
  HAL_TIM_MspPostInit(&htim3);
 800398e:	4628      	mov	r0, r5
 8003990:	f000 fa0c 	bl	8003dac <HAL_TIM_MspPostInit>
}
 8003994:	b00f      	add	sp, #60	; 0x3c
 8003996:	bd30      	pop	{r4, r5, pc}
 8003998:	20000444 	.word	0x20000444
 800399c:	40000400 	.word	0x40000400
 80039a0:	200000d4 	.word	0x200000d4

080039a4 <MX_CAN_Init>:
{
 80039a4:	b508      	push	{r3, lr}
  hcan.Instance = CAN1;
 80039a6:	480b      	ldr	r0, [pc, #44]	; (80039d4 <MX_CAN_Init+0x30>)
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <MX_CAN_Init+0x34>)
 80039aa:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 80039ac:	2309      	movs	r3, #9
 80039ae:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80039b4:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80039b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039ba:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80039bc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80039c0:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80039c2:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80039c4:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80039c6:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80039c8:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80039ca:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80039cc:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80039ce:	f7fc fc19 	bl	8000204 <HAL_CAN_Init>
}
 80039d2:	bd08      	pop	{r3, pc}
 80039d4:	2000041c 	.word	0x2000041c
 80039d8:	40006400 	.word	0x40006400

080039dc <MX_I2C1_Init>:
{
 80039dc:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80039de:	4809      	ldr	r0, [pc, #36]	; (8003a04 <MX_I2C1_Init+0x28>)
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <MX_I2C1_Init+0x2c>)
 80039e2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <MX_I2C1_Init+0x30>)
 80039e6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039e8:	2300      	movs	r3, #0
 80039ea:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039ec:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039f2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039f4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039f6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039f8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039fa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039fc:	f7fd fc48 	bl	8001290 <HAL_I2C_Init>
}
 8003a00:	bd08      	pop	{r3, pc}
 8003a02:	bf00      	nop
 8003a04:	200003c8 	.word	0x200003c8
 8003a08:	40005400 	.word	0x40005400
 8003a0c:	000186a0 	.word	0x000186a0

08003a10 <MX_TIM2_Init>:
{
 8003a10:	b530      	push	{r4, r5, lr}
 8003a12:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a14:	2500      	movs	r5, #0
 8003a16:	9502      	str	r5, [sp, #8]
 8003a18:	9503      	str	r5, [sp, #12]
 8003a1a:	9504      	str	r5, [sp, #16]
 8003a1c:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a1e:	9500      	str	r5, [sp, #0]
 8003a20:	9501      	str	r5, [sp, #4]
  htim2.Instance = TIM2;
 8003a22:	4c10      	ldr	r4, [pc, #64]	; (8003a64 <MX_TIM2_Init+0x54>)
 8003a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a28:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 36;
 8003a2a:	2324      	movs	r3, #36	; 0x24
 8003a2c:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2e:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 4;
 8003a30:	2304      	movs	r3, #4
 8003a32:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a34:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7fe fd30 	bl	80024a0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a44:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a46:	a902      	add	r1, sp, #8
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7fe fe26 	bl	800269a <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a4e:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a50:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a52:	4669      	mov	r1, sp
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7fe ff4f 	bl	80028f8 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim2);     //##################################//
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7fe fbd6 	bl	800220c <HAL_TIM_Base_Start_IT>
}
 8003a60:	b007      	add	sp, #28
 8003a62:	bd30      	pop	{r4, r5, pc}
 8003a64:	200004d4 	.word	0x200004d4

08003a68 <HAL_TIM_PeriodElapsedCallback>:
{
 8003a68:	b508      	push	{r3, lr}
	if (htim->Instance == TIM1)
 8003a6a:	6802      	ldr	r2, [r0, #0]
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d000      	beq.n	8003a74 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8003a72:	bd08      	pop	{r3, pc}
		SpgIntVolet();
 8003a74:	f7ff fbb2 	bl	80031dc <SpgIntVolet>
}
 8003a78:	e7fb      	b.n	8003a72 <HAL_TIM_PeriodElapsedCallback+0xa>
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00

08003a80 <SystemClock_Config>:
{
 8003a80:	b530      	push	{r4, r5, lr}
 8003a82:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a84:	2400      	movs	r4, #0
 8003a86:	9409      	str	r4, [sp, #36]	; 0x24
 8003a88:	940b      	str	r4, [sp, #44]	; 0x2c
 8003a8a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a8c:	9401      	str	r4, [sp, #4]
 8003a8e:	9402      	str	r4, [sp, #8]
 8003a90:	9403      	str	r4, [sp, #12]
 8003a92:	9404      	str	r4, [sp, #16]
 8003a94:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a96:	2201      	movs	r2, #1
 8003a98:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a9e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003aa0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aa2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aa4:	2502      	movs	r5, #2
 8003aa6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003aa8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003aaa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003aae:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ab0:	a806      	add	r0, sp, #24
 8003ab2:	f7fd ffef 	bl	8001a94 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ab6:	230f      	movs	r3, #15
 8003ab8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aba:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003abc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003abe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003ac2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ac4:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	a801      	add	r0, sp, #4
 8003aca:	f7fe fa21 	bl	8001f10 <HAL_RCC_ClockConfig>
}
 8003ace:	b011      	add	sp, #68	; 0x44
 8003ad0:	bd30      	pop	{r4, r5, pc}
	...

08003ad4 <main>:
{
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	b082      	sub	sp, #8
  uint8_t TempoImg = 0;
 8003ad8:	2400      	movs	r4, #0
 8003ada:	f88d 4007 	strb.w	r4, [sp, #7]
  HAL_Init();
 8003ade:	f7fc fb59 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8003ae2:	f7ff ffcd 	bl	8003a80 <SystemClock_Config>
  MX_GPIO_Init();
 8003ae6:	f7ff fe77 	bl	80037d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003aea:	f7ff fee5 	bl	80038b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003aee:	f7ff ff0f 	bl	8003910 <MX_TIM3_Init>
  MX_CAN_Init();
 8003af2:	f7ff ff57 	bl	80039a4 <MX_CAN_Init>
  MX_I2C1_Init();
 8003af6:	f7ff ff71 	bl	80039dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8003afa:	f7ff ff89 	bl	8003a10 <MX_TIM2_Init>
  HAL_InitDelayUs();
 8003afe:	f7ff facf 	bl	80030a0 <HAL_InitDelayUs>
  Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8003b02:	2108      	movs	r1, #8
 8003b04:	482c      	ldr	r0, [pc, #176]	; (8003bb8 <main+0xe4>)
 8003b06:	f7fe fe47 	bl	8002798 <HAL_TIM_PWM_Start>
  InitBusCAN(&TxHeader, TxData, &sFilterConfig);
 8003b0a:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <main+0xe8>)
 8003b0c:	492c      	ldr	r1, [pc, #176]	; (8003bc0 <main+0xec>)
 8003b0e:	482d      	ldr	r0, [pc, #180]	; (8003bc4 <main+0xf0>)
 8003b10:	f7ff fe1a 	bl	8003748 <InitBusCAN>
  HAL_Delay(50);
 8003b14:	2032      	movs	r0, #50	; 0x32
 8003b16:	f7fc fb61 	bl	80001dc <HAL_Delay>
  LecConfigEEP();
 8003b1a:	f7fe ffd3 	bl	8002ac4 <LecConfigEEP>
  uint8_t ModeEnCoursPrec = RETROPI;
 8003b1e:	4626      	mov	r6, r4
 8003b20:	e030      	b.n	8003b84 <main+0xb0>
	     AppImageFond(AppelImg.PageHaut, AppelImg.NumImage);
 8003b22:	4d29      	ldr	r5, [pc, #164]	; (8003bc8 <main+0xf4>)
 8003b24:	78a9      	ldrb	r1, [r5, #2]
 8003b26:	7868      	ldrb	r0, [r5, #1]
 8003b28:	f7ff f93a 	bl	8002da0 <AppImageFond>
	     AppelImg.MajImg = FAUX;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	702b      	strb	r3, [r5, #0]
 8003b30:	e02c      	b.n	8003b8c <main+0xb8>
	     GesBandeauInit(&TempoImg, &AppelImg);
 8003b32:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <main+0xf4>)
 8003b34:	f10d 0007 	add.w	r0, sp, #7
 8003b38:	f7ff f9f2 	bl	8002f20 <GesBandeauInit>
	     ModeEnCoursPrec = ModeEnCoursLoc;
 8003b3c:	462e      	mov	r6, r5
	if (AppelImg.Tempo2Img != 0)
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <main+0xf4>)
 8003b40:	79da      	ldrb	r2, [r3, #7]
 8003b42:	b17a      	cbz	r2, 8003b64 <main+0x90>
	     TempoImg++;
 8003b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f88d 3007 	strb.w	r3, [sp, #7]
	     if (TempoImg == AppelImg.Tempo2Img)
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d10a      	bne.n	8003b6a <main+0x96>
	         TempoImg = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f88d 3007 	strb.w	r3, [sp, #7]
	         HAL_GPIO_TogglePin (PAGE_MEM_GPIO_Port, PAGE_MEM_Pin);
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	481b      	ldr	r0, [pc, #108]	; (8003bcc <main+0xf8>)
 8003b5e:	f7fd f905 	bl	8000d6c <HAL_GPIO_TogglePin>
 8003b62:	e002      	b.n	8003b6a <main+0x96>
	     TempoImg = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f88d 3007 	strb.w	r3, [sp, #7]
	CptWDog++;
 8003b6a:	3401      	adds	r4, #1
 8003b6c:	b2e4      	uxtb	r4, r4
    if (CptWDog == TEMPO_WDOG)
 8003b6e:	2c14      	cmp	r4, #20
 8003b70:	d105      	bne.n	8003b7e <main+0xaa>
    	HAL_GPIO_TogglePin (LED_BP_GPIO_Port, LED_BP_Pin);
 8003b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b76:	4816      	ldr	r0, [pc, #88]	; (8003bd0 <main+0xfc>)
 8003b78:	f7fd f8f8 	bl	8000d6c <HAL_GPIO_TogglePin>
    	CptWDog = 0;
 8003b7c:	2400      	movs	r4, #0
  	HAL_Delay(10);
 8003b7e:	200a      	movs	r0, #10
 8003b80:	f7fc fb2c 	bl	80001dc <HAL_Delay>
	if (AppelImg.MajImg == VRAI)
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <main+0xf4>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d0ca      	beq.n	8003b22 <main+0x4e>
	GesCliBandeau (&AppelImg);
 8003b8c:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <main+0xf4>)
 8003b8e:	f7ff f959 	bl	8002e44 <GesCliBandeau>
	ModeEnCoursLoc = ModeEnCours;
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <main+0x100>)
 8003b94:	781d      	ldrb	r5, [r3, #0]
	if (ModeEnCoursLoc == RETROPI)
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	d0cb      	beq.n	8003b32 <main+0x5e>
	else if ((ModeEnCoursLoc != ModeEnCoursPrec) && (MemITTimer == 0))
 8003b9a:	42ae      	cmp	r6, r5
 8003b9c:	d0cf      	beq.n	8003b3e <main+0x6a>
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <main+0x104>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1cb      	bne.n	8003b3e <main+0x6a>
	     GesBandeauJeu(&TempoImg, ModeEnCoursLoc, &AppelImg);
 8003ba6:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <main+0xf4>)
 8003ba8:	4629      	mov	r1, r5
 8003baa:	f10d 0007 	add.w	r0, sp, #7
 8003bae:	f7ff fa1d 	bl	8002fec <GesBandeauJeu>
	     ModeEnCoursPrec = ModeEnCoursLoc;
 8003bb2:	462e      	mov	r6, r5
 8003bb4:	e7c3      	b.n	8003b3e <main+0x6a>
 8003bb6:	bf00      	nop
 8003bb8:	20000444 	.word	0x20000444
 8003bbc:	20000148 	.word	0x20000148
 8003bc0:	2000037c 	.word	0x2000037c
 8003bc4:	200003a8 	.word	0x200003a8
 8003bc8:	200003c0 	.word	0x200003c0
 8003bcc:	40010800 	.word	0x40010800
 8003bd0:	40011000 	.word	0x40011000
 8003bd4:	200000ce 	.word	0x200000ce
 8003bd8:	200000c1 	.word	0x200000c1

08003bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bdc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_MspInit+0x3c>)
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	619a      	str	r2, [r3, #24]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	f002 0201 	and.w	r2, r2, #1
 8003bee:	9200      	str	r2, [sp, #0]
 8003bf0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c04:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <HAL_MspInit+0x40>)
 8003c06:	6853      	ldr	r3, [r2, #4]
 8003c08:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c12:	b002      	add	sp, #8
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40010000 	.word	0x40010000

08003c20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003c20:	b530      	push	{r4, r5, lr}
 8003c22:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	2300      	movs	r3, #0
 8003c26:	9302      	str	r3, [sp, #8]
 8003c28:	9303      	str	r3, [sp, #12]
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	9305      	str	r3, [sp, #20]
  if(hcan->Instance==CAN1)
 8003c2e:	6802      	ldr	r2, [r0, #0]
 8003c30:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <HAL_CAN_MspInit+0x90>)
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d001      	beq.n	8003c3a <HAL_CAN_MspInit+0x1a>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003c36:	b007      	add	sp, #28
 8003c38:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003c3a:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003c44:	61da      	str	r2, [r3, #28]
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003c4c:	9200      	str	r2, [sp, #0]
 8003c4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	f042 0204 	orr.w	r2, r2, #4
 8003c56:	619a      	str	r2, [r3, #24]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c66:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c68:	2400      	movs	r4, #0
 8003c6a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6e:	4d11      	ldr	r5, [pc, #68]	; (8003cb4 <HAL_CAN_MspInit+0x94>)
 8003c70:	a902      	add	r1, sp, #8
 8003c72:	4628      	mov	r0, r5
 8003c74:	f7fc ff64 	bl	8000b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c82:	2303      	movs	r3, #3
 8003c84:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c86:	a902      	add	r1, sp, #8
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f7fc ff59 	bl	8000b40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 4, 0);
 8003c8e:	4622      	mov	r2, r4
 8003c90:	2104      	movs	r1, #4
 8003c92:	2014      	movs	r0, #20
 8003c94:	f7fc fdfe 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003c98:	2014      	movs	r0, #20
 8003c9a:	f7fc fe2f 	bl	80008fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	2105      	movs	r1, #5
 8003ca2:	2015      	movs	r0, #21
 8003ca4:	f7fc fdf6 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003ca8:	2015      	movs	r0, #21
 8003caa:	f7fc fe27 	bl	80008fc <HAL_NVIC_EnableIRQ>
}
 8003cae:	e7c2      	b.n	8003c36 <HAL_CAN_MspInit+0x16>
 8003cb0:	40006400 	.word	0x40006400
 8003cb4:	40010800 	.word	0x40010800

08003cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cb8:	b500      	push	{lr}
 8003cba:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9302      	str	r3, [sp, #8]
 8003cc0:	9303      	str	r3, [sp, #12]
 8003cc2:	9304      	str	r3, [sp, #16]
 8003cc4:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8003cc6:	6802      	ldr	r2, [r0, #0]
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_I2C_MspInit+0x5c>)
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d002      	beq.n	8003cd4 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */
  //############### ATTENTION au bug horloge I2C ##############
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cce:	b007      	add	sp, #28
 8003cd0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd4:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	619a      	str	r2, [r3, #24]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	f002 0208 	and.w	r2, r2, #8
 8003ce6:	9200      	str	r2, [sp, #0]
 8003ce8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003cf0:	61da      	str	r2, [r3, #28]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cfc:	23c0      	movs	r3, #192	; 0xc0
 8003cfe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d00:	2312      	movs	r3, #18
 8003d02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d04:	2303      	movs	r3, #3
 8003d06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d08:	a902      	add	r1, sp, #8
 8003d0a:	4803      	ldr	r0, [pc, #12]	; (8003d18 <HAL_I2C_MspInit+0x60>)
 8003d0c:	f7fc ff18 	bl	8000b40 <HAL_GPIO_Init>
}
 8003d10:	e7dd      	b.n	8003cce <HAL_I2C_MspInit+0x16>
 8003d12:	bf00      	nop
 8003d14:	40005400 	.word	0x40005400
 8003d18:	40010c00 	.word	0x40010c00

08003d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d1c:	b500      	push	{lr}
 8003d1e:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8003d20:	6803      	ldr	r3, [r0, #0]
 8003d22:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_TIM_Base_MspInit+0x84>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d008      	beq.n	8003d3a <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d018      	beq.n	8003d60 <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <HAL_TIM_Base_MspInit+0x88>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d029      	beq.n	8003d88 <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d34:	b005      	add	sp, #20
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d42:	619a      	str	r2, [r3, #24]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2102      	movs	r1, #2
 8003d52:	2019      	movs	r0, #25
 8003d54:	f7fc fd9e 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003d58:	2019      	movs	r0, #25
 8003d5a:	f7fc fdcf 	bl	80008fc <HAL_NVIC_EnableIRQ>
 8003d5e:	e7e9      	b.n	8003d34 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d60:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003d64:	69da      	ldr	r2, [r3, #28]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	61da      	str	r2, [r3, #28]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	9302      	str	r3, [sp, #8]
 8003d74:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2101      	movs	r1, #1
 8003d7a:	201c      	movs	r0, #28
 8003d7c:	f7fc fd8a 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d80:	201c      	movs	r0, #28
 8003d82:	f7fc fdbb 	bl	80008fc <HAL_NVIC_EnableIRQ>
 8003d86:	e7d5      	b.n	8003d34 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	f042 0202 	orr.w	r2, r2, #2
 8003d90:	61da      	str	r2, [r3, #28]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	9b03      	ldr	r3, [sp, #12]
}
 8003d9c:	e7ca      	b.n	8003d34 <HAL_TIM_Base_MspInit+0x18>
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dac:	b500      	push	{lr}
 8003dae:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	2300      	movs	r3, #0
 8003db2:	9302      	str	r3, [sp, #8]
 8003db4:	9303      	str	r3, [sp, #12]
 8003db6:	9304      	str	r3, [sp, #16]
 8003db8:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8003dba:	6802      	ldr	r2, [r0, #0]
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_TIM_MspPostInit+0x48>)
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d002      	beq.n	8003dc8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003dc2:	b007      	add	sp, #28
 8003dc4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc8:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	619a      	str	r2, [r3, #24]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dde:	2301      	movs	r3, #1
 8003de0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de8:	a902      	add	r1, sp, #8
 8003dea:	4803      	ldr	r0, [pc, #12]	; (8003df8 <HAL_TIM_MspPostInit+0x4c>)
 8003dec:	f7fc fea8 	bl	8000b40 <HAL_GPIO_Init>
}
 8003df0:	e7e7      	b.n	8003dc2 <HAL_TIM_MspPostInit+0x16>
 8003df2:	bf00      	nop
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40010c00 	.word	0x40010c00

08003dfc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dfc:	4770      	bx	lr

08003dfe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dfe:	e7fe      	b.n	8003dfe <HardFault_Handler>

08003e00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e00:	e7fe      	b.n	8003e00 <MemManage_Handler>

08003e02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e02:	e7fe      	b.n	8003e02 <BusFault_Handler>

08003e04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <UsageFault_Handler>

08003e06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e06:	4770      	bx	lr

08003e08 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e08:	4770      	bx	lr

08003e0a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0a:	4770      	bx	lr

08003e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e0e:	f7fc f9d3 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e12:	bd08      	pop	{r3, pc}

08003e14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003e16:	4802      	ldr	r0, [pc, #8]	; (8003e20 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8003e18:	f7fc fc04 	bl	8000624 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003e1c:	bd08      	pop	{r3, pc}
 8003e1e:	bf00      	nop
 8003e20:	2000041c 	.word	0x2000041c

08003e24 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003e26:	4802      	ldr	r0, [pc, #8]	; (8003e30 <CAN1_RX1_IRQHandler+0xc>)
 8003e28:	f7fc fbfc 	bl	8000624 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003e2c:	bd08      	pop	{r3, pc}
 8003e2e:	bf00      	nop
 8003e30:	2000041c 	.word	0x2000041c

08003e34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e36:	4802      	ldr	r0, [pc, #8]	; (8003e40 <TIM1_UP_IRQHandler+0xc>)
 8003e38:	f7fe fa3a 	bl	80022b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003e3c:	bd08      	pop	{r3, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000048c 	.word	0x2000048c

08003e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  HAL_GPIO_WritePin(DBG1_GPIO_Port,DBG1_Pin, GPIO_PIN_SET);
 8003e46:	2201      	movs	r2, #1
 8003e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e4c:	480a      	ldr	r0, [pc, #40]	; (8003e78 <TIM2_IRQHandler+0x34>)
 8003e4e:	f7fc ff87 	bl	8000d60 <HAL_GPIO_WritePin>
  /* TIM Update event */
  //if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET)
  //{
     if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET)
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <TIM2_IRQHandler+0x38>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	f012 0f01 	tst.w	r2, #1
 8003e5c:	d002      	beq.n	8003e64 <TIM2_IRQHandler+0x20>
     {
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8003e5e:	f06f 0201 	mvn.w	r2, #1
 8003e62:	611a      	str	r2, [r3, #16]
  // 					(ligne ci dessous)						   //
  //###############################################################//
  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
  SpgIntMatrice();
 8003e64:	f7ff f934 	bl	80030d0 <SpgIntMatrice>
  HAL_GPIO_WritePin(DBG1_GPIO_Port,DBG1_Pin, GPIO_PIN_RESET);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e6e:	4802      	ldr	r0, [pc, #8]	; (8003e78 <TIM2_IRQHandler+0x34>)
 8003e70:	f7fc ff76 	bl	8000d60 <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8003e74:	bd08      	pop	{r3, pc}
 8003e76:	bf00      	nop
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	200004d4 	.word	0x200004d4

08003e80 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003e80:	2001      	movs	r0, #1
 8003e82:	4770      	bx	lr

08003e84 <_kill>:

int _kill(int pid, int sig)
{
 8003e84:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003e86:	f000 f89f 	bl	8003fc8 <__errno>
 8003e8a:	2316      	movs	r3, #22
 8003e8c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e92:	bd08      	pop	{r3, pc}

08003e94 <_exit>:

void _exit (int status)
{
 8003e94:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003e96:	f04f 31ff 	mov.w	r1, #4294967295
 8003e9a:	f7ff fff3 	bl	8003e84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e9e:	e7fe      	b.n	8003e9e <_exit+0xa>

08003ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea6:	2500      	movs	r5, #0
 8003ea8:	42b5      	cmp	r5, r6
 8003eaa:	da07      	bge.n	8003ebc <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8003eac:	f3af 8000 	nop.w
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb6:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003eb8:	460c      	mov	r4, r1
 8003eba:	e7f5      	b.n	8003ea8 <_read+0x8>
	}

return len;
}
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}

08003ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	42b5      	cmp	r5, r6
 8003eca:	da05      	bge.n	8003ed8 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8003ecc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003ed0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	e7f7      	b.n	8003ec8 <_write+0x8>
	}
	return len;
}
 8003ed8:	4630      	mov	r0, r6
 8003eda:	bd70      	pop	{r4, r5, r6, pc}

08003edc <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003edc:	b508      	push	{r3, lr}
 8003ede:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ee0:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <_sbrk+0x34>)
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	b142      	cbz	r2, 8003ef8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <_sbrk+0x34>)
 8003ee8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003eea:	4403      	add	r3, r0
 8003eec:	466a      	mov	r2, sp
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d806      	bhi.n	8003f00 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <_sbrk+0x34>)
 8003ef4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003ef6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003ef8:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <_sbrk+0x34>)
 8003efa:	4906      	ldr	r1, [pc, #24]	; (8003f14 <_sbrk+0x38>)
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	e7f2      	b.n	8003ee6 <_sbrk+0xa>
		errno = ENOMEM;
 8003f00:	f000 f862 	bl	8003fc8 <__errno>
 8003f04:	230c      	movs	r3, #12
 8003f06:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	e7f3      	b.n	8003ef6 <_sbrk+0x1a>
 8003f0e:	bf00      	nop
 8003f10:	200000f0 	.word	0x200000f0
 8003f14:	20000530 	.word	0x20000530

08003f18 <_close>:

int _close(int file)
{
	return -1;
}
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	4770      	bx	lr

08003f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f22:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003f24:	2000      	movs	r0, #0
 8003f26:	4770      	bx	lr

08003f28 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003f28:	2001      	movs	r0, #1
 8003f2a:	4770      	bx	lr

08003f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	4770      	bx	lr

08003f30 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <SystemInit+0x40>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <SystemInit+0x44>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003f48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f54:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003f5c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003f5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003f62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <SystemInit+0x48>)
 8003f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	f8ff0000 	.word	0xf8ff0000
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <Reset_Handler>:
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	e003      	b.n	8003f88 <LoopCopyDataInit>

08003f80 <CopyDataInit>:
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <LoopFillZerobss+0x14>)
 8003f82:	585b      	ldr	r3, [r3, r1]
 8003f84:	5043      	str	r3, [r0, r1]
 8003f86:	3104      	adds	r1, #4

08003f88 <LoopCopyDataInit>:
 8003f88:	480a      	ldr	r0, [pc, #40]	; (8003fb4 <LoopFillZerobss+0x18>)
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <LoopFillZerobss+0x1c>)
 8003f8c:	1842      	adds	r2, r0, r1
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d3f6      	bcc.n	8003f80 <CopyDataInit>
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <LoopFillZerobss+0x20>)
 8003f94:	e002      	b.n	8003f9c <LoopFillZerobss>

08003f96 <FillZerobss>:
 8003f96:	2300      	movs	r3, #0
 8003f98:	f842 3b04 	str.w	r3, [r2], #4

08003f9c <LoopFillZerobss>:
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <LoopFillZerobss+0x24>)
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3f9      	bcc.n	8003f96 <FillZerobss>
 8003fa2:	f7ff ffc5 	bl	8003f30 <SystemInit>
 8003fa6:	f000 f815 	bl	8003fd4 <__libc_init_array>
 8003faa:	f7ff fd93 	bl	8003ad4 <main>
 8003fae:	4770      	bx	lr
 8003fb0:	080051ec 	.word	0x080051ec
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	20000094 	.word	0x20000094
 8003fbc:	20000098 	.word	0x20000098
 8003fc0:	2000052c 	.word	0x2000052c

08003fc4 <ADC1_2_IRQHandler>:
 8003fc4:	e7fe      	b.n	8003fc4 <ADC1_2_IRQHandler>
	...

08003fc8 <__errno>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <__errno+0x8>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000030 	.word	0x20000030

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	4d0c      	ldr	r5, [pc, #48]	; (800400c <__libc_init_array+0x38>)
 8003fda:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fdc:	1b64      	subs	r4, r4, r5
 8003fde:	10a4      	asrs	r4, r4, #2
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	f001 f82e 	bl	8005044 <_init>
 8003fe8:	2600      	movs	r6, #0
 8003fea:	4d0a      	ldr	r5, [pc, #40]	; (8004014 <__libc_init_array+0x40>)
 8003fec:	4c0a      	ldr	r4, [pc, #40]	; (8004018 <__libc_init_array+0x44>)
 8003fee:	1b64      	subs	r4, r4, r5
 8003ff0:	10a4      	asrs	r4, r4, #2
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	080051e4 	.word	0x080051e4
 8004010:	080051e4 	.word	0x080051e4
 8004014:	080051e4 	.word	0x080051e4
 8004018:	080051e8 	.word	0x080051e8

0800401c <memset>:
 800401c:	4603      	mov	r3, r0
 800401e:	4402      	add	r2, r0
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	f803 1b01 	strb.w	r1, [r3], #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <rand>:
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <rand+0x60>)
 800402e:	b510      	push	{r4, lr}
 8004030:	681c      	ldr	r4, [r3, #0]
 8004032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004034:	b9b3      	cbnz	r3, 8004064 <rand+0x38>
 8004036:	2018      	movs	r0, #24
 8004038:	f000 f868 	bl	800410c <malloc>
 800403c:	4602      	mov	r2, r0
 800403e:	63a0      	str	r0, [r4, #56]	; 0x38
 8004040:	b920      	cbnz	r0, 800404c <rand+0x20>
 8004042:	214e      	movs	r1, #78	; 0x4e
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <rand+0x64>)
 8004046:	4813      	ldr	r0, [pc, #76]	; (8004094 <rand+0x68>)
 8004048:	f000 f830 	bl	80040ac <__assert_func>
 800404c:	4912      	ldr	r1, [pc, #72]	; (8004098 <rand+0x6c>)
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <rand+0x70>)
 8004050:	e9c0 1300 	strd	r1, r3, [r0]
 8004054:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <rand+0x74>)
 8004056:	2100      	movs	r1, #0
 8004058:	6083      	str	r3, [r0, #8]
 800405a:	230b      	movs	r3, #11
 800405c:	8183      	strh	r3, [r0, #12]
 800405e:	2001      	movs	r0, #1
 8004060:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004064:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004066:	480f      	ldr	r0, [pc, #60]	; (80040a4 <rand+0x78>)
 8004068:	690a      	ldr	r2, [r1, #16]
 800406a:	694b      	ldr	r3, [r1, #20]
 800406c:	4350      	muls	r0, r2
 800406e:	4c0e      	ldr	r4, [pc, #56]	; (80040a8 <rand+0x7c>)
 8004070:	fb04 0003 	mla	r0, r4, r3, r0
 8004074:	fba2 3404 	umull	r3, r4, r2, r4
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	4404      	add	r4, r0
 800407c:	f144 0000 	adc.w	r0, r4, #0
 8004080:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004084:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004088:	bd10      	pop	{r4, pc}
 800408a:	bf00      	nop
 800408c:	20000030 	.word	0x20000030
 8004090:	0800509c 	.word	0x0800509c
 8004094:	080050b3 	.word	0x080050b3
 8004098:	abcd330e 	.word	0xabcd330e
 800409c:	e66d1234 	.word	0xe66d1234
 80040a0:	0005deec 	.word	0x0005deec
 80040a4:	5851f42d 	.word	0x5851f42d
 80040a8:	4c957f2d 	.word	0x4c957f2d

080040ac <__assert_func>:
 80040ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040ae:	4614      	mov	r4, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <__assert_func+0x2c>)
 80040b4:	4605      	mov	r5, r0
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68d8      	ldr	r0, [r3, #12]
 80040ba:	b14c      	cbz	r4, 80040d0 <__assert_func+0x24>
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <__assert_func+0x30>)
 80040be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040c2:	9100      	str	r1, [sp, #0]
 80040c4:	462b      	mov	r3, r5
 80040c6:	4906      	ldr	r1, [pc, #24]	; (80040e0 <__assert_func+0x34>)
 80040c8:	f000 f80e 	bl	80040e8 <fiprintf>
 80040cc:	f000 fc8a 	bl	80049e4 <abort>
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <__assert_func+0x38>)
 80040d2:	461c      	mov	r4, r3
 80040d4:	e7f3      	b.n	80040be <__assert_func+0x12>
 80040d6:	bf00      	nop
 80040d8:	20000030 	.word	0x20000030
 80040dc:	08005112 	.word	0x08005112
 80040e0:	0800511f 	.word	0x0800511f
 80040e4:	0800514d 	.word	0x0800514d

080040e8 <fiprintf>:
 80040e8:	b40e      	push	{r1, r2, r3}
 80040ea:	b503      	push	{r0, r1, lr}
 80040ec:	4601      	mov	r1, r0
 80040ee:	ab03      	add	r3, sp, #12
 80040f0:	4805      	ldr	r0, [pc, #20]	; (8004108 <fiprintf+0x20>)
 80040f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f6:	6800      	ldr	r0, [r0, #0]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	f000 f8dd 	bl	80042b8 <_vfiprintf_r>
 80040fe:	b002      	add	sp, #8
 8004100:	f85d eb04 	ldr.w	lr, [sp], #4
 8004104:	b003      	add	sp, #12
 8004106:	4770      	bx	lr
 8004108:	20000030 	.word	0x20000030

0800410c <malloc>:
 800410c:	4b02      	ldr	r3, [pc, #8]	; (8004118 <malloc+0xc>)
 800410e:	4601      	mov	r1, r0
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f000 b84f 	b.w	80041b4 <_malloc_r>
 8004116:	bf00      	nop
 8004118:	20000030 	.word	0x20000030

0800411c <_free_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4605      	mov	r5, r0
 8004120:	2900      	cmp	r1, #0
 8004122:	d043      	beq.n	80041ac <_free_r+0x90>
 8004124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004128:	1f0c      	subs	r4, r1, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfb8      	it	lt
 800412e:	18e4      	addlt	r4, r4, r3
 8004130:	f000 fe8c 	bl	8004e4c <__malloc_lock>
 8004134:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <_free_r+0x94>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	4610      	mov	r0, r2
 800413a:	b933      	cbnz	r3, 800414a <_free_r+0x2e>
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	6014      	str	r4, [r2, #0]
 8004140:	4628      	mov	r0, r5
 8004142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004146:	f000 be87 	b.w	8004e58 <__malloc_unlock>
 800414a:	42a3      	cmp	r3, r4
 800414c:	d90a      	bls.n	8004164 <_free_r+0x48>
 800414e:	6821      	ldr	r1, [r4, #0]
 8004150:	1862      	adds	r2, r4, r1
 8004152:	4293      	cmp	r3, r2
 8004154:	bf01      	itttt	eq
 8004156:	681a      	ldreq	r2, [r3, #0]
 8004158:	685b      	ldreq	r3, [r3, #4]
 800415a:	1852      	addeq	r2, r2, r1
 800415c:	6022      	streq	r2, [r4, #0]
 800415e:	6063      	str	r3, [r4, #4]
 8004160:	6004      	str	r4, [r0, #0]
 8004162:	e7ed      	b.n	8004140 <_free_r+0x24>
 8004164:	461a      	mov	r2, r3
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b10b      	cbz	r3, 800416e <_free_r+0x52>
 800416a:	42a3      	cmp	r3, r4
 800416c:	d9fa      	bls.n	8004164 <_free_r+0x48>
 800416e:	6811      	ldr	r1, [r2, #0]
 8004170:	1850      	adds	r0, r2, r1
 8004172:	42a0      	cmp	r0, r4
 8004174:	d10b      	bne.n	800418e <_free_r+0x72>
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	4401      	add	r1, r0
 800417a:	1850      	adds	r0, r2, r1
 800417c:	4283      	cmp	r3, r0
 800417e:	6011      	str	r1, [r2, #0]
 8004180:	d1de      	bne.n	8004140 <_free_r+0x24>
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4401      	add	r1, r0
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	6053      	str	r3, [r2, #4]
 800418c:	e7d8      	b.n	8004140 <_free_r+0x24>
 800418e:	d902      	bls.n	8004196 <_free_r+0x7a>
 8004190:	230c      	movs	r3, #12
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	e7d4      	b.n	8004140 <_free_r+0x24>
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	1821      	adds	r1, r4, r0
 800419a:	428b      	cmp	r3, r1
 800419c:	bf01      	itttt	eq
 800419e:	6819      	ldreq	r1, [r3, #0]
 80041a0:	685b      	ldreq	r3, [r3, #4]
 80041a2:	1809      	addeq	r1, r1, r0
 80041a4:	6021      	streq	r1, [r4, #0]
 80041a6:	6063      	str	r3, [r4, #4]
 80041a8:	6054      	str	r4, [r2, #4]
 80041aa:	e7c9      	b.n	8004140 <_free_r+0x24>
 80041ac:	bd38      	pop	{r3, r4, r5, pc}
 80041ae:	bf00      	nop
 80041b0:	200000f8 	.word	0x200000f8

080041b4 <_malloc_r>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	1ccd      	adds	r5, r1, #3
 80041b8:	f025 0503 	bic.w	r5, r5, #3
 80041bc:	3508      	adds	r5, #8
 80041be:	2d0c      	cmp	r5, #12
 80041c0:	bf38      	it	cc
 80041c2:	250c      	movcc	r5, #12
 80041c4:	2d00      	cmp	r5, #0
 80041c6:	4606      	mov	r6, r0
 80041c8:	db01      	blt.n	80041ce <_malloc_r+0x1a>
 80041ca:	42a9      	cmp	r1, r5
 80041cc:	d903      	bls.n	80041d6 <_malloc_r+0x22>
 80041ce:	230c      	movs	r3, #12
 80041d0:	6033      	str	r3, [r6, #0]
 80041d2:	2000      	movs	r0, #0
 80041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d6:	f000 fe39 	bl	8004e4c <__malloc_lock>
 80041da:	4921      	ldr	r1, [pc, #132]	; (8004260 <_malloc_r+0xac>)
 80041dc:	680a      	ldr	r2, [r1, #0]
 80041de:	4614      	mov	r4, r2
 80041e0:	b99c      	cbnz	r4, 800420a <_malloc_r+0x56>
 80041e2:	4f20      	ldr	r7, [pc, #128]	; (8004264 <_malloc_r+0xb0>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b923      	cbnz	r3, 80041f2 <_malloc_r+0x3e>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4630      	mov	r0, r6
 80041ec:	f000 fb2a 	bl	8004844 <_sbrk_r>
 80041f0:	6038      	str	r0, [r7, #0]
 80041f2:	4629      	mov	r1, r5
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 fb25 	bl	8004844 <_sbrk_r>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d123      	bne.n	8004246 <_malloc_r+0x92>
 80041fe:	230c      	movs	r3, #12
 8004200:	4630      	mov	r0, r6
 8004202:	6033      	str	r3, [r6, #0]
 8004204:	f000 fe28 	bl	8004e58 <__malloc_unlock>
 8004208:	e7e3      	b.n	80041d2 <_malloc_r+0x1e>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	1b5b      	subs	r3, r3, r5
 800420e:	d417      	bmi.n	8004240 <_malloc_r+0x8c>
 8004210:	2b0b      	cmp	r3, #11
 8004212:	d903      	bls.n	800421c <_malloc_r+0x68>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	441c      	add	r4, r3
 8004218:	6025      	str	r5, [r4, #0]
 800421a:	e004      	b.n	8004226 <_malloc_r+0x72>
 800421c:	6863      	ldr	r3, [r4, #4]
 800421e:	42a2      	cmp	r2, r4
 8004220:	bf0c      	ite	eq
 8004222:	600b      	streq	r3, [r1, #0]
 8004224:	6053      	strne	r3, [r2, #4]
 8004226:	4630      	mov	r0, r6
 8004228:	f000 fe16 	bl	8004e58 <__malloc_unlock>
 800422c:	f104 000b 	add.w	r0, r4, #11
 8004230:	1d23      	adds	r3, r4, #4
 8004232:	f020 0007 	bic.w	r0, r0, #7
 8004236:	1ac2      	subs	r2, r0, r3
 8004238:	d0cc      	beq.n	80041d4 <_malloc_r+0x20>
 800423a:	1a1b      	subs	r3, r3, r0
 800423c:	50a3      	str	r3, [r4, r2]
 800423e:	e7c9      	b.n	80041d4 <_malloc_r+0x20>
 8004240:	4622      	mov	r2, r4
 8004242:	6864      	ldr	r4, [r4, #4]
 8004244:	e7cc      	b.n	80041e0 <_malloc_r+0x2c>
 8004246:	1cc4      	adds	r4, r0, #3
 8004248:	f024 0403 	bic.w	r4, r4, #3
 800424c:	42a0      	cmp	r0, r4
 800424e:	d0e3      	beq.n	8004218 <_malloc_r+0x64>
 8004250:	1a21      	subs	r1, r4, r0
 8004252:	4630      	mov	r0, r6
 8004254:	f000 faf6 	bl	8004844 <_sbrk_r>
 8004258:	3001      	adds	r0, #1
 800425a:	d1dd      	bne.n	8004218 <_malloc_r+0x64>
 800425c:	e7cf      	b.n	80041fe <_malloc_r+0x4a>
 800425e:	bf00      	nop
 8004260:	200000f8 	.word	0x200000f8
 8004264:	200000fc 	.word	0x200000fc

08004268 <__sfputc_r>:
 8004268:	6893      	ldr	r3, [r2, #8]
 800426a:	b410      	push	{r4}
 800426c:	3b01      	subs	r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	6093      	str	r3, [r2, #8]
 8004272:	da07      	bge.n	8004284 <__sfputc_r+0x1c>
 8004274:	6994      	ldr	r4, [r2, #24]
 8004276:	42a3      	cmp	r3, r4
 8004278:	db01      	blt.n	800427e <__sfputc_r+0x16>
 800427a:	290a      	cmp	r1, #10
 800427c:	d102      	bne.n	8004284 <__sfputc_r+0x1c>
 800427e:	bc10      	pop	{r4}
 8004280:	f000 baf0 	b.w	8004864 <__swbuf_r>
 8004284:	6813      	ldr	r3, [r2, #0]
 8004286:	1c58      	adds	r0, r3, #1
 8004288:	6010      	str	r0, [r2, #0]
 800428a:	7019      	strb	r1, [r3, #0]
 800428c:	4608      	mov	r0, r1
 800428e:	bc10      	pop	{r4}
 8004290:	4770      	bx	lr

08004292 <__sfputs_r>:
 8004292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004294:	4606      	mov	r6, r0
 8004296:	460f      	mov	r7, r1
 8004298:	4614      	mov	r4, r2
 800429a:	18d5      	adds	r5, r2, r3
 800429c:	42ac      	cmp	r4, r5
 800429e:	d101      	bne.n	80042a4 <__sfputs_r+0x12>
 80042a0:	2000      	movs	r0, #0
 80042a2:	e007      	b.n	80042b4 <__sfputs_r+0x22>
 80042a4:	463a      	mov	r2, r7
 80042a6:	4630      	mov	r0, r6
 80042a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ac:	f7ff ffdc 	bl	8004268 <__sfputc_r>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d1f3      	bne.n	800429c <__sfputs_r+0xa>
 80042b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042b8 <_vfiprintf_r>:
 80042b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	460d      	mov	r5, r1
 80042be:	4614      	mov	r4, r2
 80042c0:	4698      	mov	r8, r3
 80042c2:	4606      	mov	r6, r0
 80042c4:	b09d      	sub	sp, #116	; 0x74
 80042c6:	b118      	cbz	r0, 80042d0 <_vfiprintf_r+0x18>
 80042c8:	6983      	ldr	r3, [r0, #24]
 80042ca:	b90b      	cbnz	r3, 80042d0 <_vfiprintf_r+0x18>
 80042cc:	f000 fcac 	bl	8004c28 <__sinit>
 80042d0:	4b89      	ldr	r3, [pc, #548]	; (80044f8 <_vfiprintf_r+0x240>)
 80042d2:	429d      	cmp	r5, r3
 80042d4:	d11b      	bne.n	800430e <_vfiprintf_r+0x56>
 80042d6:	6875      	ldr	r5, [r6, #4]
 80042d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042da:	07d9      	lsls	r1, r3, #31
 80042dc:	d405      	bmi.n	80042ea <_vfiprintf_r+0x32>
 80042de:	89ab      	ldrh	r3, [r5, #12]
 80042e0:	059a      	lsls	r2, r3, #22
 80042e2:	d402      	bmi.n	80042ea <_vfiprintf_r+0x32>
 80042e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042e6:	f000 fd3d 	bl	8004d64 <__retarget_lock_acquire_recursive>
 80042ea:	89ab      	ldrh	r3, [r5, #12]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	d501      	bpl.n	80042f4 <_vfiprintf_r+0x3c>
 80042f0:	692b      	ldr	r3, [r5, #16]
 80042f2:	b9eb      	cbnz	r3, 8004330 <_vfiprintf_r+0x78>
 80042f4:	4629      	mov	r1, r5
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 fb06 	bl	8004908 <__swsetup_r>
 80042fc:	b1c0      	cbz	r0, 8004330 <_vfiprintf_r+0x78>
 80042fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004300:	07dc      	lsls	r4, r3, #31
 8004302:	d50e      	bpl.n	8004322 <_vfiprintf_r+0x6a>
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	b01d      	add	sp, #116	; 0x74
 800430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430e:	4b7b      	ldr	r3, [pc, #492]	; (80044fc <_vfiprintf_r+0x244>)
 8004310:	429d      	cmp	r5, r3
 8004312:	d101      	bne.n	8004318 <_vfiprintf_r+0x60>
 8004314:	68b5      	ldr	r5, [r6, #8]
 8004316:	e7df      	b.n	80042d8 <_vfiprintf_r+0x20>
 8004318:	4b79      	ldr	r3, [pc, #484]	; (8004500 <_vfiprintf_r+0x248>)
 800431a:	429d      	cmp	r5, r3
 800431c:	bf08      	it	eq
 800431e:	68f5      	ldreq	r5, [r6, #12]
 8004320:	e7da      	b.n	80042d8 <_vfiprintf_r+0x20>
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	0598      	lsls	r0, r3, #22
 8004326:	d4ed      	bmi.n	8004304 <_vfiprintf_r+0x4c>
 8004328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800432a:	f000 fd1c 	bl	8004d66 <__retarget_lock_release_recursive>
 800432e:	e7e9      	b.n	8004304 <_vfiprintf_r+0x4c>
 8004330:	2300      	movs	r3, #0
 8004332:	9309      	str	r3, [sp, #36]	; 0x24
 8004334:	2320      	movs	r3, #32
 8004336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800433a:	2330      	movs	r3, #48	; 0x30
 800433c:	f04f 0901 	mov.w	r9, #1
 8004340:	f8cd 800c 	str.w	r8, [sp, #12]
 8004344:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004504 <_vfiprintf_r+0x24c>
 8004348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800434c:	4623      	mov	r3, r4
 800434e:	469a      	mov	sl, r3
 8004350:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004354:	b10a      	cbz	r2, 800435a <_vfiprintf_r+0xa2>
 8004356:	2a25      	cmp	r2, #37	; 0x25
 8004358:	d1f9      	bne.n	800434e <_vfiprintf_r+0x96>
 800435a:	ebba 0b04 	subs.w	fp, sl, r4
 800435e:	d00b      	beq.n	8004378 <_vfiprintf_r+0xc0>
 8004360:	465b      	mov	r3, fp
 8004362:	4622      	mov	r2, r4
 8004364:	4629      	mov	r1, r5
 8004366:	4630      	mov	r0, r6
 8004368:	f7ff ff93 	bl	8004292 <__sfputs_r>
 800436c:	3001      	adds	r0, #1
 800436e:	f000 80aa 	beq.w	80044c6 <_vfiprintf_r+0x20e>
 8004372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004374:	445a      	add	r2, fp
 8004376:	9209      	str	r2, [sp, #36]	; 0x24
 8004378:	f89a 3000 	ldrb.w	r3, [sl]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a2 	beq.w	80044c6 <_vfiprintf_r+0x20e>
 8004382:	2300      	movs	r3, #0
 8004384:	f04f 32ff 	mov.w	r2, #4294967295
 8004388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800438c:	f10a 0a01 	add.w	sl, sl, #1
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	9307      	str	r3, [sp, #28]
 8004394:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004398:	931a      	str	r3, [sp, #104]	; 0x68
 800439a:	4654      	mov	r4, sl
 800439c:	2205      	movs	r2, #5
 800439e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a2:	4858      	ldr	r0, [pc, #352]	; (8004504 <_vfiprintf_r+0x24c>)
 80043a4:	f000 fd44 	bl	8004e30 <memchr>
 80043a8:	9a04      	ldr	r2, [sp, #16]
 80043aa:	b9d8      	cbnz	r0, 80043e4 <_vfiprintf_r+0x12c>
 80043ac:	06d1      	lsls	r1, r2, #27
 80043ae:	bf44      	itt	mi
 80043b0:	2320      	movmi	r3, #32
 80043b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b6:	0713      	lsls	r3, r2, #28
 80043b8:	bf44      	itt	mi
 80043ba:	232b      	movmi	r3, #43	; 0x2b
 80043bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c0:	f89a 3000 	ldrb.w	r3, [sl]
 80043c4:	2b2a      	cmp	r3, #42	; 0x2a
 80043c6:	d015      	beq.n	80043f4 <_vfiprintf_r+0x13c>
 80043c8:	4654      	mov	r4, sl
 80043ca:	2000      	movs	r0, #0
 80043cc:	f04f 0c0a 	mov.w	ip, #10
 80043d0:	9a07      	ldr	r2, [sp, #28]
 80043d2:	4621      	mov	r1, r4
 80043d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043d8:	3b30      	subs	r3, #48	; 0x30
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d94e      	bls.n	800447c <_vfiprintf_r+0x1c4>
 80043de:	b1b0      	cbz	r0, 800440e <_vfiprintf_r+0x156>
 80043e0:	9207      	str	r2, [sp, #28]
 80043e2:	e014      	b.n	800440e <_vfiprintf_r+0x156>
 80043e4:	eba0 0308 	sub.w	r3, r0, r8
 80043e8:	fa09 f303 	lsl.w	r3, r9, r3
 80043ec:	4313      	orrs	r3, r2
 80043ee:	46a2      	mov	sl, r4
 80043f0:	9304      	str	r3, [sp, #16]
 80043f2:	e7d2      	b.n	800439a <_vfiprintf_r+0xe2>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	1d19      	adds	r1, r3, #4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	9103      	str	r1, [sp, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfbb      	ittet	lt
 8004400:	425b      	neglt	r3, r3
 8004402:	f042 0202 	orrlt.w	r2, r2, #2
 8004406:	9307      	strge	r3, [sp, #28]
 8004408:	9307      	strlt	r3, [sp, #28]
 800440a:	bfb8      	it	lt
 800440c:	9204      	strlt	r2, [sp, #16]
 800440e:	7823      	ldrb	r3, [r4, #0]
 8004410:	2b2e      	cmp	r3, #46	; 0x2e
 8004412:	d10c      	bne.n	800442e <_vfiprintf_r+0x176>
 8004414:	7863      	ldrb	r3, [r4, #1]
 8004416:	2b2a      	cmp	r3, #42	; 0x2a
 8004418:	d135      	bne.n	8004486 <_vfiprintf_r+0x1ce>
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	3402      	adds	r4, #2
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	9203      	str	r2, [sp, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	bfb8      	it	lt
 8004428:	f04f 33ff 	movlt.w	r3, #4294967295
 800442c:	9305      	str	r3, [sp, #20]
 800442e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004514 <_vfiprintf_r+0x25c>
 8004432:	2203      	movs	r2, #3
 8004434:	4650      	mov	r0, sl
 8004436:	7821      	ldrb	r1, [r4, #0]
 8004438:	f000 fcfa 	bl	8004e30 <memchr>
 800443c:	b140      	cbz	r0, 8004450 <_vfiprintf_r+0x198>
 800443e:	2340      	movs	r3, #64	; 0x40
 8004440:	eba0 000a 	sub.w	r0, r0, sl
 8004444:	fa03 f000 	lsl.w	r0, r3, r0
 8004448:	9b04      	ldr	r3, [sp, #16]
 800444a:	3401      	adds	r4, #1
 800444c:	4303      	orrs	r3, r0
 800444e:	9304      	str	r3, [sp, #16]
 8004450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004454:	2206      	movs	r2, #6
 8004456:	482c      	ldr	r0, [pc, #176]	; (8004508 <_vfiprintf_r+0x250>)
 8004458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800445c:	f000 fce8 	bl	8004e30 <memchr>
 8004460:	2800      	cmp	r0, #0
 8004462:	d03f      	beq.n	80044e4 <_vfiprintf_r+0x22c>
 8004464:	4b29      	ldr	r3, [pc, #164]	; (800450c <_vfiprintf_r+0x254>)
 8004466:	bb1b      	cbnz	r3, 80044b0 <_vfiprintf_r+0x1f8>
 8004468:	9b03      	ldr	r3, [sp, #12]
 800446a:	3307      	adds	r3, #7
 800446c:	f023 0307 	bic.w	r3, r3, #7
 8004470:	3308      	adds	r3, #8
 8004472:	9303      	str	r3, [sp, #12]
 8004474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004476:	443b      	add	r3, r7
 8004478:	9309      	str	r3, [sp, #36]	; 0x24
 800447a:	e767      	b.n	800434c <_vfiprintf_r+0x94>
 800447c:	460c      	mov	r4, r1
 800447e:	2001      	movs	r0, #1
 8004480:	fb0c 3202 	mla	r2, ip, r2, r3
 8004484:	e7a5      	b.n	80043d2 <_vfiprintf_r+0x11a>
 8004486:	2300      	movs	r3, #0
 8004488:	f04f 0c0a 	mov.w	ip, #10
 800448c:	4619      	mov	r1, r3
 800448e:	3401      	adds	r4, #1
 8004490:	9305      	str	r3, [sp, #20]
 8004492:	4620      	mov	r0, r4
 8004494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004498:	3a30      	subs	r2, #48	; 0x30
 800449a:	2a09      	cmp	r2, #9
 800449c:	d903      	bls.n	80044a6 <_vfiprintf_r+0x1ee>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0c5      	beq.n	800442e <_vfiprintf_r+0x176>
 80044a2:	9105      	str	r1, [sp, #20]
 80044a4:	e7c3      	b.n	800442e <_vfiprintf_r+0x176>
 80044a6:	4604      	mov	r4, r0
 80044a8:	2301      	movs	r3, #1
 80044aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ae:	e7f0      	b.n	8004492 <_vfiprintf_r+0x1da>
 80044b0:	ab03      	add	r3, sp, #12
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	462a      	mov	r2, r5
 80044b6:	4630      	mov	r0, r6
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <_vfiprintf_r+0x258>)
 80044ba:	a904      	add	r1, sp, #16
 80044bc:	f3af 8000 	nop.w
 80044c0:	4607      	mov	r7, r0
 80044c2:	1c78      	adds	r0, r7, #1
 80044c4:	d1d6      	bne.n	8004474 <_vfiprintf_r+0x1bc>
 80044c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044c8:	07d9      	lsls	r1, r3, #31
 80044ca:	d405      	bmi.n	80044d8 <_vfiprintf_r+0x220>
 80044cc:	89ab      	ldrh	r3, [r5, #12]
 80044ce:	059a      	lsls	r2, r3, #22
 80044d0:	d402      	bmi.n	80044d8 <_vfiprintf_r+0x220>
 80044d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044d4:	f000 fc47 	bl	8004d66 <__retarget_lock_release_recursive>
 80044d8:	89ab      	ldrh	r3, [r5, #12]
 80044da:	065b      	lsls	r3, r3, #25
 80044dc:	f53f af12 	bmi.w	8004304 <_vfiprintf_r+0x4c>
 80044e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044e2:	e711      	b.n	8004308 <_vfiprintf_r+0x50>
 80044e4:	ab03      	add	r3, sp, #12
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	462a      	mov	r2, r5
 80044ea:	4630      	mov	r0, r6
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <_vfiprintf_r+0x258>)
 80044ee:	a904      	add	r1, sp, #16
 80044f0:	f000 f882 	bl	80045f8 <_printf_i>
 80044f4:	e7e4      	b.n	80044c0 <_vfiprintf_r+0x208>
 80044f6:	bf00      	nop
 80044f8:	080051a4 	.word	0x080051a4
 80044fc:	080051c4 	.word	0x080051c4
 8004500:	08005184 	.word	0x08005184
 8004504:	0800514e 	.word	0x0800514e
 8004508:	08005158 	.word	0x08005158
 800450c:	00000000 	.word	0x00000000
 8004510:	08004293 	.word	0x08004293
 8004514:	08005154 	.word	0x08005154

08004518 <_printf_common>:
 8004518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	4616      	mov	r6, r2
 800451e:	4699      	mov	r9, r3
 8004520:	688a      	ldr	r2, [r1, #8]
 8004522:	690b      	ldr	r3, [r1, #16]
 8004524:	4607      	mov	r7, r0
 8004526:	4293      	cmp	r3, r2
 8004528:	bfb8      	it	lt
 800452a:	4613      	movlt	r3, r2
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004532:	460c      	mov	r4, r1
 8004534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004538:	b10a      	cbz	r2, 800453e <_printf_common+0x26>
 800453a:	3301      	adds	r3, #1
 800453c:	6033      	str	r3, [r6, #0]
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	0699      	lsls	r1, r3, #26
 8004542:	bf42      	ittt	mi
 8004544:	6833      	ldrmi	r3, [r6, #0]
 8004546:	3302      	addmi	r3, #2
 8004548:	6033      	strmi	r3, [r6, #0]
 800454a:	6825      	ldr	r5, [r4, #0]
 800454c:	f015 0506 	ands.w	r5, r5, #6
 8004550:	d106      	bne.n	8004560 <_printf_common+0x48>
 8004552:	f104 0a19 	add.w	sl, r4, #25
 8004556:	68e3      	ldr	r3, [r4, #12]
 8004558:	6832      	ldr	r2, [r6, #0]
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	42ab      	cmp	r3, r5
 800455e:	dc28      	bgt.n	80045b2 <_printf_common+0x9a>
 8004560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004564:	1e13      	subs	r3, r2, #0
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	bf18      	it	ne
 800456a:	2301      	movne	r3, #1
 800456c:	0692      	lsls	r2, r2, #26
 800456e:	d42d      	bmi.n	80045cc <_printf_common+0xb4>
 8004570:	4649      	mov	r1, r9
 8004572:	4638      	mov	r0, r7
 8004574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004578:	47c0      	blx	r8
 800457a:	3001      	adds	r0, #1
 800457c:	d020      	beq.n	80045c0 <_printf_common+0xa8>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	68e5      	ldr	r5, [r4, #12]
 8004582:	f003 0306 	and.w	r3, r3, #6
 8004586:	2b04      	cmp	r3, #4
 8004588:	bf18      	it	ne
 800458a:	2500      	movne	r5, #0
 800458c:	6832      	ldr	r2, [r6, #0]
 800458e:	f04f 0600 	mov.w	r6, #0
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	bf08      	it	eq
 8004596:	1aad      	subeq	r5, r5, r2
 8004598:	6922      	ldr	r2, [r4, #16]
 800459a:	bf08      	it	eq
 800459c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bfc4      	itt	gt
 80045a4:	1a9b      	subgt	r3, r3, r2
 80045a6:	18ed      	addgt	r5, r5, r3
 80045a8:	341a      	adds	r4, #26
 80045aa:	42b5      	cmp	r5, r6
 80045ac:	d11a      	bne.n	80045e4 <_printf_common+0xcc>
 80045ae:	2000      	movs	r0, #0
 80045b0:	e008      	b.n	80045c4 <_printf_common+0xac>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4652      	mov	r2, sl
 80045b6:	4649      	mov	r1, r9
 80045b8:	4638      	mov	r0, r7
 80045ba:	47c0      	blx	r8
 80045bc:	3001      	adds	r0, #1
 80045be:	d103      	bne.n	80045c8 <_printf_common+0xb0>
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c8:	3501      	adds	r5, #1
 80045ca:	e7c4      	b.n	8004556 <_printf_common+0x3e>
 80045cc:	2030      	movs	r0, #48	; 0x30
 80045ce:	18e1      	adds	r1, r4, r3
 80045d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045da:	4422      	add	r2, r4
 80045dc:	3302      	adds	r3, #2
 80045de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045e2:	e7c5      	b.n	8004570 <_printf_common+0x58>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4622      	mov	r2, r4
 80045e8:	4649      	mov	r1, r9
 80045ea:	4638      	mov	r0, r7
 80045ec:	47c0      	blx	r8
 80045ee:	3001      	adds	r0, #1
 80045f0:	d0e6      	beq.n	80045c0 <_printf_common+0xa8>
 80045f2:	3601      	adds	r6, #1
 80045f4:	e7d9      	b.n	80045aa <_printf_common+0x92>
	...

080045f8 <_printf_i>:
 80045f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	460c      	mov	r4, r1
 80045fe:	7e27      	ldrb	r7, [r4, #24]
 8004600:	4691      	mov	r9, r2
 8004602:	2f78      	cmp	r7, #120	; 0x78
 8004604:	4680      	mov	r8, r0
 8004606:	469a      	mov	sl, r3
 8004608:	990c      	ldr	r1, [sp, #48]	; 0x30
 800460a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800460e:	d807      	bhi.n	8004620 <_printf_i+0x28>
 8004610:	2f62      	cmp	r7, #98	; 0x62
 8004612:	d80a      	bhi.n	800462a <_printf_i+0x32>
 8004614:	2f00      	cmp	r7, #0
 8004616:	f000 80d9 	beq.w	80047cc <_printf_i+0x1d4>
 800461a:	2f58      	cmp	r7, #88	; 0x58
 800461c:	f000 80a4 	beq.w	8004768 <_printf_i+0x170>
 8004620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004628:	e03a      	b.n	80046a0 <_printf_i+0xa8>
 800462a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800462e:	2b15      	cmp	r3, #21
 8004630:	d8f6      	bhi.n	8004620 <_printf_i+0x28>
 8004632:	a001      	add	r0, pc, #4	; (adr r0, 8004638 <_printf_i+0x40>)
 8004634:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004638:	08004691 	.word	0x08004691
 800463c:	080046a5 	.word	0x080046a5
 8004640:	08004621 	.word	0x08004621
 8004644:	08004621 	.word	0x08004621
 8004648:	08004621 	.word	0x08004621
 800464c:	08004621 	.word	0x08004621
 8004650:	080046a5 	.word	0x080046a5
 8004654:	08004621 	.word	0x08004621
 8004658:	08004621 	.word	0x08004621
 800465c:	08004621 	.word	0x08004621
 8004660:	08004621 	.word	0x08004621
 8004664:	080047b3 	.word	0x080047b3
 8004668:	080046d5 	.word	0x080046d5
 800466c:	08004795 	.word	0x08004795
 8004670:	08004621 	.word	0x08004621
 8004674:	08004621 	.word	0x08004621
 8004678:	080047d5 	.word	0x080047d5
 800467c:	08004621 	.word	0x08004621
 8004680:	080046d5 	.word	0x080046d5
 8004684:	08004621 	.word	0x08004621
 8004688:	08004621 	.word	0x08004621
 800468c:	0800479d 	.word	0x0800479d
 8004690:	680b      	ldr	r3, [r1, #0]
 8004692:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004696:	1d1a      	adds	r2, r3, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	600a      	str	r2, [r1, #0]
 800469c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0a4      	b.n	80047ee <_printf_i+0x1f6>
 80046a4:	6825      	ldr	r5, [r4, #0]
 80046a6:	6808      	ldr	r0, [r1, #0]
 80046a8:	062e      	lsls	r6, r5, #24
 80046aa:	f100 0304 	add.w	r3, r0, #4
 80046ae:	d50a      	bpl.n	80046c6 <_printf_i+0xce>
 80046b0:	6805      	ldr	r5, [r0, #0]
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	2d00      	cmp	r5, #0
 80046b6:	da03      	bge.n	80046c0 <_printf_i+0xc8>
 80046b8:	232d      	movs	r3, #45	; 0x2d
 80046ba:	426d      	negs	r5, r5
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c0:	230a      	movs	r3, #10
 80046c2:	485e      	ldr	r0, [pc, #376]	; (800483c <_printf_i+0x244>)
 80046c4:	e019      	b.n	80046fa <_printf_i+0x102>
 80046c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046ca:	6805      	ldr	r5, [r0, #0]
 80046cc:	600b      	str	r3, [r1, #0]
 80046ce:	bf18      	it	ne
 80046d0:	b22d      	sxthne	r5, r5
 80046d2:	e7ef      	b.n	80046b4 <_printf_i+0xbc>
 80046d4:	680b      	ldr	r3, [r1, #0]
 80046d6:	6825      	ldr	r5, [r4, #0]
 80046d8:	1d18      	adds	r0, r3, #4
 80046da:	6008      	str	r0, [r1, #0]
 80046dc:	0628      	lsls	r0, r5, #24
 80046de:	d501      	bpl.n	80046e4 <_printf_i+0xec>
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	e002      	b.n	80046ea <_printf_i+0xf2>
 80046e4:	0669      	lsls	r1, r5, #25
 80046e6:	d5fb      	bpl.n	80046e0 <_printf_i+0xe8>
 80046e8:	881d      	ldrh	r5, [r3, #0]
 80046ea:	2f6f      	cmp	r7, #111	; 0x6f
 80046ec:	bf0c      	ite	eq
 80046ee:	2308      	moveq	r3, #8
 80046f0:	230a      	movne	r3, #10
 80046f2:	4852      	ldr	r0, [pc, #328]	; (800483c <_printf_i+0x244>)
 80046f4:	2100      	movs	r1, #0
 80046f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046fa:	6866      	ldr	r6, [r4, #4]
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	bfa8      	it	ge
 8004700:	6821      	ldrge	r1, [r4, #0]
 8004702:	60a6      	str	r6, [r4, #8]
 8004704:	bfa4      	itt	ge
 8004706:	f021 0104 	bicge.w	r1, r1, #4
 800470a:	6021      	strge	r1, [r4, #0]
 800470c:	b90d      	cbnz	r5, 8004712 <_printf_i+0x11a>
 800470e:	2e00      	cmp	r6, #0
 8004710:	d04d      	beq.n	80047ae <_printf_i+0x1b6>
 8004712:	4616      	mov	r6, r2
 8004714:	fbb5 f1f3 	udiv	r1, r5, r3
 8004718:	fb03 5711 	mls	r7, r3, r1, r5
 800471c:	5dc7      	ldrb	r7, [r0, r7]
 800471e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004722:	462f      	mov	r7, r5
 8004724:	42bb      	cmp	r3, r7
 8004726:	460d      	mov	r5, r1
 8004728:	d9f4      	bls.n	8004714 <_printf_i+0x11c>
 800472a:	2b08      	cmp	r3, #8
 800472c:	d10b      	bne.n	8004746 <_printf_i+0x14e>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	07df      	lsls	r7, r3, #31
 8004732:	d508      	bpl.n	8004746 <_printf_i+0x14e>
 8004734:	6923      	ldr	r3, [r4, #16]
 8004736:	6861      	ldr	r1, [r4, #4]
 8004738:	4299      	cmp	r1, r3
 800473a:	bfde      	ittt	le
 800473c:	2330      	movle	r3, #48	; 0x30
 800473e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004742:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004746:	1b92      	subs	r2, r2, r6
 8004748:	6122      	str	r2, [r4, #16]
 800474a:	464b      	mov	r3, r9
 800474c:	4621      	mov	r1, r4
 800474e:	4640      	mov	r0, r8
 8004750:	f8cd a000 	str.w	sl, [sp]
 8004754:	aa03      	add	r2, sp, #12
 8004756:	f7ff fedf 	bl	8004518 <_printf_common>
 800475a:	3001      	adds	r0, #1
 800475c:	d14c      	bne.n	80047f8 <_printf_i+0x200>
 800475e:	f04f 30ff 	mov.w	r0, #4294967295
 8004762:	b004      	add	sp, #16
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	4834      	ldr	r0, [pc, #208]	; (800483c <_printf_i+0x244>)
 800476a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800476e:	680e      	ldr	r6, [r1, #0]
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f856 5b04 	ldr.w	r5, [r6], #4
 8004776:	061f      	lsls	r7, r3, #24
 8004778:	600e      	str	r6, [r1, #0]
 800477a:	d514      	bpl.n	80047a6 <_printf_i+0x1ae>
 800477c:	07d9      	lsls	r1, r3, #31
 800477e:	bf44      	itt	mi
 8004780:	f043 0320 	orrmi.w	r3, r3, #32
 8004784:	6023      	strmi	r3, [r4, #0]
 8004786:	b91d      	cbnz	r5, 8004790 <_printf_i+0x198>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	f023 0320 	bic.w	r3, r3, #32
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	2310      	movs	r3, #16
 8004792:	e7af      	b.n	80046f4 <_printf_i+0xfc>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	f043 0320 	orr.w	r3, r3, #32
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	2378      	movs	r3, #120	; 0x78
 800479e:	4828      	ldr	r0, [pc, #160]	; (8004840 <_printf_i+0x248>)
 80047a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047a4:	e7e3      	b.n	800476e <_printf_i+0x176>
 80047a6:	065e      	lsls	r6, r3, #25
 80047a8:	bf48      	it	mi
 80047aa:	b2ad      	uxthmi	r5, r5
 80047ac:	e7e6      	b.n	800477c <_printf_i+0x184>
 80047ae:	4616      	mov	r6, r2
 80047b0:	e7bb      	b.n	800472a <_printf_i+0x132>
 80047b2:	680b      	ldr	r3, [r1, #0]
 80047b4:	6826      	ldr	r6, [r4, #0]
 80047b6:	1d1d      	adds	r5, r3, #4
 80047b8:	6960      	ldr	r0, [r4, #20]
 80047ba:	600d      	str	r5, [r1, #0]
 80047bc:	0635      	lsls	r5, r6, #24
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	d501      	bpl.n	80047c6 <_printf_i+0x1ce>
 80047c2:	6018      	str	r0, [r3, #0]
 80047c4:	e002      	b.n	80047cc <_printf_i+0x1d4>
 80047c6:	0671      	lsls	r1, r6, #25
 80047c8:	d5fb      	bpl.n	80047c2 <_printf_i+0x1ca>
 80047ca:	8018      	strh	r0, [r3, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	4616      	mov	r6, r2
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	e7ba      	b.n	800474a <_printf_i+0x152>
 80047d4:	680b      	ldr	r3, [r1, #0]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	600a      	str	r2, [r1, #0]
 80047da:	681e      	ldr	r6, [r3, #0]
 80047dc:	2100      	movs	r1, #0
 80047de:	4630      	mov	r0, r6
 80047e0:	6862      	ldr	r2, [r4, #4]
 80047e2:	f000 fb25 	bl	8004e30 <memchr>
 80047e6:	b108      	cbz	r0, 80047ec <_printf_i+0x1f4>
 80047e8:	1b80      	subs	r0, r0, r6
 80047ea:	6060      	str	r0, [r4, #4]
 80047ec:	6863      	ldr	r3, [r4, #4]
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	2300      	movs	r3, #0
 80047f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f6:	e7a8      	b.n	800474a <_printf_i+0x152>
 80047f8:	4632      	mov	r2, r6
 80047fa:	4649      	mov	r1, r9
 80047fc:	4640      	mov	r0, r8
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	47d0      	blx	sl
 8004802:	3001      	adds	r0, #1
 8004804:	d0ab      	beq.n	800475e <_printf_i+0x166>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	079b      	lsls	r3, r3, #30
 800480a:	d413      	bmi.n	8004834 <_printf_i+0x23c>
 800480c:	68e0      	ldr	r0, [r4, #12]
 800480e:	9b03      	ldr	r3, [sp, #12]
 8004810:	4298      	cmp	r0, r3
 8004812:	bfb8      	it	lt
 8004814:	4618      	movlt	r0, r3
 8004816:	e7a4      	b.n	8004762 <_printf_i+0x16a>
 8004818:	2301      	movs	r3, #1
 800481a:	4632      	mov	r2, r6
 800481c:	4649      	mov	r1, r9
 800481e:	4640      	mov	r0, r8
 8004820:	47d0      	blx	sl
 8004822:	3001      	adds	r0, #1
 8004824:	d09b      	beq.n	800475e <_printf_i+0x166>
 8004826:	3501      	adds	r5, #1
 8004828:	68e3      	ldr	r3, [r4, #12]
 800482a:	9903      	ldr	r1, [sp, #12]
 800482c:	1a5b      	subs	r3, r3, r1
 800482e:	42ab      	cmp	r3, r5
 8004830:	dcf2      	bgt.n	8004818 <_printf_i+0x220>
 8004832:	e7eb      	b.n	800480c <_printf_i+0x214>
 8004834:	2500      	movs	r5, #0
 8004836:	f104 0619 	add.w	r6, r4, #25
 800483a:	e7f5      	b.n	8004828 <_printf_i+0x230>
 800483c:	0800515f 	.word	0x0800515f
 8004840:	08005170 	.word	0x08005170

08004844 <_sbrk_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	2300      	movs	r3, #0
 8004848:	4d05      	ldr	r5, [pc, #20]	; (8004860 <_sbrk_r+0x1c>)
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	f7ff fb44 	bl	8003edc <_sbrk>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_sbrk_r+0x1a>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_sbrk_r+0x1a>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	20000528 	.word	0x20000528

08004864 <__swbuf_r>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	460e      	mov	r6, r1
 8004868:	4614      	mov	r4, r2
 800486a:	4605      	mov	r5, r0
 800486c:	b118      	cbz	r0, 8004876 <__swbuf_r+0x12>
 800486e:	6983      	ldr	r3, [r0, #24]
 8004870:	b90b      	cbnz	r3, 8004876 <__swbuf_r+0x12>
 8004872:	f000 f9d9 	bl	8004c28 <__sinit>
 8004876:	4b21      	ldr	r3, [pc, #132]	; (80048fc <__swbuf_r+0x98>)
 8004878:	429c      	cmp	r4, r3
 800487a:	d12b      	bne.n	80048d4 <__swbuf_r+0x70>
 800487c:	686c      	ldr	r4, [r5, #4]
 800487e:	69a3      	ldr	r3, [r4, #24]
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	071a      	lsls	r2, r3, #28
 8004886:	d52f      	bpl.n	80048e8 <__swbuf_r+0x84>
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	b36b      	cbz	r3, 80048e8 <__swbuf_r+0x84>
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	b2f6      	uxtb	r6, r6
 8004892:	1ac0      	subs	r0, r0, r3
 8004894:	6963      	ldr	r3, [r4, #20]
 8004896:	4637      	mov	r7, r6
 8004898:	4283      	cmp	r3, r0
 800489a:	dc04      	bgt.n	80048a6 <__swbuf_r+0x42>
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 f92e 	bl	8004b00 <_fflush_r>
 80048a4:	bb30      	cbnz	r0, 80048f4 <__swbuf_r+0x90>
 80048a6:	68a3      	ldr	r3, [r4, #8]
 80048a8:	3001      	adds	r0, #1
 80048aa:	3b01      	subs	r3, #1
 80048ac:	60a3      	str	r3, [r4, #8]
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	701e      	strb	r6, [r3, #0]
 80048b6:	6963      	ldr	r3, [r4, #20]
 80048b8:	4283      	cmp	r3, r0
 80048ba:	d004      	beq.n	80048c6 <__swbuf_r+0x62>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	07db      	lsls	r3, r3, #31
 80048c0:	d506      	bpl.n	80048d0 <__swbuf_r+0x6c>
 80048c2:	2e0a      	cmp	r6, #10
 80048c4:	d104      	bne.n	80048d0 <__swbuf_r+0x6c>
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 f919 	bl	8004b00 <_fflush_r>
 80048ce:	b988      	cbnz	r0, 80048f4 <__swbuf_r+0x90>
 80048d0:	4638      	mov	r0, r7
 80048d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <__swbuf_r+0x9c>)
 80048d6:	429c      	cmp	r4, r3
 80048d8:	d101      	bne.n	80048de <__swbuf_r+0x7a>
 80048da:	68ac      	ldr	r4, [r5, #8]
 80048dc:	e7cf      	b.n	800487e <__swbuf_r+0x1a>
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <__swbuf_r+0xa0>)
 80048e0:	429c      	cmp	r4, r3
 80048e2:	bf08      	it	eq
 80048e4:	68ec      	ldreq	r4, [r5, #12]
 80048e6:	e7ca      	b.n	800487e <__swbuf_r+0x1a>
 80048e8:	4621      	mov	r1, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 f80c 	bl	8004908 <__swsetup_r>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d0cb      	beq.n	800488c <__swbuf_r+0x28>
 80048f4:	f04f 37ff 	mov.w	r7, #4294967295
 80048f8:	e7ea      	b.n	80048d0 <__swbuf_r+0x6c>
 80048fa:	bf00      	nop
 80048fc:	080051a4 	.word	0x080051a4
 8004900:	080051c4 	.word	0x080051c4
 8004904:	08005184 	.word	0x08005184

08004908 <__swsetup_r>:
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <__swsetup_r+0xcc>)
 800490a:	b570      	push	{r4, r5, r6, lr}
 800490c:	681d      	ldr	r5, [r3, #0]
 800490e:	4606      	mov	r6, r0
 8004910:	460c      	mov	r4, r1
 8004912:	b125      	cbz	r5, 800491e <__swsetup_r+0x16>
 8004914:	69ab      	ldr	r3, [r5, #24]
 8004916:	b913      	cbnz	r3, 800491e <__swsetup_r+0x16>
 8004918:	4628      	mov	r0, r5
 800491a:	f000 f985 	bl	8004c28 <__sinit>
 800491e:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <__swsetup_r+0xd0>)
 8004920:	429c      	cmp	r4, r3
 8004922:	d10f      	bne.n	8004944 <__swsetup_r+0x3c>
 8004924:	686c      	ldr	r4, [r5, #4]
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800492c:	0719      	lsls	r1, r3, #28
 800492e:	d42c      	bmi.n	800498a <__swsetup_r+0x82>
 8004930:	06dd      	lsls	r5, r3, #27
 8004932:	d411      	bmi.n	8004958 <__swsetup_r+0x50>
 8004934:	2309      	movs	r3, #9
 8004936:	6033      	str	r3, [r6, #0]
 8004938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	e03e      	b.n	80049c2 <__swsetup_r+0xba>
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <__swsetup_r+0xd4>)
 8004946:	429c      	cmp	r4, r3
 8004948:	d101      	bne.n	800494e <__swsetup_r+0x46>
 800494a:	68ac      	ldr	r4, [r5, #8]
 800494c:	e7eb      	b.n	8004926 <__swsetup_r+0x1e>
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <__swsetup_r+0xd8>)
 8004950:	429c      	cmp	r4, r3
 8004952:	bf08      	it	eq
 8004954:	68ec      	ldreq	r4, [r5, #12]
 8004956:	e7e6      	b.n	8004926 <__swsetup_r+0x1e>
 8004958:	0758      	lsls	r0, r3, #29
 800495a:	d512      	bpl.n	8004982 <__swsetup_r+0x7a>
 800495c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800495e:	b141      	cbz	r1, 8004972 <__swsetup_r+0x6a>
 8004960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004964:	4299      	cmp	r1, r3
 8004966:	d002      	beq.n	800496e <__swsetup_r+0x66>
 8004968:	4630      	mov	r0, r6
 800496a:	f7ff fbd7 	bl	800411c <_free_r>
 800496e:	2300      	movs	r3, #0
 8004970:	6363      	str	r3, [r4, #52]	; 0x34
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	2300      	movs	r3, #0
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f043 0308 	orr.w	r3, r3, #8
 8004988:	81a3      	strh	r3, [r4, #12]
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	b94b      	cbnz	r3, 80049a2 <__swsetup_r+0x9a>
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004998:	d003      	beq.n	80049a2 <__swsetup_r+0x9a>
 800499a:	4621      	mov	r1, r4
 800499c:	4630      	mov	r0, r6
 800499e:	f000 fa07 	bl	8004db0 <__smakebuf_r>
 80049a2:	89a0      	ldrh	r0, [r4, #12]
 80049a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049a8:	f010 0301 	ands.w	r3, r0, #1
 80049ac:	d00a      	beq.n	80049c4 <__swsetup_r+0xbc>
 80049ae:	2300      	movs	r3, #0
 80049b0:	60a3      	str	r3, [r4, #8]
 80049b2:	6963      	ldr	r3, [r4, #20]
 80049b4:	425b      	negs	r3, r3
 80049b6:	61a3      	str	r3, [r4, #24]
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	b943      	cbnz	r3, 80049ce <__swsetup_r+0xc6>
 80049bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049c0:	d1ba      	bne.n	8004938 <__swsetup_r+0x30>
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	0781      	lsls	r1, r0, #30
 80049c6:	bf58      	it	pl
 80049c8:	6963      	ldrpl	r3, [r4, #20]
 80049ca:	60a3      	str	r3, [r4, #8]
 80049cc:	e7f4      	b.n	80049b8 <__swsetup_r+0xb0>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e7f7      	b.n	80049c2 <__swsetup_r+0xba>
 80049d2:	bf00      	nop
 80049d4:	20000030 	.word	0x20000030
 80049d8:	080051a4 	.word	0x080051a4
 80049dc:	080051c4 	.word	0x080051c4
 80049e0:	08005184 	.word	0x08005184

080049e4 <abort>:
 80049e4:	2006      	movs	r0, #6
 80049e6:	b508      	push	{r3, lr}
 80049e8:	f000 fa64 	bl	8004eb4 <raise>
 80049ec:	2001      	movs	r0, #1
 80049ee:	f7ff fa51 	bl	8003e94 <_exit>
	...

080049f4 <__sflush_r>:
 80049f4:	898a      	ldrh	r2, [r1, #12]
 80049f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fa:	4605      	mov	r5, r0
 80049fc:	0710      	lsls	r0, r2, #28
 80049fe:	460c      	mov	r4, r1
 8004a00:	d458      	bmi.n	8004ab4 <__sflush_r+0xc0>
 8004a02:	684b      	ldr	r3, [r1, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dc05      	bgt.n	8004a14 <__sflush_r+0x20>
 8004a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	dc02      	bgt.n	8004a14 <__sflush_r+0x20>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d0f9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a20:	682f      	ldr	r7, [r5, #0]
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	d032      	beq.n	8004a8c <__sflush_r+0x98>
 8004a26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	075a      	lsls	r2, r3, #29
 8004a2c:	d505      	bpl.n	8004a3a <__sflush_r+0x46>
 8004a2e:	6863      	ldr	r3, [r4, #4]
 8004a30:	1ac0      	subs	r0, r0, r3
 8004a32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a34:	b10b      	cbz	r3, 8004a3a <__sflush_r+0x46>
 8004a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a38:	1ac0      	subs	r0, r0, r3
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a40:	4628      	mov	r0, r5
 8004a42:	6a21      	ldr	r1, [r4, #32]
 8004a44:	47b0      	blx	r6
 8004a46:	1c43      	adds	r3, r0, #1
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	d106      	bne.n	8004a5a <__sflush_r+0x66>
 8004a4c:	6829      	ldr	r1, [r5, #0]
 8004a4e:	291d      	cmp	r1, #29
 8004a50:	d82c      	bhi.n	8004aac <__sflush_r+0xb8>
 8004a52:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <__sflush_r+0x108>)
 8004a54:	40ca      	lsrs	r2, r1
 8004a56:	07d6      	lsls	r6, r2, #31
 8004a58:	d528      	bpl.n	8004aac <__sflush_r+0xb8>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	6062      	str	r2, [r4, #4]
 8004a5e:	6922      	ldr	r2, [r4, #16]
 8004a60:	04d9      	lsls	r1, r3, #19
 8004a62:	6022      	str	r2, [r4, #0]
 8004a64:	d504      	bpl.n	8004a70 <__sflush_r+0x7c>
 8004a66:	1c42      	adds	r2, r0, #1
 8004a68:	d101      	bne.n	8004a6e <__sflush_r+0x7a>
 8004a6a:	682b      	ldr	r3, [r5, #0]
 8004a6c:	b903      	cbnz	r3, 8004a70 <__sflush_r+0x7c>
 8004a6e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a72:	602f      	str	r7, [r5, #0]
 8004a74:	2900      	cmp	r1, #0
 8004a76:	d0ca      	beq.n	8004a0e <__sflush_r+0x1a>
 8004a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a7c:	4299      	cmp	r1, r3
 8004a7e:	d002      	beq.n	8004a86 <__sflush_r+0x92>
 8004a80:	4628      	mov	r0, r5
 8004a82:	f7ff fb4b 	bl	800411c <_free_r>
 8004a86:	2000      	movs	r0, #0
 8004a88:	6360      	str	r0, [r4, #52]	; 0x34
 8004a8a:	e7c1      	b.n	8004a10 <__sflush_r+0x1c>
 8004a8c:	6a21      	ldr	r1, [r4, #32]
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b0      	blx	r6
 8004a94:	1c41      	adds	r1, r0, #1
 8004a96:	d1c7      	bne.n	8004a28 <__sflush_r+0x34>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0c4      	beq.n	8004a28 <__sflush_r+0x34>
 8004a9e:	2b1d      	cmp	r3, #29
 8004aa0:	d001      	beq.n	8004aa6 <__sflush_r+0xb2>
 8004aa2:	2b16      	cmp	r3, #22
 8004aa4:	d101      	bne.n	8004aaa <__sflush_r+0xb6>
 8004aa6:	602f      	str	r7, [r5, #0]
 8004aa8:	e7b1      	b.n	8004a0e <__sflush_r+0x1a>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	e7ad      	b.n	8004a10 <__sflush_r+0x1c>
 8004ab4:	690f      	ldr	r7, [r1, #16]
 8004ab6:	2f00      	cmp	r7, #0
 8004ab8:	d0a9      	beq.n	8004a0e <__sflush_r+0x1a>
 8004aba:	0793      	lsls	r3, r2, #30
 8004abc:	bf18      	it	ne
 8004abe:	2300      	movne	r3, #0
 8004ac0:	680e      	ldr	r6, [r1, #0]
 8004ac2:	bf08      	it	eq
 8004ac4:	694b      	ldreq	r3, [r1, #20]
 8004ac6:	eba6 0807 	sub.w	r8, r6, r7
 8004aca:	600f      	str	r7, [r1, #0]
 8004acc:	608b      	str	r3, [r1, #8]
 8004ace:	f1b8 0f00 	cmp.w	r8, #0
 8004ad2:	dd9c      	ble.n	8004a0e <__sflush_r+0x1a>
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	463a      	mov	r2, r7
 8004ad8:	4628      	mov	r0, r5
 8004ada:	6a21      	ldr	r1, [r4, #32]
 8004adc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ade:	47b0      	blx	r6
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	dc06      	bgt.n	8004af2 <__sflush_r+0xfe>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	e78e      	b.n	8004a10 <__sflush_r+0x1c>
 8004af2:	4407      	add	r7, r0
 8004af4:	eba8 0800 	sub.w	r8, r8, r0
 8004af8:	e7e9      	b.n	8004ace <__sflush_r+0xda>
 8004afa:	bf00      	nop
 8004afc:	20400001 	.word	0x20400001

08004b00 <_fflush_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	690b      	ldr	r3, [r1, #16]
 8004b04:	4605      	mov	r5, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	b913      	cbnz	r3, 8004b10 <_fflush_r+0x10>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	b118      	cbz	r0, 8004b1a <_fflush_r+0x1a>
 8004b12:	6983      	ldr	r3, [r0, #24]
 8004b14:	b90b      	cbnz	r3, 8004b1a <_fflush_r+0x1a>
 8004b16:	f000 f887 	bl	8004c28 <__sinit>
 8004b1a:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <_fflush_r+0x6c>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d11b      	bne.n	8004b58 <_fflush_r+0x58>
 8004b20:	686c      	ldr	r4, [r5, #4]
 8004b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ef      	beq.n	8004b0a <_fflush_r+0xa>
 8004b2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b2c:	07d0      	lsls	r0, r2, #31
 8004b2e:	d404      	bmi.n	8004b3a <_fflush_r+0x3a>
 8004b30:	0599      	lsls	r1, r3, #22
 8004b32:	d402      	bmi.n	8004b3a <_fflush_r+0x3a>
 8004b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b36:	f000 f915 	bl	8004d64 <__retarget_lock_acquire_recursive>
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	f7ff ff59 	bl	80049f4 <__sflush_r>
 8004b42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b44:	4605      	mov	r5, r0
 8004b46:	07da      	lsls	r2, r3, #31
 8004b48:	d4e0      	bmi.n	8004b0c <_fflush_r+0xc>
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	059b      	lsls	r3, r3, #22
 8004b4e:	d4dd      	bmi.n	8004b0c <_fflush_r+0xc>
 8004b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b52:	f000 f908 	bl	8004d66 <__retarget_lock_release_recursive>
 8004b56:	e7d9      	b.n	8004b0c <_fflush_r+0xc>
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <_fflush_r+0x70>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d101      	bne.n	8004b62 <_fflush_r+0x62>
 8004b5e:	68ac      	ldr	r4, [r5, #8]
 8004b60:	e7df      	b.n	8004b22 <_fflush_r+0x22>
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <_fflush_r+0x74>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	bf08      	it	eq
 8004b68:	68ec      	ldreq	r4, [r5, #12]
 8004b6a:	e7da      	b.n	8004b22 <_fflush_r+0x22>
 8004b6c:	080051a4 	.word	0x080051a4
 8004b70:	080051c4 	.word	0x080051c4
 8004b74:	08005184 	.word	0x08005184

08004b78 <std>:
 8004b78:	2300      	movs	r3, #0
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b86:	6083      	str	r3, [r0, #8]
 8004b88:	8181      	strh	r1, [r0, #12]
 8004b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b8c:	81c2      	strh	r2, [r0, #14]
 8004b8e:	6183      	str	r3, [r0, #24]
 8004b90:	4619      	mov	r1, r3
 8004b92:	2208      	movs	r2, #8
 8004b94:	305c      	adds	r0, #92	; 0x5c
 8004b96:	f7ff fa41 	bl	800401c <memset>
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <std+0x38>)
 8004b9c:	6224      	str	r4, [r4, #32]
 8004b9e:	6263      	str	r3, [r4, #36]	; 0x24
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <std+0x3c>)
 8004ba2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <std+0x40>)
 8004ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <std+0x44>)
 8004baa:	6323      	str	r3, [r4, #48]	; 0x30
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	bf00      	nop
 8004bb0:	08004eed 	.word	0x08004eed
 8004bb4:	08004f0f 	.word	0x08004f0f
 8004bb8:	08004f47 	.word	0x08004f47
 8004bbc:	08004f6b 	.word	0x08004f6b

08004bc0 <_cleanup_r>:
 8004bc0:	4901      	ldr	r1, [pc, #4]	; (8004bc8 <_cleanup_r+0x8>)
 8004bc2:	f000 b8af 	b.w	8004d24 <_fwalk_reent>
 8004bc6:	bf00      	nop
 8004bc8:	08004b01 	.word	0x08004b01

08004bcc <__sfmoreglue>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	2568      	movs	r5, #104	; 0x68
 8004bd0:	1e4a      	subs	r2, r1, #1
 8004bd2:	4355      	muls	r5, r2
 8004bd4:	460e      	mov	r6, r1
 8004bd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bda:	f7ff faeb 	bl	80041b4 <_malloc_r>
 8004bde:	4604      	mov	r4, r0
 8004be0:	b140      	cbz	r0, 8004bf4 <__sfmoreglue+0x28>
 8004be2:	2100      	movs	r1, #0
 8004be4:	e9c0 1600 	strd	r1, r6, [r0]
 8004be8:	300c      	adds	r0, #12
 8004bea:	60a0      	str	r0, [r4, #8]
 8004bec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bf0:	f7ff fa14 	bl	800401c <memset>
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}

08004bf8 <__sfp_lock_acquire>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__sfp_lock_acquire+0x8>)
 8004bfa:	f000 b8b3 	b.w	8004d64 <__retarget_lock_acquire_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20000524 	.word	0x20000524

08004c04 <__sfp_lock_release>:
 8004c04:	4801      	ldr	r0, [pc, #4]	; (8004c0c <__sfp_lock_release+0x8>)
 8004c06:	f000 b8ae 	b.w	8004d66 <__retarget_lock_release_recursive>
 8004c0a:	bf00      	nop
 8004c0c:	20000524 	.word	0x20000524

08004c10 <__sinit_lock_acquire>:
 8004c10:	4801      	ldr	r0, [pc, #4]	; (8004c18 <__sinit_lock_acquire+0x8>)
 8004c12:	f000 b8a7 	b.w	8004d64 <__retarget_lock_acquire_recursive>
 8004c16:	bf00      	nop
 8004c18:	2000051f 	.word	0x2000051f

08004c1c <__sinit_lock_release>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__sinit_lock_release+0x8>)
 8004c1e:	f000 b8a2 	b.w	8004d66 <__retarget_lock_release_recursive>
 8004c22:	bf00      	nop
 8004c24:	2000051f 	.word	0x2000051f

08004c28 <__sinit>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	f7ff fff0 	bl	8004c10 <__sinit_lock_acquire>
 8004c30:	69a3      	ldr	r3, [r4, #24]
 8004c32:	b11b      	cbz	r3, 8004c3c <__sinit+0x14>
 8004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c38:	f7ff bff0 	b.w	8004c1c <__sinit_lock_release>
 8004c3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c40:	6523      	str	r3, [r4, #80]	; 0x50
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <__sinit+0x68>)
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <__sinit+0x6c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	bf08      	it	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	4620      	mov	r0, r4
 8004c52:	bf08      	it	eq
 8004c54:	61a3      	streq	r3, [r4, #24]
 8004c56:	f000 f81f 	bl	8004c98 <__sfp>
 8004c5a:	6060      	str	r0, [r4, #4]
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 f81b 	bl	8004c98 <__sfp>
 8004c62:	60a0      	str	r0, [r4, #8]
 8004c64:	4620      	mov	r0, r4
 8004c66:	f000 f817 	bl	8004c98 <__sfp>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	60e0      	str	r0, [r4, #12]
 8004c70:	6860      	ldr	r0, [r4, #4]
 8004c72:	f7ff ff81 	bl	8004b78 <std>
 8004c76:	2201      	movs	r2, #1
 8004c78:	2109      	movs	r1, #9
 8004c7a:	68a0      	ldr	r0, [r4, #8]
 8004c7c:	f7ff ff7c 	bl	8004b78 <std>
 8004c80:	2202      	movs	r2, #2
 8004c82:	2112      	movs	r1, #18
 8004c84:	68e0      	ldr	r0, [r4, #12]
 8004c86:	f7ff ff77 	bl	8004b78 <std>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61a3      	str	r3, [r4, #24]
 8004c8e:	e7d1      	b.n	8004c34 <__sinit+0xc>
 8004c90:	08005098 	.word	0x08005098
 8004c94:	08004bc1 	.word	0x08004bc1

08004c98 <__sfp>:
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9a:	4607      	mov	r7, r0
 8004c9c:	f7ff ffac 	bl	8004bf8 <__sfp_lock_acquire>
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <__sfp+0x84>)
 8004ca2:	681e      	ldr	r6, [r3, #0]
 8004ca4:	69b3      	ldr	r3, [r6, #24]
 8004ca6:	b913      	cbnz	r3, 8004cae <__sfp+0x16>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f7ff ffbd 	bl	8004c28 <__sinit>
 8004cae:	3648      	adds	r6, #72	; 0x48
 8004cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	d503      	bpl.n	8004cc0 <__sfp+0x28>
 8004cb8:	6833      	ldr	r3, [r6, #0]
 8004cba:	b30b      	cbz	r3, 8004d00 <__sfp+0x68>
 8004cbc:	6836      	ldr	r6, [r6, #0]
 8004cbe:	e7f7      	b.n	8004cb0 <__sfp+0x18>
 8004cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cc4:	b9d5      	cbnz	r5, 8004cfc <__sfp+0x64>
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <__sfp+0x88>)
 8004cc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ccc:	60e3      	str	r3, [r4, #12]
 8004cce:	6665      	str	r5, [r4, #100]	; 0x64
 8004cd0:	f000 f847 	bl	8004d62 <__retarget_lock_init_recursive>
 8004cd4:	f7ff ff96 	bl	8004c04 <__sfp_lock_release>
 8004cd8:	2208      	movs	r2, #8
 8004cda:	4629      	mov	r1, r5
 8004cdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ce0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ce4:	6025      	str	r5, [r4, #0]
 8004ce6:	61a5      	str	r5, [r4, #24]
 8004ce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cec:	f7ff f996 	bl	800401c <memset>
 8004cf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004cf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfc:	3468      	adds	r4, #104	; 0x68
 8004cfe:	e7d9      	b.n	8004cb4 <__sfp+0x1c>
 8004d00:	2104      	movs	r1, #4
 8004d02:	4638      	mov	r0, r7
 8004d04:	f7ff ff62 	bl	8004bcc <__sfmoreglue>
 8004d08:	4604      	mov	r4, r0
 8004d0a:	6030      	str	r0, [r6, #0]
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d1d5      	bne.n	8004cbc <__sfp+0x24>
 8004d10:	f7ff ff78 	bl	8004c04 <__sfp_lock_release>
 8004d14:	230c      	movs	r3, #12
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	e7ee      	b.n	8004cf8 <__sfp+0x60>
 8004d1a:	bf00      	nop
 8004d1c:	08005098 	.word	0x08005098
 8004d20:	ffff0001 	.word	0xffff0001

08004d24 <_fwalk_reent>:
 8004d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d28:	4606      	mov	r6, r0
 8004d2a:	4688      	mov	r8, r1
 8004d2c:	2700      	movs	r7, #0
 8004d2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d36:	f1b9 0901 	subs.w	r9, r9, #1
 8004d3a:	d505      	bpl.n	8004d48 <_fwalk_reent+0x24>
 8004d3c:	6824      	ldr	r4, [r4, #0]
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	d1f7      	bne.n	8004d32 <_fwalk_reent+0xe>
 8004d42:	4638      	mov	r0, r7
 8004d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d48:	89ab      	ldrh	r3, [r5, #12]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d907      	bls.n	8004d5e <_fwalk_reent+0x3a>
 8004d4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d52:	3301      	adds	r3, #1
 8004d54:	d003      	beq.n	8004d5e <_fwalk_reent+0x3a>
 8004d56:	4629      	mov	r1, r5
 8004d58:	4630      	mov	r0, r6
 8004d5a:	47c0      	blx	r8
 8004d5c:	4307      	orrs	r7, r0
 8004d5e:	3568      	adds	r5, #104	; 0x68
 8004d60:	e7e9      	b.n	8004d36 <_fwalk_reent+0x12>

08004d62 <__retarget_lock_init_recursive>:
 8004d62:	4770      	bx	lr

08004d64 <__retarget_lock_acquire_recursive>:
 8004d64:	4770      	bx	lr

08004d66 <__retarget_lock_release_recursive>:
 8004d66:	4770      	bx	lr

08004d68 <__swhatbuf_r>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	460e      	mov	r6, r1
 8004d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d70:	4614      	mov	r4, r2
 8004d72:	2900      	cmp	r1, #0
 8004d74:	461d      	mov	r5, r3
 8004d76:	b096      	sub	sp, #88	; 0x58
 8004d78:	da07      	bge.n	8004d8a <__swhatbuf_r+0x22>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	89b3      	ldrh	r3, [r6, #12]
 8004d80:	061a      	lsls	r2, r3, #24
 8004d82:	d410      	bmi.n	8004da6 <__swhatbuf_r+0x3e>
 8004d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d88:	e00e      	b.n	8004da8 <__swhatbuf_r+0x40>
 8004d8a:	466a      	mov	r2, sp
 8004d8c:	f000 f914 	bl	8004fb8 <_fstat_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	dbf2      	blt.n	8004d7a <__swhatbuf_r+0x12>
 8004d94:	9a01      	ldr	r2, [sp, #4]
 8004d96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d9e:	425a      	negs	r2, r3
 8004da0:	415a      	adcs	r2, r3
 8004da2:	602a      	str	r2, [r5, #0]
 8004da4:	e7ee      	b.n	8004d84 <__swhatbuf_r+0x1c>
 8004da6:	2340      	movs	r3, #64	; 0x40
 8004da8:	2000      	movs	r0, #0
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	b016      	add	sp, #88	; 0x58
 8004dae:	bd70      	pop	{r4, r5, r6, pc}

08004db0 <__smakebuf_r>:
 8004db0:	898b      	ldrh	r3, [r1, #12]
 8004db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004db4:	079d      	lsls	r5, r3, #30
 8004db6:	4606      	mov	r6, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	d507      	bpl.n	8004dcc <__smakebuf_r+0x1c>
 8004dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	6123      	str	r3, [r4, #16]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	6163      	str	r3, [r4, #20]
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	466a      	mov	r2, sp
 8004dce:	ab01      	add	r3, sp, #4
 8004dd0:	f7ff ffca 	bl	8004d68 <__swhatbuf_r>
 8004dd4:	9900      	ldr	r1, [sp, #0]
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f7ff f9eb 	bl	80041b4 <_malloc_r>
 8004dde:	b948      	cbnz	r0, 8004df4 <__smakebuf_r+0x44>
 8004de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de4:	059a      	lsls	r2, r3, #22
 8004de6:	d4ef      	bmi.n	8004dc8 <__smakebuf_r+0x18>
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	f043 0302 	orr.w	r3, r3, #2
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	e7e3      	b.n	8004dbc <__smakebuf_r+0xc>
 8004df4:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <__smakebuf_r+0x7c>)
 8004df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	6020      	str	r0, [r4, #0]
 8004dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e00:	81a3      	strh	r3, [r4, #12]
 8004e02:	9b00      	ldr	r3, [sp, #0]
 8004e04:	6120      	str	r0, [r4, #16]
 8004e06:	6163      	str	r3, [r4, #20]
 8004e08:	9b01      	ldr	r3, [sp, #4]
 8004e0a:	b15b      	cbz	r3, 8004e24 <__smakebuf_r+0x74>
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e12:	f000 f8e3 	bl	8004fdc <_isatty_r>
 8004e16:	b128      	cbz	r0, 8004e24 <__smakebuf_r+0x74>
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	f023 0303 	bic.w	r3, r3, #3
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	89a0      	ldrh	r0, [r4, #12]
 8004e26:	4305      	orrs	r5, r0
 8004e28:	81a5      	strh	r5, [r4, #12]
 8004e2a:	e7cd      	b.n	8004dc8 <__smakebuf_r+0x18>
 8004e2c:	08004bc1 	.word	0x08004bc1

08004e30 <memchr>:
 8004e30:	4603      	mov	r3, r0
 8004e32:	b510      	push	{r4, lr}
 8004e34:	b2c9      	uxtb	r1, r1
 8004e36:	4402      	add	r2, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	d101      	bne.n	8004e42 <memchr+0x12>
 8004e3e:	2000      	movs	r0, #0
 8004e40:	e003      	b.n	8004e4a <memchr+0x1a>
 8004e42:	7804      	ldrb	r4, [r0, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	428c      	cmp	r4, r1
 8004e48:	d1f6      	bne.n	8004e38 <memchr+0x8>
 8004e4a:	bd10      	pop	{r4, pc}

08004e4c <__malloc_lock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__malloc_lock+0x8>)
 8004e4e:	f7ff bf89 	b.w	8004d64 <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000520 	.word	0x20000520

08004e58 <__malloc_unlock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__malloc_unlock+0x8>)
 8004e5a:	f7ff bf84 	b.w	8004d66 <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000520 	.word	0x20000520

08004e64 <_raise_r>:
 8004e64:	291f      	cmp	r1, #31
 8004e66:	b538      	push	{r3, r4, r5, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	d904      	bls.n	8004e78 <_raise_r+0x14>
 8004e6e:	2316      	movs	r3, #22
 8004e70:	6003      	str	r3, [r0, #0]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e7a:	b112      	cbz	r2, 8004e82 <_raise_r+0x1e>
 8004e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e80:	b94b      	cbnz	r3, 8004e96 <_raise_r+0x32>
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 f830 	bl	8004ee8 <_getpid_r>
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4601      	mov	r1, r0
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e92:	f000 b817 	b.w	8004ec4 <_kill_r>
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d00a      	beq.n	8004eb0 <_raise_r+0x4c>
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	d103      	bne.n	8004ea6 <_raise_r+0x42>
 8004e9e:	2316      	movs	r3, #22
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	e7e7      	b.n	8004e76 <_raise_r+0x12>
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004eae:	4798      	blx	r3
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7e0      	b.n	8004e76 <_raise_r+0x12>

08004eb4 <raise>:
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <raise+0xc>)
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f7ff bfd3 	b.w	8004e64 <_raise_r>
 8004ebe:	bf00      	nop
 8004ec0:	20000030 	.word	0x20000030

08004ec4 <_kill_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4d06      	ldr	r5, [pc, #24]	; (8004ee4 <_kill_r+0x20>)
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	f7fe ffd7 	bl	8003e84 <_kill>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d102      	bne.n	8004ee0 <_kill_r+0x1c>
 8004eda:	682b      	ldr	r3, [r5, #0]
 8004edc:	b103      	cbz	r3, 8004ee0 <_kill_r+0x1c>
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	bd38      	pop	{r3, r4, r5, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000528 	.word	0x20000528

08004ee8 <_getpid_r>:
 8004ee8:	f7fe bfca 	b.w	8003e80 <_getpid>

08004eec <__sread>:
 8004eec:	b510      	push	{r4, lr}
 8004eee:	460c      	mov	r4, r1
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	f000 f894 	bl	8005020 <_read_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	bfab      	itete	ge
 8004efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004efe:	89a3      	ldrhlt	r3, [r4, #12]
 8004f00:	181b      	addge	r3, r3, r0
 8004f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f06:	bfac      	ite	ge
 8004f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f0a:	81a3      	strhlt	r3, [r4, #12]
 8004f0c:	bd10      	pop	{r4, pc}

08004f0e <__swrite>:
 8004f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f12:	461f      	mov	r7, r3
 8004f14:	898b      	ldrh	r3, [r1, #12]
 8004f16:	4605      	mov	r5, r0
 8004f18:	05db      	lsls	r3, r3, #23
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	d505      	bpl.n	8004f2c <__swrite+0x1e>
 8004f20:	2302      	movs	r3, #2
 8004f22:	2200      	movs	r2, #0
 8004f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f28:	f000 f868 	bl	8004ffc <_lseek_r>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	4632      	mov	r2, r6
 8004f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	4628      	mov	r0, r5
 8004f38:	463b      	mov	r3, r7
 8004f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f42:	f000 b817 	b.w	8004f74 <_write_r>

08004f46 <__sseek>:
 8004f46:	b510      	push	{r4, lr}
 8004f48:	460c      	mov	r4, r1
 8004f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4e:	f000 f855 	bl	8004ffc <_lseek_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	bf15      	itete	ne
 8004f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f62:	81a3      	strheq	r3, [r4, #12]
 8004f64:	bf18      	it	ne
 8004f66:	81a3      	strhne	r3, [r4, #12]
 8004f68:	bd10      	pop	{r4, pc}

08004f6a <__sclose>:
 8004f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6e:	f000 b813 	b.w	8004f98 <_close_r>
	...

08004f74 <_write_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4d05      	ldr	r5, [pc, #20]	; (8004f94 <_write_r+0x20>)
 8004f80:	602a      	str	r2, [r5, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fe ff9c 	bl	8003ec0 <_write>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_write_r+0x1e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_write_r+0x1e>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000528 	.word	0x20000528

08004f98 <_close_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4d05      	ldr	r5, [pc, #20]	; (8004fb4 <_close_r+0x1c>)
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	f7fe ffb8 	bl	8003f18 <_close>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_close_r+0x1a>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_close_r+0x1a>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000528 	.word	0x20000528

08004fb8 <_fstat_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	2300      	movs	r3, #0
 8004fbc:	4d06      	ldr	r5, [pc, #24]	; (8004fd8 <_fstat_r+0x20>)
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	f7fe ffaa 	bl	8003f1e <_fstat>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	d102      	bne.n	8004fd4 <_fstat_r+0x1c>
 8004fce:	682b      	ldr	r3, [r5, #0]
 8004fd0:	b103      	cbz	r3, 8004fd4 <_fstat_r+0x1c>
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	bd38      	pop	{r3, r4, r5, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000528 	.word	0x20000528

08004fdc <_isatty_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4d05      	ldr	r5, [pc, #20]	; (8004ff8 <_isatty_r+0x1c>)
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fe ff9e 	bl	8003f28 <_isatty>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_isatty_r+0x1a>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_isatty_r+0x1a>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	20000528 	.word	0x20000528

08004ffc <_lseek_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	2200      	movs	r2, #0
 8005006:	4d05      	ldr	r5, [pc, #20]	; (800501c <_lseek_r+0x20>)
 8005008:	602a      	str	r2, [r5, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f7fe ff8e 	bl	8003f2c <_lseek>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_lseek_r+0x1e>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_lseek_r+0x1e>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	20000528 	.word	0x20000528

08005020 <_read_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	4611      	mov	r1, r2
 8005028:	2200      	movs	r2, #0
 800502a:	4d05      	ldr	r5, [pc, #20]	; (8005040 <_read_r+0x20>)
 800502c:	602a      	str	r2, [r5, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f7fe ff36 	bl	8003ea0 <_read>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_read_r+0x1e>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_read_r+0x1e>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	20000528 	.word	0x20000528

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
