
Matrice_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000000  08003004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000444  20000030  08003034  00020030  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  20000474  08003034  00020474  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016a51  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ab4  00000000  00000000  00036aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000d4d4  00000000  00000000  0003955e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e78  00000000  00000000  00046a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e08  00000000  00000000  000478aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00017f19  00000000  00000000  000486b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016441  00000000  00000000  000605cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0008a040  00000000  00000000  00076a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00100a4c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000283c  00000000  00000000  00100aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb8 	.word	0x08002fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002fb8 	.word	0x08002fb8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fbea 	bl	800093c <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 fb8b 	bl	8000894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	2000002c 	.word	0x2000002c

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 fb65 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 fd42 	bl	8002c34 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000007c 	.word	0x2000007c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000204:	2800      	cmp	r0, #0
 8000206:	f000 80a1 	beq.w	800034c <HAL_CAN_Init+0x148>
{
 800020a:	b538      	push	{r3, r4, r5, lr}
 800020c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800020e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000212:	b1d3      	cbz	r3, 800024a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000214:	6822      	ldr	r2, [r4, #0]
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800021e:	f7ff ffd7 	bl	80001d0 <HAL_GetTick>
 8000222:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000224:	6823      	ldr	r3, [r4, #0]
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	f012 0f01 	tst.w	r2, #1
 800022c:	d110      	bne.n	8000250 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800022e:	f7ff ffcf 	bl	80001d0 <HAL_GetTick>
 8000232:	1b40      	subs	r0, r0, r5
 8000234:	280a      	cmp	r0, #10
 8000236:	d9f5      	bls.n	8000224 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000240:	2305      	movs	r3, #5
 8000242:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000246:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000248:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800024a:	f002 fd15 	bl	8002c78 <HAL_CAN_MspInit>
 800024e:	e7e1      	b.n	8000214 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	f022 0202 	bic.w	r2, r2, #2
 8000256:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000258:	f7ff ffba 	bl	80001d0 <HAL_GetTick>
 800025c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800025e:	6823      	ldr	r3, [r4, #0]
 8000260:	685a      	ldr	r2, [r3, #4]
 8000262:	f012 0f02 	tst.w	r2, #2
 8000266:	d00d      	beq.n	8000284 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000268:	f7ff ffb2 	bl	80001d0 <HAL_GetTick>
 800026c:	1b40      	subs	r0, r0, r5
 800026e:	280a      	cmp	r0, #10
 8000270:	d9f5      	bls.n	800025e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000278:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800027a:	2305      	movs	r3, #5
 800027c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000280:	2001      	movs	r0, #1
 8000282:	e7e1      	b.n	8000248 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000284:	7e22      	ldrb	r2, [r4, #24]
 8000286:	2a01      	cmp	r2, #1
 8000288:	d03d      	beq.n	8000306 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000290:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000292:	7e63      	ldrb	r3, [r4, #25]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d03b      	beq.n	8000310 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000298:	6822      	ldr	r2, [r4, #0]
 800029a:	6813      	ldr	r3, [r2, #0]
 800029c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002a2:	7ea3      	ldrb	r3, [r4, #26]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d039      	beq.n	800031c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002a8:	6822      	ldr	r2, [r4, #0]
 80002aa:	6813      	ldr	r3, [r2, #0]
 80002ac:	f023 0320 	bic.w	r3, r3, #32
 80002b0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80002b2:	7ee3      	ldrb	r3, [r4, #27]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d037      	beq.n	8000328 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002b8:	6822      	ldr	r2, [r4, #0]
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	f043 0310 	orr.w	r3, r3, #16
 80002c0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80002c2:	7f23      	ldrb	r3, [r4, #28]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d035      	beq.n	8000334 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002c8:	6822      	ldr	r2, [r4, #0]
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	f023 0308 	bic.w	r3, r3, #8
 80002d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80002d2:	7f63      	ldrb	r3, [r4, #29]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d033      	beq.n	8000340 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002d8:	6822      	ldr	r2, [r4, #0]
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	f023 0304 	bic.w	r3, r3, #4
 80002e0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002e2:	68a3      	ldr	r3, [r4, #8]
 80002e4:	68e2      	ldr	r2, [r4, #12]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	6922      	ldr	r2, [r4, #16]
 80002ea:	4313      	orrs	r3, r2
 80002ec:	6962      	ldr	r2, [r4, #20]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	6862      	ldr	r2, [r4, #4]
 80002f2:	3a01      	subs	r2, #1
 80002f4:	6821      	ldr	r1, [r4, #0]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80002fa:	2000      	movs	r0, #0
 80002fc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80002fe:	2301      	movs	r3, #1
 8000300:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000304:	e7a0      	b.n	8000248 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	e7c0      	b.n	8000292 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000310:	6822      	ldr	r2, [r4, #0]
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	e7c2      	b.n	80002a2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800031c:	6822      	ldr	r2, [r4, #0]
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f043 0320 	orr.w	r3, r3, #32
 8000324:	6013      	str	r3, [r2, #0]
 8000326:	e7c4      	b.n	80002b2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000328:	6822      	ldr	r2, [r4, #0]
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6013      	str	r3, [r2, #0]
 8000332:	e7c6      	b.n	80002c2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000334:	6822      	ldr	r2, [r4, #0]
 8000336:	6813      	ldr	r3, [r2, #0]
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	6013      	str	r3, [r2, #0]
 800033e:	e7c8      	b.n	80002d2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000340:	6822      	ldr	r2, [r4, #0]
 8000342:	6813      	ldr	r3, [r2, #0]
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6013      	str	r3, [r2, #0]
 800034a:	e7ca      	b.n	80002e2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800034c:	2001      	movs	r0, #1
}
 800034e:	4770      	bx	lr

08000350 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000350:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000352:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000356:	3b01      	subs	r3, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b01      	cmp	r3, #1
 800035c:	d905      	bls.n	800036a <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800035e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000364:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
  }
}
 8000368:	4770      	bx	lr
{
 800036a:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800036c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000378:	694b      	ldr	r3, [r1, #20]
 800037a:	f003 031f 	and.w	r3, r3, #31
 800037e:	2001      	movs	r0, #1
 8000380:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000384:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000388:	43dc      	mvns	r4, r3
 800038a:	ea20 0003 	bic.w	r0, r0, r3
 800038e:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000392:	69c8      	ldr	r0, [r1, #28]
 8000394:	b9a8      	cbnz	r0, 80003c2 <HAL_CAN_ConfigFilter+0x72>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000396:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 800039a:	4020      	ands	r0, r4
 800039c:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003a0:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003a2:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003a4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003a6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003aa:	3048      	adds	r0, #72	; 0x48
 80003ac:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003b0:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80003b2:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003b4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003b6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003ba:	3048      	adds	r0, #72	; 0x48
 80003bc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80003c0:	6045      	str	r5, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80003c2:	69c8      	ldr	r0, [r1, #28]
 80003c4:	2801      	cmp	r0, #1
 80003c6:	d019      	beq.n	80003fc <HAL_CAN_ConfigFilter+0xac>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80003c8:	6988      	ldr	r0, [r1, #24]
 80003ca:	bb70      	cbnz	r0, 800042a <HAL_CAN_ConfigFilter+0xda>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80003cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80003d0:	4020      	ands	r0, r4
 80003d2:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80003d6:	6908      	ldr	r0, [r1, #16]
 80003d8:	bb68      	cbnz	r0, 8000436 <HAL_CAN_ConfigFilter+0xe6>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80003da:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80003de:	4004      	ands	r4, r0
 80003e0:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80003e4:	6a09      	ldr	r1, [r1, #32]
 80003e6:	2901      	cmp	r1, #1
 80003e8:	d02b      	beq.n	8000442 <HAL_CAN_ConfigFilter+0xf2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80003ea:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80003f6:	2000      	movs	r0, #0
}
 80003f8:	bc70      	pop	{r4, r5, r6}
 80003fa:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80003fc:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000400:	4318      	orrs	r0, r3
 8000402:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000406:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000408:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800040a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800040c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000410:	3048      	adds	r0, #72	; 0x48
 8000412:	f842 5030 	str.w	r5, [r2, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000416:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000418:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800041a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800041c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000420:	3048      	adds	r0, #72	; 0x48
 8000422:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000426:	6045      	str	r5, [r0, #4]
 8000428:	e7ce      	b.n	80003c8 <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800042a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800042e:	4318      	orrs	r0, r3
 8000430:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000434:	e7cf      	b.n	80003d6 <HAL_CAN_ConfigFilter+0x86>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000436:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 800043a:	4318      	orrs	r0, r3
 800043c:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8000440:	e7d0      	b.n	80003e4 <HAL_CAN_ConfigFilter+0x94>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000442:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000446:	430b      	orrs	r3, r1
 8000448:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 800044c:	e7cd      	b.n	80003ea <HAL_CAN_ConfigFilter+0x9a>

0800044e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800044e:	b570      	push	{r4, r5, r6, lr}
 8000450:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000452:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000456:	b2ed      	uxtb	r5, r5
 8000458:	2d01      	cmp	r5, #1
 800045a:	d006      	beq.n	800046a <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800045c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800045e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000462:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000464:	2501      	movs	r5, #1
  }
}
 8000466:	4628      	mov	r0, r5
 8000468:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 800046a:	2302      	movs	r3, #2
 800046c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000470:	6802      	ldr	r2, [r0, #0]
 8000472:	6813      	ldr	r3, [r2, #0]
 8000474:	f023 0301 	bic.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800047a:	f7ff fea9 	bl	80001d0 <HAL_GetTick>
 800047e:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000480:	6823      	ldr	r3, [r4, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f013 0f01 	tst.w	r3, #1
 8000488:	d00c      	beq.n	80004a4 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800048a:	f7ff fea1 	bl	80001d0 <HAL_GetTick>
 800048e:	1b83      	subs	r3, r0, r6
 8000490:	2b0a      	cmp	r3, #10
 8000492:	d9f5      	bls.n	8000480 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800049c:	2305      	movs	r3, #5
 800049e:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80004a2:	e7e0      	b.n	8000466 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004a4:	2500      	movs	r5, #0
 80004a6:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80004a8:	e7dd      	b.n	8000466 <HAL_CAN_Start+0x18>

080004aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80004aa:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 80004ac:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80004b0:	3c01      	subs	r4, #1
 80004b2:	b2e4      	uxtb	r4, r4
 80004b4:	2c01      	cmp	r4, #1
 80004b6:	f200 8091 	bhi.w	80005dc <HAL_CAN_GetRxMessage+0x132>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80004ba:	b951      	cbnz	r1, 80004d2 <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80004bc:	6804      	ldr	r4, [r0, #0]
 80004be:	68e4      	ldr	r4, [r4, #12]
 80004c0:	f014 0f03 	tst.w	r4, #3
 80004c4:	d110      	bne.n	80004e8 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004cc:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80004ce:	2001      	movs	r0, #1
 80004d0:	e089      	b.n	80005e6 <HAL_CAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80004d2:	6804      	ldr	r4, [r0, #0]
 80004d4:	6924      	ldr	r4, [r4, #16]
 80004d6:	f014 0f03 	tst.w	r4, #3
 80004da:	d105      	bne.n	80004e8 <HAL_CAN_GetRxMessage+0x3e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e2:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80004e4:	2001      	movs	r0, #1
 80004e6:	e07e      	b.n	80005e6 <HAL_CAN_GetRxMessage+0x13c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80004e8:	6805      	ldr	r5, [r0, #0]
 80004ea:	f101 041b 	add.w	r4, r1, #27
 80004ee:	0124      	lsls	r4, r4, #4
 80004f0:	592c      	ldr	r4, [r5, r4]
 80004f2:	f004 0404 	and.w	r4, r4, #4
 80004f6:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d161      	bne.n	80005c0 <HAL_CAN_GetRxMessage+0x116>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80004fc:	6805      	ldr	r5, [r0, #0]
 80004fe:	f101 041b 	add.w	r4, r1, #27
 8000502:	0124      	lsls	r4, r4, #4
 8000504:	592c      	ldr	r4, [r5, r4]
 8000506:	0d64      	lsrs	r4, r4, #21
 8000508:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800050a:	6805      	ldr	r5, [r0, #0]
 800050c:	f101 041b 	add.w	r4, r1, #27
 8000510:	0124      	lsls	r4, r4, #4
 8000512:	592d      	ldr	r5, [r5, r4]
 8000514:	f005 0502 	and.w	r5, r5, #2
 8000518:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800051a:	6805      	ldr	r5, [r0, #0]
 800051c:	4425      	add	r5, r4
 800051e:	686d      	ldr	r5, [r5, #4]
 8000520:	f005 050f 	and.w	r5, r5, #15
 8000524:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000526:	6805      	ldr	r5, [r0, #0]
 8000528:	4425      	add	r5, r4
 800052a:	686d      	ldr	r5, [r5, #4]
 800052c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000530:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000532:	6805      	ldr	r5, [r0, #0]
 8000534:	442c      	add	r4, r5
 8000536:	6864      	ldr	r4, [r4, #4]
 8000538:	0c24      	lsrs	r4, r4, #16
 800053a:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800053c:	6802      	ldr	r2, [r0, #0]
 800053e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000542:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000546:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000548:	6802      	ldr	r2, [r0, #0]
 800054a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800054e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000552:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000556:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000558:	6802      	ldr	r2, [r0, #0]
 800055a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800055e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000562:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000566:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800056e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000576:	6802      	ldr	r2, [r0, #0]
 8000578:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800057c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000580:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000582:	6802      	ldr	r2, [r0, #0]
 8000584:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000588:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800058c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000590:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000592:	6802      	ldr	r2, [r0, #0]
 8000594:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000598:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800059c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80005a0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80005a2:	6802      	ldr	r2, [r0, #0]
 80005a4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005a8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005ac:	0e12      	lsrs	r2, r2, #24
 80005ae:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80005b0:	b971      	cbnz	r1, 80005d0 <HAL_CAN_GetRxMessage+0x126>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80005b2:	6802      	ldr	r2, [r0, #0]
 80005b4:	68d3      	ldr	r3, [r2, #12]
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80005bc:	2000      	movs	r0, #0
 80005be:	e012      	b.n	80005e6 <HAL_CAN_GetRxMessage+0x13c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80005c0:	6805      	ldr	r5, [r0, #0]
 80005c2:	f101 041b 	add.w	r4, r1, #27
 80005c6:	0124      	lsls	r4, r4, #4
 80005c8:	592c      	ldr	r4, [r5, r4]
 80005ca:	08e4      	lsrs	r4, r4, #3
 80005cc:	6054      	str	r4, [r2, #4]
 80005ce:	e79c      	b.n	800050a <HAL_CAN_GetRxMessage+0x60>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80005d0:	6802      	ldr	r2, [r0, #0]
 80005d2:	6913      	ldr	r3, [r2, #16]
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	6113      	str	r3, [r2, #16]
 80005da:	e7ef      	b.n	80005bc <HAL_CAN_GetRxMessage+0x112>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005e4:	2001      	movs	r0, #1
  }
}
 80005e6:	bc30      	pop	{r4, r5}
 80005e8:	4770      	bx	lr

080005ea <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80005ea:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d905      	bls.n	8000602 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005fc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005fe:	2001      	movs	r0, #1
  }
}
 8000600:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000602:	6802      	ldr	r2, [r0, #0]
 8000604:	6953      	ldr	r3, [r2, #20]
 8000606:	4319      	orrs	r1, r3
 8000608:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800060a:	2000      	movs	r0, #0
 800060c:	4770      	bx	lr

0800060e <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800060e:	4770      	bx	lr

08000610 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000610:	4770      	bx	lr

08000612 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000612:	4770      	bx	lr

08000614 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000614:	4770      	bx	lr

08000616 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000616:	4770      	bx	lr

08000618 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000618:	4770      	bx	lr

0800061a <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800061a:	4770      	bx	lr

0800061c <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800061e:	4770      	bx	lr

08000620 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000620:	4770      	bx	lr

08000622 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000622:	4770      	bx	lr

08000624 <HAL_CAN_IRQHandler>:
{
 8000624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000628:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800062a:	6803      	ldr	r3, [r0, #0]
 800062c:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800062e:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000632:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000634:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000638:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800063c:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000640:	f014 0601 	ands.w	r6, r4, #1
 8000644:	d03b      	beq.n	80006be <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000646:	f017 0601 	ands.w	r6, r7, #1
 800064a:	d016      	beq.n	800067a <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800064c:	2201      	movs	r2, #1
 800064e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000650:	f017 0f02 	tst.w	r7, #2
 8000654:	d108      	bne.n	8000668 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000656:	f017 0f04 	tst.w	r7, #4
 800065a:	d10c      	bne.n	8000676 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800065c:	f017 0608 	ands.w	r6, r7, #8
 8000660:	d006      	beq.n	8000670 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000662:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000666:	e008      	b.n	800067a <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000668:	f7ff ffd1 	bl	800060e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800066c:	2600      	movs	r6, #0
 800066e:	e004      	b.n	800067a <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000670:	f7ff ffd0 	bl	8000614 <HAL_CAN_TxMailbox0AbortCallback>
 8000674:	e001      	b.n	800067a <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000676:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800067a:	f417 7f80 	tst.w	r7, #256	; 0x100
 800067e:	d00d      	beq.n	800069c <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000680:	682b      	ldr	r3, [r5, #0]
 8000682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000686:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000688:	f417 7f00 	tst.w	r7, #512	; 0x200
 800068c:	f040 8086 	bne.w	800079c <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000690:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8000694:	f000 8086 	beq.w	80007a4 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000698:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800069c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006a0:	d00d      	beq.n	80006be <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006a2:	682b      	ldr	r3, [r5, #0]
 80006a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006aa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006ae:	f040 8083 	bne.w	80007b8 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80006b2:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80006b6:	f000 8083 	beq.w	80007c0 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80006ba:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80006be:	f014 0f08 	tst.w	r4, #8
 80006c2:	d007      	beq.n	80006d4 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80006c4:	f01b 0f10 	tst.w	fp, #16
 80006c8:	d004      	beq.n	80006d4 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80006ca:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80006ce:	682b      	ldr	r3, [r5, #0]
 80006d0:	2210      	movs	r2, #16
 80006d2:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80006d4:	f014 0f04 	tst.w	r4, #4
 80006d8:	d002      	beq.n	80006e0 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80006da:	f01b 0f08 	tst.w	fp, #8
 80006de:	d179      	bne.n	80007d4 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80006e0:	f014 0f02 	tst.w	r4, #2
 80006e4:	d004      	beq.n	80006f0 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80006e6:	682b      	ldr	r3, [r5, #0]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f013 0f03 	tst.w	r3, #3
 80006ee:	d178      	bne.n	80007e2 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80006f0:	f014 0f40 	tst.w	r4, #64	; 0x40
 80006f4:	d007      	beq.n	8000706 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80006f6:	f01a 0f10 	tst.w	sl, #16
 80006fa:	d004      	beq.n	8000706 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80006fc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	2210      	movs	r2, #16
 8000704:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000706:	f014 0f20 	tst.w	r4, #32
 800070a:	d002      	beq.n	8000712 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800070c:	f01a 0f08 	tst.w	sl, #8
 8000710:	d16b      	bne.n	80007ea <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000712:	f014 0f10 	tst.w	r4, #16
 8000716:	d004      	beq.n	8000722 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000718:	682b      	ldr	r3, [r5, #0]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f013 0f03 	tst.w	r3, #3
 8000720:	d16a      	bne.n	80007f8 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000722:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000726:	d002      	beq.n	800072e <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000728:	f018 0f10 	tst.w	r8, #16
 800072c:	d168      	bne.n	8000800 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800072e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000732:	d002      	beq.n	800073a <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000734:	f018 0f08 	tst.w	r8, #8
 8000738:	d169      	bne.n	800080e <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800073a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800073e:	d07a      	beq.n	8000836 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000740:	f018 0f04 	tst.w	r8, #4
 8000744:	d074      	beq.n	8000830 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000746:	f414 7f80 	tst.w	r4, #256	; 0x100
 800074a:	d004      	beq.n	8000756 <HAL_CAN_IRQHandler+0x132>
 800074c:	f019 0f01 	tst.w	r9, #1
 8000750:	d001      	beq.n	8000756 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000752:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000756:	f414 7f00 	tst.w	r4, #512	; 0x200
 800075a:	d004      	beq.n	8000766 <HAL_CAN_IRQHandler+0x142>
 800075c:	f019 0f02 	tst.w	r9, #2
 8000760:	d001      	beq.n	8000766 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000762:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000766:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800076a:	d004      	beq.n	8000776 <HAL_CAN_IRQHandler+0x152>
 800076c:	f019 0f04 	tst.w	r9, #4
 8000770:	d001      	beq.n	8000776 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000772:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000776:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800077a:	d059      	beq.n	8000830 <HAL_CAN_IRQHandler+0x20c>
 800077c:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8000780:	d056      	beq.n	8000830 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8000782:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000786:	d065      	beq.n	8000854 <HAL_CAN_IRQHandler+0x230>
 8000788:	d858      	bhi.n	800083c <HAL_CAN_IRQHandler+0x218>
 800078a:	f1b9 0f20 	cmp.w	r9, #32
 800078e:	d05e      	beq.n	800084e <HAL_CAN_IRQHandler+0x22a>
 8000790:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8000794:	d142      	bne.n	800081c <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000796:	f046 0620 	orr.w	r6, r6, #32
            break;
 800079a:	e044      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800079c:	4628      	mov	r0, r5
 800079e:	f7ff ff37 	bl	8000610 <HAL_CAN_TxMailbox1CompleteCallback>
 80007a2:	e77b      	b.n	800069c <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80007a4:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80007a8:	d002      	beq.n	80007b0 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80007aa:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80007ae:	e775      	b.n	800069c <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80007b0:	4628      	mov	r0, r5
 80007b2:	f7ff ff30 	bl	8000616 <HAL_CAN_TxMailbox1AbortCallback>
 80007b6:	e771      	b.n	800069c <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80007b8:	4628      	mov	r0, r5
 80007ba:	f7ff ff2a 	bl	8000612 <HAL_CAN_TxMailbox2CompleteCallback>
 80007be:	e77e      	b.n	80006be <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80007c0:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 80007c4:	d002      	beq.n	80007cc <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80007c6:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80007ca:	e778      	b.n	80006be <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80007cc:	4628      	mov	r0, r5
 80007ce:	f7ff ff23 	bl	8000618 <HAL_CAN_TxMailbox2AbortCallback>
 80007d2:	e774      	b.n	80006be <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80007d4:	682b      	ldr	r3, [r5, #0]
 80007d6:	2208      	movs	r2, #8
 80007d8:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80007da:	4628      	mov	r0, r5
 80007dc:	f7ff ff1d 	bl	800061a <HAL_CAN_RxFifo0FullCallback>
 80007e0:	e77e      	b.n	80006e0 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80007e2:	4628      	mov	r0, r5
 80007e4:	f001 ffe2 	bl	80027ac <HAL_CAN_RxFifo0MsgPendingCallback>
 80007e8:	e782      	b.n	80006f0 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80007ea:	682b      	ldr	r3, [r5, #0]
 80007ec:	2208      	movs	r2, #8
 80007ee:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80007f0:	4628      	mov	r0, r5
 80007f2:	f7ff ff13 	bl	800061c <HAL_CAN_RxFifo1FullCallback>
 80007f6:	e78c      	b.n	8000712 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80007f8:	4628      	mov	r0, r5
 80007fa:	f001 ffe6 	bl	80027ca <HAL_CAN_RxFifo1MsgPendingCallback>
 80007fe:	e790      	b.n	8000722 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000800:	682b      	ldr	r3, [r5, #0]
 8000802:	2210      	movs	r2, #16
 8000804:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000806:	4628      	mov	r0, r5
 8000808:	f7ff ff09 	bl	800061e <HAL_CAN_SleepCallback>
 800080c:	e78f      	b.n	800072e <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800080e:	682b      	ldr	r3, [r5, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000814:	4628      	mov	r0, r5
 8000816:	f7ff ff03 	bl	8000620 <HAL_CAN_WakeUpFromRxMsgCallback>
 800081a:	e78e      	b.n	800073a <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 800081c:	f1b9 0f10 	cmp.w	r9, #16
 8000820:	d101      	bne.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8000822:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000826:	682a      	ldr	r2, [r5, #0]
 8000828:	6993      	ldr	r3, [r2, #24]
 800082a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800082e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000830:	682b      	ldr	r3, [r5, #0]
 8000832:	2204      	movs	r2, #4
 8000834:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000836:	b99e      	cbnz	r6, 8000860 <HAL_CAN_IRQHandler+0x23c>
}
 8000838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 800083c:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000840:	d00b      	beq.n	800085a <HAL_CAN_IRQHandler+0x236>
 8000842:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8000846:	d1ee      	bne.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000848:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 800084c:	e7eb      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 800084e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000852:	e7e8      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8000854:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8000858:	e7e5      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 800085a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 800085e:	e7e2      	b.n	8000826 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000860:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000862:	431e      	orrs	r6, r3
 8000864:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000866:	4628      	mov	r0, r5
 8000868:	f7ff fedb 	bl	8000622 <HAL_CAN_ErrorCallback>
}
 800086c:	e7e4      	b.n	8000838 <HAL_CAN_IRQHandler+0x214>
	...

08000870 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000872:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800087c:	0200      	lsls	r0, r0, #8
 800087e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000882:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800088c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000894:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_NVIC_SetPriority+0x60>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089e:	f1c3 0407 	rsb	r4, r3, #7
 80008a2:	2c04      	cmp	r4, #4
 80008a4:	bf28      	it	cs
 80008a6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a8:	1d1d      	adds	r5, r3, #4
 80008aa:	2d06      	cmp	r5, #6
 80008ac:	d918      	bls.n	80008e0 <HAL_NVIC_SetPriority+0x4c>
 80008ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 35ff 	mov.w	r5, #4294967295
 80008b4:	fa05 f404 	lsl.w	r4, r5, r4
 80008b8:	ea21 0104 	bic.w	r1, r1, r4
 80008bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008be:	fa05 f303 	lsl.w	r3, r5, r3
 80008c2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80008c8:	2800      	cmp	r0, #0
 80008ca:	db0b      	blt.n	80008e4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	0109      	lsls	r1, r1, #4
 80008ce:	b2c9      	uxtb	r1, r1
 80008d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80008d8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008dc:	bc30      	pop	{r4, r5}
 80008de:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e0:	2300      	movs	r3, #0
 80008e2:	e7e5      	b.n	80008b0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	f000 000f 	and.w	r0, r0, #15
 80008e8:	0109      	lsls	r1, r1, #4
 80008ea:	b2c9      	uxtb	r1, r1
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_NVIC_SetPriority+0x64>)
 80008ee:	5419      	strb	r1, [r3, r0]
 80008f0:	e7f4      	b.n	80008dc <HAL_NVIC_SetPriority+0x48>
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00
 80008f8:	e000ed14 	.word	0xe000ed14

080008fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008fc:	2800      	cmp	r0, #0
 80008fe:	db07      	blt.n	8000910 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000900:	f000 021f 	and.w	r2, r0, #31
 8000904:	0940      	lsrs	r0, r0, #5
 8000906:	2301      	movs	r3, #1
 8000908:	4093      	lsls	r3, r2
 800090a:	4a02      	ldr	r2, [pc, #8]	; (8000914 <HAL_NVIC_EnableIRQ+0x18>)
 800090c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000918:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800091c:	4905      	ldr	r1, [pc, #20]	; (8000934 <HAL_NVIC_SystemReset+0x1c>)
 800091e:	68ca      	ldr	r2, [r1, #12]
 8000920:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <HAL_NVIC_SystemReset+0x20>)
 8000926:	4313      	orrs	r3, r2
 8000928:	60cb      	str	r3, [r1, #12]
 800092a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800092e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000930:	e7fd      	b.n	800092e <HAL_NVIC_SystemReset+0x16>
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	05fa0004 	.word	0x05fa0004

0800093c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	3801      	subs	r0, #1
 800093e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000942:	d20a      	bcs.n	800095a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_SYSTICK_Config+0x24>)
 8000946:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_SYSTICK_Config+0x28>)
 800094a:	21f0      	movs	r1, #240	; 0xf0
 800094c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	2000      	movs	r0, #0
 8000952:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <FLASH_Program_HalfWord+0x14>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <FLASH_Program_HalfWord+0x18>)
 8000970:	6913      	ldr	r3, [r2, #16]
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000978:	8001      	strh	r1, [r0, #0]
}
 800097a:	4770      	bx	lr
 800097c:	20000080 	.word	0x20000080
 8000980:	40022000 	.word	0x40022000

08000984 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <FLASH_SetErrorCode+0x68>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	f013 0310 	ands.w	r3, r3, #16
 800098c:	d005      	beq.n	800099a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <FLASH_SetErrorCode+0x6c>)
 8000990:	69d3      	ldr	r3, [r2, #28]
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000998:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <FLASH_SetErrorCode+0x68>)
 800099c:	68d2      	ldr	r2, [r2, #12]
 800099e:	f012 0f04 	tst.w	r2, #4
 80009a2:	d006      	beq.n	80009b2 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80009a4:	4912      	ldr	r1, [pc, #72]	; (80009f0 <FLASH_SetErrorCode+0x6c>)
 80009a6:	69ca      	ldr	r2, [r1, #28]
 80009a8:	f042 0201 	orr.w	r2, r2, #1
 80009ac:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80009ae:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009b4:	69d2      	ldr	r2, [r2, #28]
 80009b6:	f012 0f01 	tst.w	r2, #1
 80009ba:	d009      	beq.n	80009d0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <FLASH_SetErrorCode+0x6c>)
 80009be:	69ca      	ldr	r2, [r1, #28]
 80009c0:	f042 0204 	orr.w	r2, r2, #4
 80009c4:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009c6:	4909      	ldr	r1, [pc, #36]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009c8:	69ca      	ldr	r2, [r1, #28]
 80009ca:	f022 0201 	bic.w	r2, r2, #1
 80009ce:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009d0:	f240 1201 	movw	r2, #257	; 0x101
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d002      	beq.n	80009de <FLASH_SetErrorCode+0x5a>
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009da:	60d3      	str	r3, [r2, #12]
}  
 80009dc:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 80009de:	4a03      	ldr	r2, [pc, #12]	; (80009ec <FLASH_SetErrorCode+0x68>)
 80009e0:	69d3      	ldr	r3, [r2, #28]
 80009e2:	f023 0301 	bic.w	r3, r3, #1
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000
 80009f0:	20000080 	.word	0x20000080

080009f4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_FLASH_Unlock+0x2c>)
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80009fc:	d00b      	beq.n	8000a16 <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_FLASH_Unlock+0x2c>)
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_FLASH_Unlock+0x30>)
 8000a02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a04:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000a08:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000a10:	d103      	bne.n	8000a1a <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8000a12:	2000      	movs	r0, #0
 8000a14:	4770      	bx	lr
 8000a16:	2000      	movs	r0, #0
 8000a18:	4770      	bx	lr
      status = HAL_ERROR;
 8000a1a:	2001      	movs	r0, #1
}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000
 8000a24:	45670123 	.word	0x45670123

08000a28 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <HAL_FLASH_Lock+0x10>)
 8000a2a:	6913      	ldr	r3, [r2, #16]
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6113      	str	r3, [r2, #16]
}
 8000a32:	2000      	movs	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <FLASH_WaitForLastOperation>:
{
 8000a3c:	b538      	push	{r3, r4, r5, lr}
 8000a3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff fbc6 	bl	80001d0 <HAL_GetTick>
 8000a44:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	f013 0f01 	tst.w	r3, #1
 8000a4e:	d00a      	beq.n	8000a66 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000a50:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000a54:	d0f7      	beq.n	8000a46 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a56:	b124      	cbz	r4, 8000a62 <FLASH_WaitForLastOperation+0x26>
 8000a58:	f7ff fbba 	bl	80001d0 <HAL_GetTick>
 8000a5c:	1b40      	subs	r0, r0, r5
 8000a5e:	42a0      	cmp	r0, r4
 8000a60:	d9f1      	bls.n	8000a46 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000a62:	2003      	movs	r0, #3
 8000a64:	e01b      	b.n	8000a9e <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	f013 0f20 	tst.w	r3, #32
 8000a6e:	d002      	beq.n	8000a76 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a72:	2220      	movs	r2, #32
 8000a74:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f013 0f10 	tst.w	r3, #16
 8000a7e:	d10b      	bne.n	8000a98 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a82:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a84:	f013 0f01 	tst.w	r3, #1
 8000a88:	d106      	bne.n	8000a98 <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <FLASH_WaitForLastOperation+0x64>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000a8e:	f013 0f04 	tst.w	r3, #4
 8000a92:	d101      	bne.n	8000a98 <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 8000a94:	2000      	movs	r0, #0
 8000a96:	e002      	b.n	8000a9e <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8000a98:	f7ff ff74 	bl	8000984 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a9c:	2001      	movs	r0, #1
}
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_FLASH_Program>:
{
 8000aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa8:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <HAL_FLASH_Program+0x94>)
 8000aac:	7e1b      	ldrb	r3, [r3, #24]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d040      	beq.n	8000b34 <HAL_FLASH_Program+0x90>
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	460f      	mov	r7, r1
 8000ab6:	4690      	mov	r8, r2
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_FLASH_Program+0x94>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000abe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ac2:	f7ff ffbb 	bl	8000a3c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	bb70      	cbnz	r0, 8000b28 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000aca:	2c01      	cmp	r4, #1
 8000acc:	d029      	beq.n	8000b22 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ace:	2c02      	cmp	r4, #2
 8000ad0:	d024      	beq.n	8000b1c <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8000ad2:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000ad6:	461c      	mov	r4, r3
 8000ad8:	454c      	cmp	r4, r9
 8000ada:	d225      	bcs.n	8000b28 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000adc:	0121      	lsls	r1, r4, #4
 8000ade:	f1c1 0220 	rsb	r2, r1, #32
 8000ae2:	f1a1 0320 	sub.w	r3, r1, #32
 8000ae6:	fa28 f101 	lsr.w	r1, r8, r1
 8000aea:	fa06 f202 	lsl.w	r2, r6, r2
 8000aee:	4311      	orrs	r1, r2
 8000af0:	fa26 f303 	lsr.w	r3, r6, r3
 8000af4:	4319      	orrs	r1, r3
 8000af6:	b289      	uxth	r1, r1
 8000af8:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000afc:	f7ff ff34 	bl	8000968 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b04:	f7ff ff9a 	bl	8000a3c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_FLASH_Program+0x98>)
 8000b0a:	691d      	ldr	r5, [r3, #16]
 8000b0c:	f025 0501 	bic.w	r5, r5, #1
 8000b10:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000b12:	4603      	mov	r3, r0
 8000b14:	b940      	cbnz	r0, 8000b28 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8000b16:	3401      	adds	r4, #1
 8000b18:	b2e4      	uxtb	r4, r4
 8000b1a:	e7dd      	b.n	8000ad8 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8000b1c:	f04f 0902 	mov.w	r9, #2
 8000b20:	e7d9      	b.n	8000ad6 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000b22:	f04f 0901 	mov.w	r9, #1
 8000b26:	e7d6      	b.n	8000ad6 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_FLASH_Program+0x94>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	7611      	strb	r1, [r2, #24]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000b34:	2302      	movs	r3, #2
 8000b36:	e7fa      	b.n	8000b2e <HAL_FLASH_Program+0x8a>
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b4f0      	push	{r4, r5, r6, r7}
 8000b42:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b44:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8000b46:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b48:	e0a3      	b.n	8000c92 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4a:	4f7f      	ldr	r7, [pc, #508]	; (8000d48 <HAL_GPIO_Init+0x208>)
 8000b4c:	42bb      	cmp	r3, r7
 8000b4e:	d010      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b50:	d907      	bls.n	8000b62 <HAL_GPIO_Init+0x22>
 8000b52:	4f7e      	ldr	r7, [pc, #504]	; (8000d4c <HAL_GPIO_Init+0x20c>)
 8000b54:	42bb      	cmp	r3, r7
 8000b56:	d00c      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b58:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000b5c:	42bb      	cmp	r3, r7
 8000b5e:	d008      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b60:	e013      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
 8000b62:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000b66:	42bb      	cmp	r3, r7
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
 8000b6a:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000b6e:	42bb      	cmp	r3, r7
 8000b70:	d107      	bne.n	8000b82 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b72:	688b      	ldr	r3, [r1, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d058      	beq.n	8000c2a <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d051      	beq.n	8000c20 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000b7c:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b7e:	2508      	movs	r5, #8
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000b82:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000b86:	42bb      	cmp	r3, r7
 8000b88:	d0f3      	beq.n	8000b72 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8a:	2eff      	cmp	r6, #255	; 0xff
 8000b8c:	d84f      	bhi.n	8000c2e <HAL_GPIO_Init+0xee>
 8000b8e:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	2eff      	cmp	r6, #255	; 0xff
 8000b92:	d84f      	bhi.n	8000c34 <HAL_GPIO_Init+0xf4>
 8000b94:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b96:	f8dc 3000 	ldr.w	r3, [ip]
 8000b9a:	270f      	movs	r7, #15
 8000b9c:	4097      	lsls	r7, r2
 8000b9e:	ea23 0307 	bic.w	r3, r3, r7
 8000ba2:	fa05 f202 	lsl.w	r2, r5, r2
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bac:	684b      	ldr	r3, [r1, #4]
 8000bae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000bb2:	d06d      	beq.n	8000c90 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <HAL_GPIO_Init+0x210>)
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	f042 0201 	orr.w	r2, r2, #1
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc8:	08a2      	lsrs	r2, r4, #2
 8000bca:	1c97      	adds	r7, r2, #2
 8000bcc:	4b61      	ldr	r3, [pc, #388]	; (8000d54 <HAL_GPIO_Init+0x214>)
 8000bce:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd2:	f004 0703 	and.w	r7, r4, #3
 8000bd6:	00bf      	lsls	r7, r7, #2
 8000bd8:	f04f 0c0f 	mov.w	ip, #15
 8000bdc:	fa0c fc07 	lsl.w	ip, ip, r7
 8000be0:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be4:	4b5c      	ldr	r3, [pc, #368]	; (8000d58 <HAL_GPIO_Init+0x218>)
 8000be6:	4298      	cmp	r0, r3
 8000be8:	d02a      	beq.n	8000c40 <HAL_GPIO_Init+0x100>
 8000bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bee:	4298      	cmp	r0, r3
 8000bf0:	f000 808a 	beq.w	8000d08 <HAL_GPIO_Init+0x1c8>
 8000bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	f000 8087 	beq.w	8000d0c <HAL_GPIO_Init+0x1cc>
 8000bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d01a      	beq.n	8000c3c <HAL_GPIO_Init+0xfc>
 8000c06:	2304      	movs	r3, #4
 8000c08:	e01b      	b.n	8000c42 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c0a:	68cd      	ldr	r5, [r1, #12]
          break;
 8000c0c:	e7bd      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c0e:	68cd      	ldr	r5, [r1, #12]
 8000c10:	3504      	adds	r5, #4
          break;
 8000c12:	e7ba      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c14:	68cd      	ldr	r5, [r1, #12]
 8000c16:	3508      	adds	r5, #8
          break;
 8000c18:	e7b7      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c1a:	68cd      	ldr	r5, [r1, #12]
 8000c1c:	350c      	adds	r5, #12
          break;
 8000c1e:	e7b4      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000c20:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c22:	2508      	movs	r5, #8
 8000c24:	e7b1      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c26:	2500      	movs	r5, #0
 8000c28:	e7af      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2a:	2504      	movs	r5, #4
 8000c2c:	e7ad      	b.n	8000b8a <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c2e:	f100 0c04 	add.w	ip, r0, #4
 8000c32:	e7ad      	b.n	8000b90 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c34:	f1a4 0208 	sub.w	r2, r4, #8
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	e7ac      	b.n	8000b96 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <HAL_GPIO_Init+0x102>
 8000c40:	2300      	movs	r3, #0
 8000c42:	40bb      	lsls	r3, r7
 8000c44:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000c48:	3202      	adds	r2, #2
 8000c4a:	4f42      	ldr	r7, [pc, #264]	; (8000d54 <HAL_GPIO_Init+0x214>)
 8000c4c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c50:	684b      	ldr	r3, [r1, #4]
 8000c52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c56:	d05b      	beq.n	8000d10 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c58:	4a40      	ldr	r2, [pc, #256]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	4333      	orrs	r3, r6
 8000c5e:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c60:	684b      	ldr	r3, [r1, #4]
 8000c62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c66:	d059      	beq.n	8000d1c <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c68:	4a3c      	ldr	r2, [pc, #240]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c6a:	6853      	ldr	r3, [r2, #4]
 8000c6c:	4333      	orrs	r3, r6
 8000c6e:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c70:	684b      	ldr	r3, [r1, #4]
 8000c72:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c76:	d057      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c78:	4a38      	ldr	r2, [pc, #224]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c7a:	6893      	ldr	r3, [r2, #8]
 8000c7c:	4333      	orrs	r3, r6
 8000c7e:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c80:	684b      	ldr	r3, [r1, #4]
 8000c82:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000c86:	d055      	beq.n	8000d34 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c88:	4a34      	ldr	r2, [pc, #208]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000c8a:	68d3      	ldr	r3, [r2, #12]
 8000c8c:	431e      	orrs	r6, r3
 8000c8e:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000c90:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	680b      	ldr	r3, [r1, #0]
 8000c94:	fa33 f204 	lsrs.w	r2, r3, r4
 8000c98:	d052      	beq.n	8000d40 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000ca2:	ea32 0303 	bics.w	r3, r2, r3
 8000ca6:	d1f3      	bne.n	8000c90 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000ca8:	684b      	ldr	r3, [r1, #4]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	f63f af4d 	bhi.w	8000b4a <HAL_GPIO_Init+0xa>
 8000cb0:	2b12      	cmp	r3, #18
 8000cb2:	f63f af6a 	bhi.w	8000b8a <HAL_GPIO_Init+0x4a>
 8000cb6:	a701      	add	r7, pc, #4	; (adr r7, 8000cbc <HAL_GPIO_Init+0x17c>)
 8000cb8:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000cbc:	08000b73 	.word	0x08000b73
 8000cc0:	08000c0b 	.word	0x08000c0b
 8000cc4:	08000c15 	.word	0x08000c15
 8000cc8:	08000c27 	.word	0x08000c27
 8000ccc:	08000b8b 	.word	0x08000b8b
 8000cd0:	08000b8b 	.word	0x08000b8b
 8000cd4:	08000b8b 	.word	0x08000b8b
 8000cd8:	08000b8b 	.word	0x08000b8b
 8000cdc:	08000b8b 	.word	0x08000b8b
 8000ce0:	08000b8b 	.word	0x08000b8b
 8000ce4:	08000b8b 	.word	0x08000b8b
 8000ce8:	08000b8b 	.word	0x08000b8b
 8000cec:	08000b8b 	.word	0x08000b8b
 8000cf0:	08000b8b 	.word	0x08000b8b
 8000cf4:	08000b8b 	.word	0x08000b8b
 8000cf8:	08000b8b 	.word	0x08000b8b
 8000cfc:	08000b8b 	.word	0x08000b8b
 8000d00:	08000c0f 	.word	0x08000c0f
 8000d04:	08000c1b 	.word	0x08000c1b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e79a      	b.n	8000c42 <HAL_GPIO_Init+0x102>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e798      	b.n	8000c42 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	ea23 0306 	bic.w	r3, r3, r6
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e7a1      	b.n	8000c60 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d1e:	6853      	ldr	r3, [r2, #4]
 8000d20:	ea23 0306 	bic.w	r3, r3, r6
 8000d24:	6053      	str	r3, [r2, #4]
 8000d26:	e7a3      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d2a:	6893      	ldr	r3, [r2, #8]
 8000d2c:	ea23 0306 	bic.w	r3, r3, r6
 8000d30:	6093      	str	r3, [r2, #8]
 8000d32:	e7a5      	b.n	8000c80 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_GPIO_Init+0x21c>)
 8000d36:	68d3      	ldr	r3, [r2, #12]
 8000d38:	ea23 0606 	bic.w	r6, r3, r6
 8000d3c:	60d6      	str	r6, [r2, #12]
 8000d3e:	e7a7      	b.n	8000c90 <HAL_GPIO_Init+0x150>
  }
}
 8000d40:	b002      	add	sp, #8
 8000d42:	bcf0      	pop	{r4, r5, r6, r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	10220000 	.word	0x10220000
 8000d4c:	10310000 	.word	0x10310000
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	b10a      	cbz	r2, 8000d66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d62:	6101      	str	r1, [r0, #16]
 8000d64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	6101      	str	r1, [r0, #16]
  }
}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d6c:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	ea01 0203 	and.w	r2, r1, r3
 8000d72:	ea21 0103 	bic.w	r1, r1, r3
 8000d76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d7a:	6101      	str	r1, [r0, #16]
}
 8000d7c:	4770      	bx	lr

08000d7e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d7e:	6803      	ldr	r3, [r0, #0]
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000d86:	d101      	bne.n	8000d8c <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000d88:	2000      	movs	r0, #0
}
 8000d8a:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d90:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000d96:	2220      	movs	r2, #32
 8000d98:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d9c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000da0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000da2:	f042 0204 	orr.w	r2, r2, #4
 8000da6:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8000da8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000dac:	2001      	movs	r0, #1
 8000dae:	4770      	bx	lr

08000db0 <I2C_WaitOnFlagUntilTimeout>:
{
 8000db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db4:	4607      	mov	r7, r0
 8000db6:	460d      	mov	r5, r1
 8000db8:	4690      	mov	r8, r2
 8000dba:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dbc:	e022      	b.n	8000e04 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dbe:	f7ff fa07 	bl	80001d0 <HAL_GetTick>
 8000dc2:	9b06      	ldr	r3, [sp, #24]
 8000dc4:	1ac0      	subs	r0, r0, r3
 8000dc6:	42b0      	cmp	r0, r6
 8000dc8:	d800      	bhi.n	8000dcc <I2C_WaitOnFlagUntilTimeout+0x1c>
 8000dca:	b9de      	cbnz	r6, 8000e04 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000dd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ddc:	f042 0220 	orr.w	r2, r2, #32
 8000de0:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000de2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
 8000de8:	e01a      	b.n	8000e20 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	699c      	ldr	r4, [r3, #24]
 8000dee:	ea25 0404 	bic.w	r4, r5, r4
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fab4 f484 	clz	r4, r4
 8000df8:	0964      	lsrs	r4, r4, #5
 8000dfa:	45a0      	cmp	r8, r4
 8000dfc:	d10f      	bne.n	8000e1e <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8000dfe:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000e02:	d1dc      	bne.n	8000dbe <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e04:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d1ee      	bne.n	8000dea <I2C_WaitOnFlagUntilTimeout+0x3a>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	695c      	ldr	r4, [r3, #20]
 8000e10:	ea25 0404 	bic.w	r4, r5, r4
 8000e14:	b2a4      	uxth	r4, r4
 8000e16:	fab4 f484 	clz	r4, r4
 8000e1a:	0964      	lsrs	r4, r4, #5
 8000e1c:	e7ed      	b.n	8000dfa <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8000e1e:	2000      	movs	r0, #0
}
 8000e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e28:	4605      	mov	r5, r0
 8000e2a:	460e      	mov	r6, r1
 8000e2c:	4617      	mov	r7, r2
 8000e2e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e30:	e03d      	b.n	8000eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e38:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000e40:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e46:	2220      	movs	r2, #32
 8000e48:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e4c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e50:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e52:	f042 0204 	orr.w	r2, r2, #4
 8000e56:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e58:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	e034      	b.n	8000eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e60:	f7ff f9b6 	bl	80001d0 <HAL_GetTick>
 8000e64:	eba0 0008 	sub.w	r0, r0, r8
 8000e68:	42b8      	cmp	r0, r7
 8000e6a:	d800      	bhi.n	8000e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8000e6c:	b9ff      	cbnz	r7, 8000eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e72:	2220      	movs	r2, #32
 8000e74:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e78:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e7e:	f042 0220 	orr.w	r2, r2, #32
 8000e82:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000e84:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8000e88:	2001      	movs	r0, #1
 8000e8a:	e01e      	b.n	8000eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	699c      	ldr	r4, [r3, #24]
 8000e90:	ea26 0404 	bic.w	r4, r6, r4
 8000e94:	b2a4      	uxth	r4, r4
 8000e96:	3c00      	subs	r4, #0
 8000e98:	bf18      	it	ne
 8000e9a:	2401      	movne	r4, #1
 8000e9c:	b1a4      	cbz	r4, 8000ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000ea6:	d1c4      	bne.n	8000e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8000ea8:	f1b7 3fff 	cmp.w	r7, #4294967295
 8000eac:	d1d8      	bne.n	8000e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000eae:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d1ea      	bne.n	8000e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	695c      	ldr	r4, [r3, #20]
 8000eba:	ea26 0404 	bic.w	r4, r6, r4
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	3c00      	subs	r4, #0
 8000ec2:	bf18      	it	ne
 8000ec4:	2401      	movne	r4, #1
 8000ec6:	e7e9      	b.n	8000e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8000ec8:	2000      	movs	r0, #0
}
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000ed0 <I2C_MasterRequestWrite>:
{
 8000ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	4616      	mov	r6, r2
 8000eda:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000edc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d00d      	beq.n	8000efe <I2C_MasterRequestWrite+0x2e>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d00b      	beq.n	8000efe <I2C_MasterRequestWrite+0x2e>
 8000ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000eea:	d008      	beq.n	8000efe <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000eec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000eee:	2b12      	cmp	r3, #18
 8000ef0:	d10a      	bne.n	8000f08 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ef2:	6802      	ldr	r2, [r0, #0]
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e004      	b.n	8000f08 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f08:	9700      	str	r7, [sp, #0]
 8000f0a:	4633      	mov	r3, r6
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff ff4c 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8000f18:	b980      	cbnz	r0, 8000f3c <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f1a:	6923      	ldr	r3, [r4, #16]
 8000f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f20:	d116      	bne.n	8000f50 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000f28:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4632      	mov	r2, r6
 8000f2e:	4913      	ldr	r1, [pc, #76]	; (8000f7c <I2C_MasterRequestWrite+0xac>)
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff ff77 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f36:	b9f8      	cbnz	r0, 8000f78 <I2C_MasterRequestWrite+0xa8>
}
 8000f38:	b003      	add	sp, #12
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f44:	d002      	beq.n	8000f4c <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	e7f3      	b.n	8000f38 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000f50:	11eb      	asrs	r3, r5, #7
 8000f52:	6822      	ldr	r2, [r4, #0]
 8000f54:	f003 0306 	and.w	r3, r3, #6
 8000f58:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000f5c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4632      	mov	r2, r6
 8000f62:	4907      	ldr	r1, [pc, #28]	; (8000f80 <I2C_MasterRequestWrite+0xb0>)
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff ff5d 	bl	8000e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f6a:	b918      	cbnz	r0, 8000f74 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	b2ed      	uxtb	r5, r5
 8000f70:	611d      	str	r5, [r3, #16]
 8000f72:	e7da      	b.n	8000f2a <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8000f78:	2001      	movs	r0, #1
 8000f7a:	e7dd      	b.n	8000f38 <I2C_MasterRequestWrite+0x68>
 8000f7c:	00010002 	.word	0x00010002
 8000f80:	00010008 	.word	0x00010008

08000f84 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	4604      	mov	r4, r0
 8000f88:	460d      	mov	r5, r1
 8000f8a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f94:	d11c      	bne.n	8000fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff fef1 	bl	8000d7e <I2C_IsAcknowledgeFailed>
 8000f9c:	b9d0      	cbnz	r0, 8000fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000f9e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000fa2:	d0f3      	beq.n	8000f8c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fa4:	f7ff f914 	bl	80001d0 <HAL_GetTick>
 8000fa8:	1b80      	subs	r0, r0, r6
 8000faa:	42a8      	cmp	r0, r5
 8000fac:	d801      	bhi.n	8000fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d1ec      	bne.n	8000f8c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fbc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fc2:	f042 0220 	orr.w	r2, r2, #32
 8000fc6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000fc8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
 8000fce:	e000      	b.n	8000fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000fd0:	2000      	movs	r0, #0
}
 8000fd2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	e7fc      	b.n	8000fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08000fd8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f013 0f04 	tst.w	r3, #4
 8000fe8:	d11c      	bne.n	8001024 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000fea:	4620      	mov	r0, r4
 8000fec:	f7ff fec7 	bl	8000d7e <I2C_IsAcknowledgeFailed>
 8000ff0:	b9d0      	cbnz	r0, 8001028 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000ff2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000ff6:	d0f3      	beq.n	8000fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ff8:	f7ff f8ea 	bl	80001d0 <HAL_GetTick>
 8000ffc:	1b80      	subs	r0, r0, r6
 8000ffe:	42a8      	cmp	r0, r5
 8001000:	d801      	bhi.n	8001006 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d1ec      	bne.n	8000fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001006:	2300      	movs	r3, #0
 8001008:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800100a:	2220      	movs	r2, #32
 800100c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001010:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001014:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001016:	f042 0220 	orr.w	r2, r2, #32
 800101a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800101c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001020:	2001      	movs	r0, #1
 8001022:	e000      	b.n	8001026 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001024:	2000      	movs	r0, #0
}
 8001026:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
 800102a:	e7fc      	b.n	8001026 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

0800102c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800102c:	2800      	cmp	r0, #0
 800102e:	f000 80cc 	beq.w	80011ca <HAL_I2C_Init+0x19e>
{
 8001032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001034:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001036:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800103a:	2b00      	cmp	r3, #0
 800103c:	d077      	beq.n	800112e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800103e:	2324      	movs	r3, #36	; 0x24
 8001040:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001044:	6822      	ldr	r2, [r4, #0]
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800104e:	6822      	ldr	r2, [r4, #0]
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001056:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001060:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001062:	f000 fc8d 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001066:	6862      	ldr	r2, [r4, #4]
 8001068:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <HAL_I2C_Init+0x1a8>)
 800106a:	429a      	cmp	r2, r3
 800106c:	d864      	bhi.n	8001138 <HAL_I2C_Init+0x10c>
 800106e:	4b5a      	ldr	r3, [pc, #360]	; (80011d8 <HAL_I2C_Init+0x1ac>)
 8001070:	4298      	cmp	r0, r3
 8001072:	bf8c      	ite	hi
 8001074:	2300      	movhi	r3, #0
 8001076:	2301      	movls	r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	f040 80a8 	bne.w	80011ce <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800107e:	4d57      	ldr	r5, [pc, #348]	; (80011dc <HAL_I2C_Init+0x1b0>)
 8001080:	fba5 3500 	umull	r3, r5, r5, r0
 8001084:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001086:	6826      	ldr	r6, [r4, #0]
 8001088:	6871      	ldr	r1, [r6, #4]
 800108a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800108e:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8001092:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001094:	6821      	ldr	r1, [r4, #0]
 8001096:	6a0b      	ldr	r3, [r1, #32]
 8001098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800109c:	6865      	ldr	r5, [r4, #4]
 800109e:	4a4d      	ldr	r2, [pc, #308]	; (80011d4 <HAL_I2C_Init+0x1a8>)
 80010a0:	4295      	cmp	r5, r2
 80010a2:	d84f      	bhi.n	8001144 <HAL_I2C_Init+0x118>
 80010a4:	1c7a      	adds	r2, r7, #1
 80010a6:	4313      	orrs	r3, r2
 80010a8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010aa:	6825      	ldr	r5, [r4, #0]
 80010ac:	69e9      	ldr	r1, [r5, #28]
 80010ae:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80010b2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80010b6:	6863      	ldr	r3, [r4, #4]
 80010b8:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <HAL_I2C_Init+0x1a8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d84c      	bhi.n	8001158 <HAL_I2C_Init+0x12c>
 80010be:	3801      	subs	r0, #1
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80010c6:	3001      	adds	r0, #1
 80010c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010cc:	4218      	tst	r0, r3
 80010ce:	d078      	beq.n	80011c2 <HAL_I2C_Init+0x196>
 80010d0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80010d4:	430b      	orrs	r3, r1
 80010d6:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010d8:	6821      	ldr	r1, [r4, #0]
 80010da:	680b      	ldr	r3, [r1, #0]
 80010dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80010e0:	69e2      	ldr	r2, [r4, #28]
 80010e2:	6a20      	ldr	r0, [r4, #32]
 80010e4:	4302      	orrs	r2, r0
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010ea:	6821      	ldr	r1, [r4, #0]
 80010ec:	688b      	ldr	r3, [r1, #8]
 80010ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010f6:	6922      	ldr	r2, [r4, #16]
 80010f8:	68e0      	ldr	r0, [r4, #12]
 80010fa:	4302      	orrs	r2, r0
 80010fc:	4313      	orrs	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001100:	6821      	ldr	r1, [r4, #0]
 8001102:	68cb      	ldr	r3, [r1, #12]
 8001104:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001108:	6962      	ldr	r2, [r4, #20]
 800110a:	69a0      	ldr	r0, [r4, #24]
 800110c:	4302      	orrs	r2, r0
 800110e:	4313      	orrs	r3, r2
 8001110:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001112:	6822      	ldr	r2, [r4, #0]
 8001114:	6813      	ldr	r3, [r2, #0]
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111c:	2000      	movs	r0, #0
 800111e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001120:	2320      	movs	r3, #32
 8001122:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001126:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001128:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800112e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001132:	f001 fded 	bl	8002d10 <HAL_I2C_MspInit>
 8001136:	e782      	b.n	800103e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_I2C_Init+0x1b4>)
 800113a:	4298      	cmp	r0, r3
 800113c:	bf8c      	ite	hi
 800113e:	2300      	movhi	r3, #0
 8001140:	2301      	movls	r3, #1
 8001142:	e799      	b.n	8001078 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001144:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001148:	fb02 f207 	mul.w	r2, r2, r7
 800114c:	4d25      	ldr	r5, [pc, #148]	; (80011e4 <HAL_I2C_Init+0x1b8>)
 800114e:	fba5 5202 	umull	r5, r2, r5, r2
 8001152:	0992      	lsrs	r2, r2, #6
 8001154:	3201      	adds	r2, #1
 8001156:	e7a6      	b.n	80010a6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001158:	68a2      	ldr	r2, [r4, #8]
 800115a:	b9ba      	cbnz	r2, 800118c <HAL_I2C_Init+0x160>
 800115c:	1e46      	subs	r6, r0, #1
 800115e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001162:	fbb6 f6f7 	udiv	r6, r6, r7
 8001166:	3601      	adds	r6, #1
 8001168:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800116c:	fab6 f686 	clz	r6, r6
 8001170:	0976      	lsrs	r6, r6, #5
 8001172:	bb46      	cbnz	r6, 80011c6 <HAL_I2C_Init+0x19a>
 8001174:	b9c2      	cbnz	r2, 80011a8 <HAL_I2C_Init+0x17c>
 8001176:	1e42      	subs	r2, r0, #1
 8001178:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800117c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001180:	3201      	adds	r2, #1
 8001182:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001186:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800118a:	e7a3      	b.n	80010d4 <HAL_I2C_Init+0xa8>
 800118c:	1e46      	subs	r6, r0, #1
 800118e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001192:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001196:	fbb6 f6f7 	udiv	r6, r6, r7
 800119a:	3601      	adds	r6, #1
 800119c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80011a0:	fab6 f686 	clz	r6, r6
 80011a4:	0976      	lsrs	r6, r6, #5
 80011a6:	e7e4      	b.n	8001172 <HAL_I2C_Init+0x146>
 80011a8:	1e42      	subs	r2, r0, #1
 80011aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80011b6:	3201      	adds	r2, #1
 80011b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80011bc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80011c0:	e788      	b.n	80010d4 <HAL_I2C_Init+0xa8>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e786      	b.n	80010d4 <HAL_I2C_Init+0xa8>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e784      	b.n	80010d4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
}
 80011cc:	4770      	bx	lr
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
 80011d0:	e7ac      	b.n	800112c <HAL_I2C_Init+0x100>
 80011d2:	bf00      	nop
 80011d4:	000186a0 	.word	0x000186a0
 80011d8:	001e847f 	.word	0x001e847f
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	003d08ff 	.word	0x003d08ff
 80011e4:	10624dd3 	.word	0x10624dd3

080011e8 <HAL_I2C_Master_Transmit>:
{
 80011e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011ec:	b085      	sub	sp, #20
 80011ee:	4604      	mov	r4, r0
 80011f0:	460f      	mov	r7, r1
 80011f2:	4691      	mov	r9, r2
 80011f4:	4698      	mov	r8, r3
 80011f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7fe ffea 	bl	80001d0 <HAL_GetTick>
 80011fc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fe:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001202:	b2c0      	uxtb	r0, r0
 8001204:	2820      	cmp	r0, #32
 8001206:	d004      	beq.n	8001212 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001208:	2702      	movs	r7, #2
}
 800120a:	4638      	mov	r0, r7
 800120c:	b005      	add	sp, #20
 800120e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001212:	9500      	str	r5, [sp, #0]
 8001214:	2319      	movs	r3, #25
 8001216:	2201      	movs	r2, #1
 8001218:	494f      	ldr	r1, [pc, #316]	; (8001358 <HAL_I2C_Master_Transmit+0x170>)
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff fdc8 	bl	8000db0 <I2C_WaitOnFlagUntilTimeout>
 8001220:	2800      	cmp	r0, #0
 8001222:	f040 8092 	bne.w	800134a <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001226:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800122a:	2b01      	cmp	r3, #1
 800122c:	f000 808f 	beq.w	800134e <HAL_I2C_Master_Transmit+0x166>
 8001230:	2301      	movs	r3, #1
 8001232:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f012 0f01 	tst.w	r2, #1
 800123e:	d103      	bne.n	8001248 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001250:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001252:	2321      	movs	r3, #33	; 0x21
 8001254:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001258:	2310      	movs	r3, #16
 800125a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001262:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001266:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800126a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800126c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <HAL_I2C_Master_Transmit+0x174>)
 8001270:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001272:	462b      	mov	r3, r5
 8001274:	4632      	mov	r2, r6
 8001276:	4639      	mov	r1, r7
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff fe29 	bl	8000ed0 <I2C_MasterRequestWrite>
 800127e:	4607      	mov	r7, r0
 8001280:	2800      	cmp	r0, #0
 8001282:	d166      	bne.n	8001352 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001284:	2300      	movs	r3, #0
 8001286:	9303      	str	r3, [sp, #12]
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	9203      	str	r2, [sp, #12]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001294:	e011      	b.n	80012ba <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001298:	2b04      	cmp	r3, #4
 800129a:	d001      	beq.n	80012a0 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 800129c:	2701      	movs	r7, #1
 800129e:	e7b4      	b.n	800120a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a0:	6822      	ldr	r2, [r4, #0]
 80012a2:	6813      	ldr	r3, [r2, #0]
 80012a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e7f7      	b.n	800129c <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ac:	462a      	mov	r2, r5
 80012ae:	4631      	mov	r1, r6
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff fe91 	bl	8000fd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d12e      	bne.n	8001318 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80012ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d036      	beq.n	800132e <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c0:	462a      	mov	r2, r5
 80012c2:	4631      	mov	r1, r6
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff fe5d 	bl	8000f84 <I2C_WaitOnTXEFlagUntilTimeout>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d1e3      	bne.n	8001296 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80012d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012d8:	1c4b      	adds	r3, r1, #1
 80012da:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80012dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3b01      	subs	r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012e8:	3b01      	subs	r3, #1
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	6950      	ldr	r0, [r2, #20]
 80012f2:	f010 0f04 	tst.w	r0, #4
 80012f6:	d0d9      	beq.n	80012ac <HAL_I2C_Master_Transmit+0xc4>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0d7      	beq.n	80012ac <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012fc:	784b      	ldrb	r3, [r1, #1]
 80012fe:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001302:	3301      	adds	r3, #1
 8001304:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001306:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001310:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001312:	3b01      	subs	r3, #1
 8001314:	8523      	strh	r3, [r4, #40]	; 0x28
 8001316:	e7c9      	b.n	80012ac <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800131a:	2b04      	cmp	r3, #4
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800131e:	2701      	movs	r7, #1
 8001320:	e773      	b.n	800120a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001322:	6822      	ldr	r2, [r4, #0]
 8001324:	6813      	ldr	r3, [r2, #0]
 8001326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e7f7      	b.n	800131e <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800132e:	6822      	ldr	r2, [r4, #0]
 8001330:	6813      	ldr	r3, [r2, #0]
 8001332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001336:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001338:	2320      	movs	r3, #32
 800133a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800133e:	2300      	movs	r3, #0
 8001340:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001344:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001348:	e75f      	b.n	800120a <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 800134a:	2702      	movs	r7, #2
 800134c:	e75d      	b.n	800120a <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800134e:	2702      	movs	r7, #2
 8001350:	e75b      	b.n	800120a <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001352:	2701      	movs	r7, #1
 8001354:	e759      	b.n	800120a <HAL_I2C_Master_Transmit+0x22>
 8001356:	bf00      	nop
 8001358:	00100002 	.word	0x00100002
 800135c:	ffff0000 	.word	0xffff0000

08001360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001360:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <RCC_Delay+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <RCC_Delay+0x28>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	0a5b      	lsrs	r3, r3, #9
 800136e:	fb00 f303 	mul.w	r3, r0, r3
 8001372:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001374:	bf00      	nop
  }
  while (Delay --);
 8001376:	9b01      	ldr	r3, [sp, #4]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <RCC_Delay+0x14>
}
 8001380:	b002      	add	sp, #8
 8001382:	4770      	bx	lr
 8001384:	2000002c 	.word	0x2000002c
 8001388:	10624dd3 	.word	0x10624dd3

0800138c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800138c:	2800      	cmp	r0, #0
 800138e:	f000 81f1 	beq.w	8001774 <HAL_RCC_OscConfig+0x3e8>
{
 8001392:	b570      	push	{r4, r5, r6, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	f013 0f01 	tst.w	r3, #1
 800139e:	d02c      	beq.n	80013fa <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a0:	4baa      	ldr	r3, [pc, #680]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d01d      	beq.n	80013e8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ac:	4ba7      	ldr	r3, [pc, #668]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d012      	beq.n	80013de <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	6863      	ldr	r3, [r4, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013be:	d041      	beq.n	8001444 <HAL_RCC_OscConfig+0xb8>
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d155      	bne.n	8001470 <HAL_RCC_OscConfig+0xe4>
 80013c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e037      	b.n	800144e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013de:	4b9b      	ldr	r3, [pc, #620]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80013e6:	d0e7      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b98      	ldr	r3, [pc, #608]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013f0:	d003      	beq.n	80013fa <HAL_RCC_OscConfig+0x6e>
 80013f2:	6863      	ldr	r3, [r4, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 81bf 	beq.w	8001778 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	f013 0f02 	tst.w	r3, #2
 8001400:	d075      	beq.n	80014ee <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001402:	4b92      	ldr	r3, [pc, #584]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f013 0f0c 	tst.w	r3, #12
 800140a:	d05f      	beq.n	80014cc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800140c:	4b8f      	ldr	r3, [pc, #572]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d054      	beq.n	80014c2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001418:	6923      	ldr	r3, [r4, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8089 	beq.w	8001532 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8001420:	4b8b      	ldr	r3, [pc, #556]	; (8001650 <HAL_RCC_OscConfig+0x2c4>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001426:	f7fe fed3 	bl	80001d0 <HAL_GetTick>
 800142a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142c:	4b87      	ldr	r3, [pc, #540]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f013 0f02 	tst.w	r3, #2
 8001434:	d174      	bne.n	8001520 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7fe fecb 	bl	80001d0 <HAL_GetTick>
 800143a:	1b40      	subs	r0, r0, r5
 800143c:	2802      	cmp	r0, #2
 800143e:	d9f5      	bls.n	800142c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001440:	2003      	movs	r0, #3
 8001442:	e19e      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001444:	4a81      	ldr	r2, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144e:	6863      	ldr	r3, [r4, #4]
 8001450:	b343      	cbz	r3, 80014a4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001452:	f7fe febd 	bl	80001d0 <HAL_GetTick>
 8001456:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001458:	4b7c      	ldr	r3, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001460:	d1cb      	bne.n	80013fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001462:	f7fe feb5 	bl	80001d0 <HAL_GetTick>
 8001466:	1b40      	subs	r0, r0, r5
 8001468:	2864      	cmp	r0, #100	; 0x64
 800146a:	d9f5      	bls.n	8001458 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800146c:	2003      	movs	r0, #3
 800146e:	e188      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d009      	beq.n	800148a <HAL_RCC_OscConfig+0xfe>
 8001476:	4b75      	ldr	r3, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e7e1      	b.n	800144e <HAL_RCC_OscConfig+0xc2>
 800148a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800148e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e7d4      	b.n	800144e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80014a4:	f7fe fe94 	bl	80001d0 <HAL_GetTick>
 80014a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014b2:	d0a2      	beq.n	80013fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7fe fe8c 	bl	80001d0 <HAL_GetTick>
 80014b8:	1b40      	subs	r0, r0, r5
 80014ba:	2864      	cmp	r0, #100	; 0x64
 80014bc:	d9f5      	bls.n	80014aa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80014be:	2003      	movs	r0, #3
 80014c0:	e15f      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014c2:	4b62      	ldr	r3, [pc, #392]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014ca:	d1a5      	bne.n	8001418 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014cc:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f013 0f02 	tst.w	r3, #2
 80014d4:	d003      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
 80014d6:	6923      	ldr	r3, [r4, #16]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	f040 814f 	bne.w	800177c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4a5b      	ldr	r2, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014e6:	6961      	ldr	r1, [r4, #20]
 80014e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014ec:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	f013 0f08 	tst.w	r3, #8
 80014f4:	d032      	beq.n	800155c <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f6:	69a3      	ldr	r3, [r4, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d045      	beq.n	8001588 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <HAL_RCC_OscConfig+0x2c8>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001502:	f7fe fe65 	bl	80001d0 <HAL_GetTick>
 8001506:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001508:	4b50      	ldr	r3, [pc, #320]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	f013 0f02 	tst.w	r3, #2
 8001510:	d121      	bne.n	8001556 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7fe fe5d 	bl	80001d0 <HAL_GetTick>
 8001516:	1b40      	subs	r0, r0, r5
 8001518:	2802      	cmp	r0, #2
 800151a:	d9f5      	bls.n	8001508 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 800151c:	2003      	movs	r0, #3
 800151e:	e130      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4a4a      	ldr	r2, [pc, #296]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001528:	6961      	ldr	r1, [r4, #20]
 800152a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e7dd      	b.n	80014ee <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_OscConfig+0x2c4>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001538:	f7fe fe4a 	bl	80001d0 <HAL_GetTick>
 800153c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	4b43      	ldr	r3, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f013 0f02 	tst.w	r3, #2
 8001546:	d0d2      	beq.n	80014ee <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7fe fe42 	bl	80001d0 <HAL_GetTick>
 800154c:	1b40      	subs	r0, r0, r5
 800154e:	2802      	cmp	r0, #2
 8001550:	d9f5      	bls.n	800153e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001552:	2003      	movs	r0, #3
 8001554:	e115      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff ff02 	bl	8001360 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f013 0f04 	tst.w	r3, #4
 8001562:	f000 8097 	beq.w	8001694 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800156e:	d11d      	bne.n	80015ac <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001578:	61da      	str	r2, [r3, #28]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001584:	2501      	movs	r5, #1
 8001586:	e012      	b.n	80015ae <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_RCC_OscConfig+0x2c8>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800158e:	f7fe fe1f 	bl	80001d0 <HAL_GetTick>
 8001592:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	f013 0f02 	tst.w	r3, #2
 800159c:	d0de      	beq.n	800155c <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7fe fe17 	bl	80001d0 <HAL_GetTick>
 80015a2:	1b40      	subs	r0, r0, r5
 80015a4:	2802      	cmp	r0, #2
 80015a6:	d9f5      	bls.n	8001594 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80015a8:	2003      	movs	r0, #3
 80015aa:	e0ea      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80015ac:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_RCC_OscConfig+0x2cc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015b6:	d011      	beq.n	80015dc <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	68e3      	ldr	r3, [r4, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d022      	beq.n	8001604 <HAL_RCC_OscConfig+0x278>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d138      	bne.n	8001634 <HAL_RCC_OscConfig+0x2a8>
 80015c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	621a      	str	r2, [r3, #32]
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	f022 0204 	bic.w	r2, r2, #4
 80015d8:	621a      	str	r2, [r3, #32]
 80015da:	e018      	b.n	800160e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_RCC_OscConfig+0x2cc>)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015e6:	f7fe fdf3 	bl	80001d0 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_RCC_OscConfig+0x2cc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015f4:	d1e0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7fe fdeb 	bl	80001d0 <HAL_GetTick>
 80015fa:	1b80      	subs	r0, r0, r6
 80015fc:	2864      	cmp	r0, #100	; 0x64
 80015fe:	d9f5      	bls.n	80015ec <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
 8001602:	e0be      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 8001606:	6a13      	ldr	r3, [r2, #32]
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160e:	68e3      	ldr	r3, [r4, #12]
 8001610:	b373      	cbz	r3, 8001670 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001612:	f7fe fddd 	bl	80001d0 <HAL_GetTick>
 8001616:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f013 0f02 	tst.w	r3, #2
 8001620:	d137      	bne.n	8001692 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7fe fdd5 	bl	80001d0 <HAL_GetTick>
 8001626:	1b80      	subs	r0, r0, r6
 8001628:	f241 3388 	movw	r3, #5000	; 0x1388
 800162c:	4298      	cmp	r0, r3
 800162e:	d9f3      	bls.n	8001618 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8001630:	2003      	movs	r0, #3
 8001632:	e0a6      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	2b05      	cmp	r3, #5
 8001636:	d011      	beq.n	800165c <HAL_RCC_OscConfig+0x2d0>
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <HAL_RCC_OscConfig+0x2c0>)
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	621a      	str	r2, [r3, #32]
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	f022 0204 	bic.w	r2, r2, #4
 8001648:	621a      	str	r2, [r3, #32]
 800164a:	e7e0      	b.n	800160e <HAL_RCC_OscConfig+0x282>
 800164c:	40021000 	.word	0x40021000
 8001650:	42420000 	.word	0x42420000
 8001654:	42420480 	.word	0x42420480
 8001658:	40007000 	.word	0x40007000
 800165c:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	f042 0204 	orr.w	r2, r2, #4
 8001664:	621a      	str	r2, [r3, #32]
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	621a      	str	r2, [r3, #32]
 800166e:	e7ce      	b.n	800160e <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8001670:	f7fe fdae 	bl	80001d0 <HAL_GetTick>
 8001674:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	f013 0f02 	tst.w	r3, #2
 800167e:	d008      	beq.n	8001692 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7fe fda6 	bl	80001d0 <HAL_GetTick>
 8001684:	1b80      	subs	r0, r0, r6
 8001686:	f241 3388 	movw	r3, #5000	; 0x1388
 800168a:	4298      	cmp	r0, r3
 800168c:	d9f3      	bls.n	8001676 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800168e:	2003      	movs	r0, #3
 8001690:	e077      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001692:	b9e5      	cbnz	r5, 80016ce <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001694:	69e3      	ldr	r3, [r4, #28]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d072      	beq.n	8001780 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 800169c:	6852      	ldr	r2, [r2, #4]
 800169e:	f002 020c 	and.w	r2, r2, #12
 80016a2:	2a08      	cmp	r2, #8
 80016a4:	d056      	beq.n	8001754 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d017      	beq.n	80016da <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_RCC_OscConfig+0x40c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016b0:	f7fe fd8e 	bl	80001d0 <HAL_GetTick>
 80016b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016be:	d047      	beq.n	8001750 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7fe fd86 	bl	80001d0 <HAL_GetTick>
 80016c4:	1b00      	subs	r0, r0, r4
 80016c6:	2802      	cmp	r0, #2
 80016c8:	d9f5      	bls.n	80016b6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80016ca:	2003      	movs	r0, #3
 80016cc:	e059      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4a31      	ldr	r2, [pc, #196]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 80016d0:	69d3      	ldr	r3, [r2, #28]
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	61d3      	str	r3, [r2, #28]
 80016d8:	e7dc      	b.n	8001694 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_RCC_OscConfig+0x40c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016e0:	f7fe fd76 	bl	80001d0 <HAL_GetTick>
 80016e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016ee:	d006      	beq.n	80016fe <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7fe fd6e 	bl	80001d0 <HAL_GetTick>
 80016f4:	1b40      	subs	r0, r0, r5
 80016f6:	2802      	cmp	r0, #2
 80016f8:	d9f5      	bls.n	80016e6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80016fa:	2003      	movs	r0, #3
 80016fc:	e041      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016fe:	6a23      	ldr	r3, [r4, #32]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d01a      	beq.n	800173c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001706:	4923      	ldr	r1, [pc, #140]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 8001708:	684b      	ldr	r3, [r1, #4]
 800170a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800170e:	6a22      	ldr	r2, [r4, #32]
 8001710:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001712:	4302      	orrs	r2, r0
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_RCC_OscConfig+0x40c>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800171e:	f7fe fd57 	bl	80001d0 <HAL_GetTick>
 8001722:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800172c:	d10e      	bne.n	800174c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7fe fd4f 	bl	80001d0 <HAL_GetTick>
 8001732:	1b00      	subs	r0, r0, r4
 8001734:	2802      	cmp	r0, #2
 8001736:	d9f5      	bls.n	8001724 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001738:	2003      	movs	r0, #3
 800173a:	e022      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 800173e:	6853      	ldr	r3, [r2, #4]
 8001740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001744:	68a1      	ldr	r1, [r4, #8]
 8001746:	430b      	orrs	r3, r1
 8001748:	6053      	str	r3, [r2, #4]
 800174a:	e7dc      	b.n	8001706 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800174c:	2000      	movs	r0, #0
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
 8001750:	2000      	movs	r0, #0
 8001752:	e016      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	2b01      	cmp	r3, #1
 8001756:	d016      	beq.n	8001786 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_RCC_OscConfig+0x408>)
 800175a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001760:	6a22      	ldr	r2, [r4, #32]
 8001762:	4291      	cmp	r1, r2
 8001764:	d111      	bne.n	800178a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001766:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800176a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176c:	4293      	cmp	r3, r2
 800176e:	d10e      	bne.n	800178e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001770:	2000      	movs	r0, #0
 8001772:	e006      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001774:	2001      	movs	r0, #1
}
 8001776:	4770      	bx	lr
        return HAL_ERROR;
 8001778:	2001      	movs	r0, #1
 800177a:	e002      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001780:	2000      	movs	r0, #0
}
 8001782:	b002      	add	sp, #8
 8001784:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
 8001788:	e7fb      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	e7f9      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
 800178e:	2001      	movs	r0, #1
 8001790:	e7f7      	b.n	8001782 <HAL_RCC_OscConfig+0x3f6>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	42420060 	.word	0x42420060

0800179c <HAL_RCC_GetSysClockFreq>:
{
 800179c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80017a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a2:	f10d 0c18 	add.w	ip, sp, #24
 80017a6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017aa:	f240 2301 	movw	r3, #513	; 0x201
 80017ae:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_GetSysClockFreq+0x60>)
 80017b4:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	2a08      	cmp	r2, #8
 80017bc:	d002      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80017be:	4810      	ldr	r0, [pc, #64]	; (8001800 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80017c0:	b006      	add	sp, #24
 80017c2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80017c8:	4462      	add	r2, ip
 80017ca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017d2:	d00c      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_RCC_GetSysClockFreq+0x60>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80017dc:	4463      	add	r3, ip
 80017de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <HAL_RCC_GetSysClockFreq+0x64>)
 80017e4:	fb00 f002 	mul.w	r0, r0, r2
 80017e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80017ec:	e7e8      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_RCC_GetSysClockFreq+0x68>)
 80017f0:	fb00 f002 	mul.w	r0, r0, r2
 80017f4:	e7e4      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x24>
 80017f6:	bf00      	nop
 80017f8:	08002fe8 	.word	0x08002fe8
 80017fc:	40021000 	.word	0x40021000
 8001800:	007a1200 	.word	0x007a1200
 8001804:	003d0900 	.word	0x003d0900

08001808 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001808:	2800      	cmp	r0, #0
 800180a:	f000 80a0 	beq.w	800194e <HAL_RCC_ClockConfig+0x146>
{
 800180e:	b570      	push	{r4, r5, r6, lr}
 8001810:	460d      	mov	r5, r1
 8001812:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <HAL_RCC_ClockConfig+0x158>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	428b      	cmp	r3, r1
 800181e:	d20b      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <HAL_RCC_ClockConfig+0x158>)
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	f023 0307 	bic.w	r3, r3, #7
 8001828:	430b      	orrs	r3, r1
 800182a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	428b      	cmp	r3, r1
 8001834:	f040 808d 	bne.w	8001952 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	f013 0f02 	tst.w	r3, #2
 800183e:	d017      	beq.n	8001870 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	f013 0f04 	tst.w	r3, #4
 8001844:	d004      	beq.n	8001850 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 8001848:	6853      	ldr	r3, [r2, #4]
 800184a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f013 0f08 	tst.w	r3, #8
 8001856:	d004      	beq.n	8001862 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4a42      	ldr	r2, [pc, #264]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 800185a:	6853      	ldr	r3, [r2, #4]
 800185c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001860:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001862:	4a40      	ldr	r2, [pc, #256]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 8001864:	6853      	ldr	r3, [r2, #4]
 8001866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800186a:	68a1      	ldr	r1, [r4, #8]
 800186c:	430b      	orrs	r3, r1
 800186e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	f013 0f01 	tst.w	r3, #1
 8001876:	d031      	beq.n	80018dc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d020      	beq.n	80018c0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187e:	2b02      	cmp	r3, #2
 8001880:	d025      	beq.n	80018ce <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4a38      	ldr	r2, [pc, #224]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	f012 0f02 	tst.w	r2, #2
 800188a:	d064      	beq.n	8001956 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 800188e:	684a      	ldr	r2, [r1, #4]
 8001890:	f022 0203 	bic.w	r2, r2, #3
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001898:	f7fe fc9a 	bl	80001d0 <HAL_GetTick>
 800189c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	6862      	ldr	r2, [r4, #4]
 80018a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018ac:	d016      	beq.n	80018dc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f7fe fc8f 	bl	80001d0 <HAL_GetTick>
 80018b2:	1b80      	subs	r0, r0, r6
 80018b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80018b8:	4298      	cmp	r0, r3
 80018ba:	d9f0      	bls.n	800189e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80018bc:	2003      	movs	r0, #3
 80018be:	e045      	b.n	800194c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80018c8:	d1e0      	bne.n	800188c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
 80018cc:	e03e      	b.n	800194c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ce:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80018d6:	d1d9      	bne.n	800188c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80018d8:	2001      	movs	r0, #1
 80018da:	e037      	b.n	800194c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_RCC_ClockConfig+0x158>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	42ab      	cmp	r3, r5
 80018e6:	d90a      	bls.n	80018fe <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e8:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <HAL_RCC_ClockConfig+0x158>)
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	f023 0307 	bic.w	r3, r3, #7
 80018f0:	432b      	orrs	r3, r5
 80018f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f4:	6813      	ldr	r3, [r2, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	42ab      	cmp	r3, r5
 80018fc:	d12d      	bne.n	800195a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	f013 0f04 	tst.w	r3, #4
 8001904:	d006      	beq.n	8001914 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 8001908:	6853      	ldr	r3, [r2, #4]
 800190a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800190e:	68e1      	ldr	r1, [r4, #12]
 8001910:	430b      	orrs	r3, r1
 8001912:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	f013 0f08 	tst.w	r3, #8
 800191a:	d007      	beq.n	800192c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 800191e:	6853      	ldr	r3, [r2, #4]
 8001920:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001924:	6921      	ldr	r1, [r4, #16]
 8001926:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800192a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192c:	f7ff ff36 	bl	800179c <HAL_RCC_GetSysClockFreq>
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RCC_ClockConfig+0x15c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x160>)
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	40d8      	lsrs	r0, r3
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x164>)
 8001940:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x168>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f7fe fc01 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800194a:	2000      	movs	r0, #0
}
 800194c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800194e:	2001      	movs	r0, #1
}
 8001950:	4770      	bx	lr
    return HAL_ERROR;
 8001952:	2001      	movs	r0, #1
 8001954:	e7fa      	b.n	800194c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001956:	2001      	movs	r0, #1
 8001958:	e7f8      	b.n	800194c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800195a:	2001      	movs	r0, #1
 800195c:	e7f6      	b.n	800194c <HAL_RCC_ClockConfig+0x144>
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000
 8001964:	40021000 	.word	0x40021000
 8001968:	08002fd0 	.word	0x08002fd0
 800196c:	2000002c 	.word	0x2000002c
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetHCLKFreq>:
}
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <HAL_RCC_GetHCLKFreq+0x8>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000002c 	.word	0x2000002c

08001980 <HAL_RCC_GetPCLK1Freq>:
{
 8001980:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001982:	f7ff fff7 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800198e:	4a03      	ldr	r2, [pc, #12]	; (800199c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001990:	5cd3      	ldrb	r3, [r2, r3]
}
 8001992:	40d8      	lsrs	r0, r3
 8001994:	bd08      	pop	{r3, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	08002fe0 	.word	0x08002fe0

080019a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019a0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a2:	6a03      	ldr	r3, [r0, #32]
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019ac:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019b0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019b4:	680c      	ldr	r4, [r1, #0]
 80019b6:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019ba:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019be:	688b      	ldr	r3, [r1, #8]
 80019c0:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019c2:	4c0d      	ldr	r4, [pc, #52]	; (80019f8 <TIM_OC1_SetConfig+0x58>)
 80019c4:	42a0      	cmp	r0, r4
 80019c6:	d009      	beq.n	80019dc <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019c8:	4c0b      	ldr	r4, [pc, #44]	; (80019f8 <TIM_OC1_SetConfig+0x58>)
 80019ca:	42a0      	cmp	r0, r4
 80019cc:	d00d      	beq.n	80019ea <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019ce:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019d0:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80019d2:	684a      	ldr	r2, [r1, #4]
 80019d4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019d6:	6203      	str	r3, [r0, #32]
}
 80019d8:	bc70      	pop	{r4, r5, r6}
 80019da:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80019dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80019e0:	68ca      	ldr	r2, [r1, #12]
 80019e2:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	e7ee      	b.n	80019c8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019ea:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80019ee:	694a      	ldr	r2, [r1, #20]
 80019f0:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80019f2:	698e      	ldr	r6, [r1, #24]
 80019f4:	4316      	orrs	r6, r2
 80019f6:	e7ea      	b.n	80019ce <TIM_OC1_SetConfig+0x2e>
 80019f8:	40012c00 	.word	0x40012c00

080019fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019fc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019fe:	6a03      	ldr	r3, [r0, #32]
 8001a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a08:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a0a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a0c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a10:	680c      	ldr	r4, [r1, #0]
 8001a12:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a18:	688c      	ldr	r4, [r1, #8]
 8001a1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a1e:	4c0f      	ldr	r4, [pc, #60]	; (8001a5c <TIM_OC3_SetConfig+0x60>)
 8001a20:	42a0      	cmp	r0, r4
 8001a22:	d009      	beq.n	8001a38 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a24:	4c0d      	ldr	r4, [pc, #52]	; (8001a5c <TIM_OC3_SetConfig+0x60>)
 8001a26:	42a0      	cmp	r0, r4
 8001a28:	d00e      	beq.n	8001a48 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a2a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a2c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a2e:	684a      	ldr	r2, [r1, #4]
 8001a30:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a32:	6203      	str	r3, [r0, #32]
}
 8001a34:	bc30      	pop	{r4, r5}
 8001a36:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a3c:	68cc      	ldr	r4, [r1, #12]
 8001a3e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a46:	e7ed      	b.n	8001a24 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a48:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a4c:	694c      	ldr	r4, [r1, #20]
 8001a4e:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a52:	698c      	ldr	r4, [r1, #24]
 8001a54:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8001a58:	e7e7      	b.n	8001a2a <TIM_OC3_SetConfig+0x2e>
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a60:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a62:	6a03      	ldr	r3, [r0, #32]
 8001a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a6e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a70:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a74:	680d      	ldr	r5, [r1, #0]
 8001a76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a7e:	688d      	ldr	r5, [r1, #8]
 8001a80:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a84:	4d07      	ldr	r5, [pc, #28]	; (8001aa4 <TIM_OC4_SetConfig+0x44>)
 8001a86:	42a8      	cmp	r0, r5
 8001a88:	d006      	beq.n	8001a98 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a8a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a8c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a8e:	684a      	ldr	r2, [r1, #4]
 8001a90:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a92:	6203      	str	r3, [r0, #32]
}
 8001a94:	bc30      	pop	{r4, r5}
 8001a96:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a98:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a9c:	694d      	ldr	r5, [r1, #20]
 8001a9e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001aa2:	e7f2      	b.n	8001a8a <TIM_OC4_SetConfig+0x2a>
 8001aa4:	40012c00 	.word	0x40012c00

08001aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aa8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001aaa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aac:	6a05      	ldr	r5, [r0, #32]
 8001aae:	f025 0501 	bic.w	r5, r5, #1
 8001ab2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ab4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ab6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001aba:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001abe:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001ac2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ac4:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ac6:	6203      	str	r3, [r0, #32]
}
 8001ac8:	bc30      	pop	{r4, r5}
 8001aca:	4770      	bx	lr

08001acc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001acc:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ace:	6a05      	ldr	r5, [r0, #32]
 8001ad0:	f025 0510 	bic.w	r5, r5, #16
 8001ad4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ad6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ad8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ada:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ade:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ae6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001aea:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001aec:	6203      	str	r3, [r0, #32]
}
 8001aee:	bc30      	pop	{r4, r5}
 8001af0:	4770      	bx	lr

08001af2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001af2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001af8:	430b      	orrs	r3, r1
 8001afa:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001afe:	6083      	str	r3, [r0, #8]
}
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001b04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d127      	bne.n	8001b5e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b14:	6802      	ldr	r2, [r0, #0]
 8001b16:	68d3      	ldr	r3, [r2, #12]
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1e:	6803      	ldr	r3, [r0, #0]
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_TIM_Base_Start_IT+0x64>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d010      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x44>
 8001b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2a:	d00d      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x44>
 8001b2c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d009      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x44>
 8001b34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d005      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001b44:	2000      	movs	r0, #0
 8001b46:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4e:	2a06      	cmp	r2, #6
 8001b50:	d007      	beq.n	8001b62 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	4770      	bx	lr
    return HAL_ERROR;
 8001b5e:	2001      	movs	r0, #1
 8001b60:	4770      	bx	lr
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <HAL_TIM_PWM_MspInit>:
}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001b6e:	4770      	bx	lr

08001b70 <HAL_TIM_IC_CaptureCallback>:
}
 8001b70:	4770      	bx	lr

08001b72 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_TriggerCallback>:
}
 8001b74:	4770      	bx	lr

08001b76 <HAL_TIM_IRQHandler>:
{
 8001b76:	b510      	push	{r4, lr}
 8001b78:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b7a:	6803      	ldr	r3, [r0, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	f012 0f02 	tst.w	r2, #2
 8001b82:	d011      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	f012 0f02 	tst.w	r2, #2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b8c:	f06f 0202 	mvn.w	r2, #2
 8001b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b96:	6803      	ldr	r3, [r0, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f013 0f03 	tst.w	r3, #3
 8001b9e:	d070      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ba0:	f7ff ffe6 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	f012 0f04 	tst.w	r2, #4
 8001bb0:	d012      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	f012 0f04 	tst.w	r2, #4
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bba:	f06f 0204 	mvn.w	r2, #4
 8001bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001bcc:	d05f      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff ffce 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	f012 0f08 	tst.w	r2, #8
 8001be0:	d012      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	f012 0f08 	tst.w	r2, #8
 8001be8:	d00e      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bea:	f06f 0208 	mvn.w	r2, #8
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f013 0f03 	tst.w	r3, #3
 8001bfc:	d04e      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7ff ffb6 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c04:	2300      	movs	r3, #0
 8001c06:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	f012 0f10 	tst.w	r2, #16
 8001c10:	d012      	beq.n	8001c38 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	f012 0f10 	tst.w	r2, #16
 8001c18:	d00e      	beq.n	8001c38 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c1a:	f06f 0210 	mvn.w	r2, #16
 8001c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c20:	2308      	movs	r3, #8
 8001c22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c2c:	d03d      	beq.n	8001caa <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff ff9e 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c34:	2300      	movs	r3, #0
 8001c36:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	f012 0f01 	tst.w	r2, #1
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	f012 0f01 	tst.w	r2, #1
 8001c48:	d136      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c52:	d003      	beq.n	8001c5c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c5a:	d134      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c6c:	d132      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	f012 0f20 	tst.w	r2, #32
 8001c76:	d003      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	f012 0f20 	tst.w	r2, #32
 8001c7e:	d130      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x16c>
}
 8001c80:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	f7ff ff74 	bl	8001b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff ff73 	bl	8001b72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c8c:	e78a      	b.n	8001ba4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff ff6d 	bl	8001b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff ff6c 	bl	8001b72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c9a:	e79b      	b.n	8001bd4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff ff66 	bl	8001b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff ff65 	bl	8001b72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ca8:	e7ac      	b.n	8001c04 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff ff5f 	bl	8001b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7ff ff5e 	bl	8001b72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cb6:	e7bd      	b.n	8001c34 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb8:	f06f 0201 	mvn.w	r2, #1
 8001cbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f000 ff28 	bl	8002b14 <HAL_TIM_PeriodElapsedCallback>
 8001cc4:	e7c1      	b.n	8001c4a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f000 faaa 	bl	8002226 <HAL_TIMEx_BreakCallback>
 8001cd2:	e7c3      	b.n	8001c5c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cd8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff ff4a 	bl	8001b74 <HAL_TIM_TriggerCallback>
 8001ce0:	e7c5      	b.n	8001c6e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ce2:	f06f 0220 	mvn.w	r2, #32
 8001ce6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f000 fa9b 	bl	8002224 <HAL_TIMEx_CommutCallback>
}
 8001cee:	e7c7      	b.n	8001c80 <HAL_TIM_IRQHandler+0x10a>

08001cf0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001cf0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <TIM_Base_SetConfig+0x70>)
 8001cf4:	4290      	cmp	r0, r2
 8001cf6:	d00a      	beq.n	8001d0e <TIM_Base_SetConfig+0x1e>
 8001cf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cfc:	d007      	beq.n	8001d0e <TIM_Base_SetConfig+0x1e>
 8001cfe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d02:	4290      	cmp	r0, r2
 8001d04:	d003      	beq.n	8001d0e <TIM_Base_SetConfig+0x1e>
 8001d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d0a:	4290      	cmp	r0, r2
 8001d0c:	d103      	bne.n	8001d16 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d12:	684a      	ldr	r2, [r1, #4]
 8001d14:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <TIM_Base_SetConfig+0x70>)
 8001d18:	4290      	cmp	r0, r2
 8001d1a:	d00a      	beq.n	8001d32 <TIM_Base_SetConfig+0x42>
 8001d1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d20:	d007      	beq.n	8001d32 <TIM_Base_SetConfig+0x42>
 8001d22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d26:	4290      	cmp	r0, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_Base_SetConfig+0x42>
 8001d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d2e:	4290      	cmp	r0, r2
 8001d30:	d103      	bne.n	8001d3a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d36:	68ca      	ldr	r2, [r1, #12]
 8001d38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d3e:	694a      	ldr	r2, [r1, #20]
 8001d40:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d42:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d44:	688b      	ldr	r3, [r1, #8]
 8001d46:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d48:	680b      	ldr	r3, [r1, #0]
 8001d4a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <TIM_Base_SetConfig+0x70>)
 8001d4e:	4298      	cmp	r0, r3
 8001d50:	d002      	beq.n	8001d58 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001d52:	2301      	movs	r3, #1
 8001d54:	6143      	str	r3, [r0, #20]
}
 8001d56:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001d58:	690b      	ldr	r3, [r1, #16]
 8001d5a:	6303      	str	r3, [r0, #48]	; 0x30
 8001d5c:	e7f9      	b.n	8001d52 <TIM_Base_SetConfig+0x62>
 8001d5e:	bf00      	nop
 8001d60:	40012c00 	.word	0x40012c00

08001d64 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001d64:	b340      	cbz	r0, 8001db8 <HAL_TIM_Base_Init+0x54>
{
 8001d66:	b510      	push	{r4, lr}
 8001d68:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d6e:	b1f3      	cbz	r3, 8001dae <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d76:	4621      	mov	r1, r4
 8001d78:	f851 0b04 	ldr.w	r0, [r1], #4
 8001d7c:	f7ff ffb8 	bl	8001cf0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001d8a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001d8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001d92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001da6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001daa:	2000      	movs	r0, #0
}
 8001dac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001dae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001db2:	f000 ffdf 	bl	8002d74 <HAL_TIM_Base_MspInit>
 8001db6:	e7db      	b.n	8001d70 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
}
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001dbc:	b340      	cbz	r0, 8001e10 <HAL_TIM_PWM_Init+0x54>
{
 8001dbe:	b510      	push	{r4, lr}
 8001dc0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dc6:	b1f3      	cbz	r3, 8001e06 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dce:	4621      	mov	r1, r4
 8001dd0:	f851 0b04 	ldr.w	r0, [r1], #4
 8001dd4:	f7ff ff8c 	bl	8001cf0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001de2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001de6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001dea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001df6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001dfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e02:	2000      	movs	r0, #0
}
 8001e04:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e0a:	f7ff feaf 	bl	8001b6c <HAL_TIM_PWM_MspInit>
 8001e0e:	e7db      	b.n	8001dc8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001e10:	2001      	movs	r0, #1
}
 8001e12:	4770      	bx	lr

08001e14 <TIM_OC2_SetConfig>:
{
 8001e14:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e16:	6a03      	ldr	r3, [r0, #32]
 8001e18:	f023 0310 	bic.w	r3, r3, #16
 8001e1c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e1e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001e20:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e22:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e24:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e28:	680d      	ldr	r5, [r1, #0]
 8001e2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001e2e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e32:	688d      	ldr	r5, [r1, #8]
 8001e34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e38:	4d0e      	ldr	r5, [pc, #56]	; (8001e74 <TIM_OC2_SetConfig+0x60>)
 8001e3a:	42a8      	cmp	r0, r5
 8001e3c:	d009      	beq.n	8001e52 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e3e:	4d0d      	ldr	r5, [pc, #52]	; (8001e74 <TIM_OC2_SetConfig+0x60>)
 8001e40:	42a8      	cmp	r0, r5
 8001e42:	d00e      	beq.n	8001e62 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8001e44:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e46:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e48:	684a      	ldr	r2, [r1, #4]
 8001e4a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e4c:	6203      	str	r3, [r0, #32]
}
 8001e4e:	bc30      	pop	{r4, r5}
 8001e50:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e56:	68cd      	ldr	r5, [r1, #12]
 8001e58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e60:	e7ed      	b.n	8001e3e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e62:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e66:	694d      	ldr	r5, [r1, #20]
 8001e68:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e6c:	698d      	ldr	r5, [r1, #24]
 8001e6e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001e72:	e7e7      	b.n	8001e44 <TIM_OC2_SetConfig+0x30>
 8001e74:	40012c00 	.word	0x40012c00

08001e78 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001e7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d060      	beq.n	8001f44 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8001e82:	4604      	mov	r4, r0
 8001e84:	460d      	mov	r5, r1
 8001e86:	2301      	movs	r3, #1
 8001e88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001e8c:	2a0c      	cmp	r2, #12
 8001e8e:	d81a      	bhi.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001e90:	e8df f002 	tbb	[pc, r2]
 8001e94:	19191907 	.word	0x19191907
 8001e98:	1919191d 	.word	0x1919191d
 8001e9c:	19191931 	.word	0x19191931
 8001ea0:	44          	.byte	0x44
 8001ea1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ea2:	6800      	ldr	r0, [r0, #0]
 8001ea4:	f7ff fd7c 	bl	80019a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ea8:	6822      	ldr	r2, [r4, #0]
 8001eaa:	6993      	ldr	r3, [r2, #24]
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001eb2:	6822      	ldr	r2, [r4, #0]
 8001eb4:	6993      	ldr	r3, [r2, #24]
 8001eb6:	f023 0304 	bic.w	r3, r3, #4
 8001eba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ebc:	6822      	ldr	r2, [r4, #0]
 8001ebe:	6993      	ldr	r3, [r2, #24]
 8001ec0:	6929      	ldr	r1, [r5, #16]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ecc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ece:	6800      	ldr	r0, [r0, #0]
 8001ed0:	f7ff ffa0 	bl	8001e14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	6993      	ldr	r3, [r2, #24]
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ede:	6822      	ldr	r2, [r4, #0]
 8001ee0:	6993      	ldr	r3, [r2, #24]
 8001ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ee6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ee8:	6822      	ldr	r2, [r4, #0]
 8001eea:	6993      	ldr	r3, [r2, #24]
 8001eec:	6929      	ldr	r1, [r5, #16]
 8001eee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ef2:	6193      	str	r3, [r2, #24]
      break;
 8001ef4:	e7e7      	b.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ef6:	6800      	ldr	r0, [r0, #0]
 8001ef8:	f7ff fd80 	bl	80019fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001efc:	6822      	ldr	r2, [r4, #0]
 8001efe:	69d3      	ldr	r3, [r2, #28]
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	69d3      	ldr	r3, [r2, #28]
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f10:	6822      	ldr	r2, [r4, #0]
 8001f12:	69d3      	ldr	r3, [r2, #28]
 8001f14:	6929      	ldr	r1, [r5, #16]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	61d3      	str	r3, [r2, #28]
      break;
 8001f1a:	e7d4      	b.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f1c:	6800      	ldr	r0, [r0, #0]
 8001f1e:	f7ff fd9f 	bl	8001a60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f22:	6822      	ldr	r2, [r4, #0]
 8001f24:	69d3      	ldr	r3, [r2, #28]
 8001f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f2a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	69d3      	ldr	r3, [r2, #28]
 8001f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f34:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	69d3      	ldr	r3, [r2, #28]
 8001f3a:	6929      	ldr	r1, [r5, #16]
 8001f3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f40:	61d3      	str	r3, [r2, #28]
      break;
 8001f42:	e7c0      	b.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8001f44:	2002      	movs	r0, #2
 8001f46:	e7c1      	b.n	8001ecc <HAL_TIM_PWM_ConfigChannel+0x54>

08001f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f48:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f4a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f4c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f50:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001f54:	430a      	orrs	r2, r1
 8001f56:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f58:	6082      	str	r2, [r0, #8]
}
 8001f5a:	bc10      	pop	{r4}
 8001f5c:	4770      	bx	lr

08001f5e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d066      	beq.n	8002034 <HAL_TIM_ConfigClockSource+0xd6>
{
 8001f66:	b510      	push	{r4, lr}
 8001f68:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	2302      	movs	r3, #2
 8001f72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f76:	6802      	ldr	r2, [r0, #0]
 8001f78:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f82:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f84:	680b      	ldr	r3, [r1, #0]
 8001f86:	2b60      	cmp	r3, #96	; 0x60
 8001f88:	d040      	beq.n	800200c <HAL_TIM_ConfigClockSource+0xae>
 8001f8a:	d822      	bhi.n	8001fd2 <HAL_TIM_ConfigClockSource+0x74>
 8001f8c:	2b40      	cmp	r3, #64	; 0x40
 8001f8e:	d047      	beq.n	8002020 <HAL_TIM_ConfigClockSource+0xc2>
 8001f90:	d90b      	bls.n	8001faa <HAL_TIM_ConfigClockSource+0x4c>
 8001f92:	2b50      	cmp	r3, #80	; 0x50
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f96:	68ca      	ldr	r2, [r1, #12]
 8001f98:	6849      	ldr	r1, [r1, #4]
 8001f9a:	6800      	ldr	r0, [r0, #0]
 8001f9c:	f7ff fd84 	bl	8001aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fa0:	2150      	movs	r1, #80	; 0x50
 8001fa2:	6820      	ldr	r0, [r4, #0]
 8001fa4:	f7ff fda5 	bl	8001af2 <TIM_ITRx_SetConfig>
      break;
 8001fa8:	e004      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d00c      	beq.n	8001fc8 <HAL_TIM_ConfigClockSource+0x6a>
 8001fae:	d908      	bls.n	8001fc2 <HAL_TIM_ConfigClockSource+0x64>
 8001fb0:	2b30      	cmp	r3, #48	; 0x30
 8001fb2:	d009      	beq.n	8001fc8 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fc0:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001fc2:	b10b      	cbz	r3, 8001fc8 <HAL_TIM_ConfigClockSource+0x6a>
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d1f5      	bne.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fc8:	4619      	mov	r1, r3
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	f7ff fd91 	bl	8001af2 <TIM_ITRx_SetConfig>
        break;
 8001fd0:	e7f0      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001fd2:	2b70      	cmp	r3, #112	; 0x70
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_TIM_ConfigClockSource+0x96>
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001fdc:	68cb      	ldr	r3, [r1, #12]
 8001fde:	684a      	ldr	r2, [r1, #4]
 8001fe0:	6889      	ldr	r1, [r1, #8]
 8001fe2:	6800      	ldr	r0, [r0, #0]
 8001fe4:	f7ff ffb0 	bl	8001f48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	6893      	ldr	r3, [r2, #8]
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff0:	6093      	str	r3, [r2, #8]
      break;
 8001ff2:	e7df      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001ff4:	68cb      	ldr	r3, [r1, #12]
 8001ff6:	684a      	ldr	r2, [r1, #4]
 8001ff8:	6889      	ldr	r1, [r1, #8]
 8001ffa:	6800      	ldr	r0, [r0, #0]
 8001ffc:	f7ff ffa4 	bl	8001f48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002000:	6822      	ldr	r2, [r4, #0]
 8002002:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002008:	6093      	str	r3, [r2, #8]
      break;
 800200a:	e7d3      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800200c:	68ca      	ldr	r2, [r1, #12]
 800200e:	6849      	ldr	r1, [r1, #4]
 8002010:	6800      	ldr	r0, [r0, #0]
 8002012:	f7ff fd5b 	bl	8001acc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002016:	2160      	movs	r1, #96	; 0x60
 8002018:	6820      	ldr	r0, [r4, #0]
 800201a:	f7ff fd6a 	bl	8001af2 <TIM_ITRx_SetConfig>
      break;
 800201e:	e7c9      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002020:	68ca      	ldr	r2, [r1, #12]
 8002022:	6849      	ldr	r1, [r1, #4]
 8002024:	6800      	ldr	r0, [r0, #0]
 8002026:	f7ff fd3f 	bl	8001aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800202a:	2140      	movs	r1, #64	; 0x40
 800202c:	6820      	ldr	r0, [r4, #0]
 800202e:	f7ff fd60 	bl	8001af2 <TIM_ITRx_SetConfig>
      break;
 8002032:	e7bf      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002034:	2002      	movs	r0, #2
}
 8002036:	4770      	bx	lr

08002038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002038:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800203a:	f001 011f 	and.w	r1, r1, #31
 800203e:	2301      	movs	r3, #1
 8002040:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002044:	6a03      	ldr	r3, [r0, #32]
 8002046:	ea23 0304 	bic.w	r3, r3, r4
 800204a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800204c:	6a03      	ldr	r3, [r0, #32]
 800204e:	fa02 f101 	lsl.w	r1, r2, r1
 8002052:	430b      	orrs	r3, r1
 8002054:	6203      	str	r3, [r0, #32]
}
 8002056:	bc10      	pop	{r4}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_TIM_PWM_Start>:
{
 800205c:	b510      	push	{r4, lr}
 800205e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002060:	4608      	mov	r0, r1
 8002062:	bb51      	cbnz	r1, 80020ba <HAL_TIM_PWM_Start+0x5e>
 8002064:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	bf18      	it	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d15b      	bne.n	800212c <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002074:	2800      	cmp	r0, #0
 8002076:	d139      	bne.n	80020ec <HAL_TIM_PWM_Start+0x90>
 8002078:	2302      	movs	r3, #2
 800207a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800207e:	2201      	movs	r2, #1
 8002080:	4601      	mov	r1, r0
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	f7ff ffd8 	bl	8002038 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_TIM_PWM_Start+0xd8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d03d      	beq.n	800210c <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <HAL_TIM_PWM_Start+0xd8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d03e      	beq.n	8002116 <HAL_TIM_PWM_Start+0xba>
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d03b      	beq.n	8002116 <HAL_TIM_PWM_Start+0xba>
 800209e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d037      	beq.n	8002116 <HAL_TIM_PWM_Start+0xba>
 80020a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d033      	beq.n	8002116 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020b6:	2000      	movs	r0, #0
 80020b8:	e039      	b.n	800212e <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020ba:	2904      	cmp	r1, #4
 80020bc:	d008      	beq.n	80020d0 <HAL_TIM_PWM_Start+0x74>
 80020be:	2908      	cmp	r1, #8
 80020c0:	d00d      	beq.n	80020de <HAL_TIM_PWM_Start+0x82>
 80020c2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	bf18      	it	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	e7cf      	b.n	8002070 <HAL_TIM_PWM_Start+0x14>
 80020d0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	bf18      	it	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	e7c8      	b.n	8002070 <HAL_TIM_PWM_Start+0x14>
 80020de:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	bf18      	it	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	e7c1      	b.n	8002070 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ec:	2804      	cmp	r0, #4
 80020ee:	d005      	beq.n	80020fc <HAL_TIM_PWM_Start+0xa0>
 80020f0:	2808      	cmp	r0, #8
 80020f2:	d007      	beq.n	8002104 <HAL_TIM_PWM_Start+0xa8>
 80020f4:	2302      	movs	r3, #2
 80020f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80020fa:	e7c0      	b.n	800207e <HAL_TIM_PWM_Start+0x22>
 80020fc:	2302      	movs	r3, #2
 80020fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002102:	e7bc      	b.n	800207e <HAL_TIM_PWM_Start+0x22>
 8002104:	2302      	movs	r3, #2
 8002106:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800210a:	e7b8      	b.n	800207e <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800210c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800210e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
 8002114:	e7bc      	b.n	8002090 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	2a06      	cmp	r2, #6
 800211e:	d007      	beq.n	8002130 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002128:	2000      	movs	r0, #0
 800212a:	e000      	b.n	800212e <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 800212c:	2001      	movs	r0, #1
}
 800212e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002130:	2000      	movs	r0, #0
 8002132:	e7fc      	b.n	800212e <HAL_TIM_PWM_Start+0xd2>
 8002134:	40012c00 	.word	0x40012c00

08002138 <HAL_TIM_PWM_Stop>:
{
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4604      	mov	r4, r0
 800213c:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800213e:	2200      	movs	r2, #0
 8002140:	6800      	ldr	r0, [r0, #0]
 8002142:	f7ff ff79 	bl	8002038 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_TIM_PWM_Stop+0x80>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d014      	beq.n	8002178 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	6a19      	ldr	r1, [r3, #32]
 8002152:	f241 1211 	movw	r2, #4369	; 0x1111
 8002156:	4211      	tst	r1, r2
 8002158:	d108      	bne.n	800216c <HAL_TIM_PWM_Stop+0x34>
 800215a:	6a19      	ldr	r1, [r3, #32]
 800215c:	f240 4244 	movw	r2, #1092	; 0x444
 8002160:	4211      	tst	r1, r2
 8002162:	d103      	bne.n	800216c <HAL_TIM_PWM_Stop+0x34>
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	b99d      	cbnz	r5, 8002196 <HAL_TIM_PWM_Stop+0x5e>
 800216e:	2301      	movs	r3, #1
 8002170:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002174:	2000      	movs	r0, #0
 8002176:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8002178:	6a19      	ldr	r1, [r3, #32]
 800217a:	f241 1211 	movw	r2, #4369	; 0x1111
 800217e:	4211      	tst	r1, r2
 8002180:	d1e5      	bne.n	800214e <HAL_TIM_PWM_Stop+0x16>
 8002182:	6a19      	ldr	r1, [r3, #32]
 8002184:	f240 4244 	movw	r2, #1092	; 0x444
 8002188:	4211      	tst	r1, r2
 800218a:	d1e0      	bne.n	800214e <HAL_TIM_PWM_Stop+0x16>
 800218c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800218e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
 8002194:	e7db      	b.n	800214e <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002196:	2d04      	cmp	r5, #4
 8002198:	d005      	beq.n	80021a6 <HAL_TIM_PWM_Stop+0x6e>
 800219a:	2d08      	cmp	r5, #8
 800219c:	d007      	beq.n	80021ae <HAL_TIM_PWM_Stop+0x76>
 800219e:	2301      	movs	r3, #1
 80021a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80021a4:	e7e6      	b.n	8002174 <HAL_TIM_PWM_Stop+0x3c>
 80021a6:	2301      	movs	r3, #1
 80021a8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80021ac:	e7e2      	b.n	8002174 <HAL_TIM_PWM_Stop+0x3c>
 80021ae:	2301      	movs	r3, #1
 80021b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80021b4:	e7de      	b.n	8002174 <HAL_TIM_PWM_Stop+0x3c>
 80021b6:	bf00      	nop
 80021b8:	40012c00 	.word	0x40012c00

080021bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d02b      	beq.n	800221c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80021c4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80021c6:	2301      	movs	r3, #1
 80021c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021d2:	6803      	ldr	r3, [r0, #0]
 80021d4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021d6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021dc:	680a      	ldr	r2, [r1, #0]
 80021de:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e2:	6803      	ldr	r3, [r0, #0]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00a      	beq.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ee:	d007      	beq.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d104      	bne.n	800220a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002200:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002204:	684a      	ldr	r2, [r1, #4]
 8002206:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002208:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800220a:	2301      	movs	r3, #1
 800220c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002210:	2300      	movs	r3, #0
 8002212:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002216:	4618      	mov	r0, r3
}
 8002218:	bc30      	pop	{r4, r5}
 800221a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800221c:	2002      	movs	r0, #2
}
 800221e:	4770      	bx	lr
 8002220:	40012c00 	.word	0x40012c00

08002224 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002224:	4770      	bx	lr

08002226 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002226:	4770      	bx	lr

08002228 <FLASH_PageErase_>:
#include "commun.h"

void FLASH_PageErase_(uint32_t PageAddress)
{
    // Proceed to erase the page //
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <FLASH_PageErase_+0x38>)
 800222a:	6913      	ldr	r3, [r2, #16]
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6113      	str	r3, [r2, #16]
    while (FLASH->SR & FLASH_SR_BSY);
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <FLASH_PageErase_+0x38>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f013 0f01 	tst.w	r3, #1
 800223a:	d1fa      	bne.n	8002232 <FLASH_PageErase_+0xa>
    WRITE_REG(FLASH->AR, PageAddress);
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <FLASH_PageErase_+0x38>)
 800223e:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002246:	611a      	str	r2, [r3, #16]
    while (FLASH->SR & FLASH_SR_BSY);
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <FLASH_PageErase_+0x38>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f013 0f01 	tst.w	r3, #1
 8002250:	d1fa      	bne.n	8002248 <FLASH_PageErase_+0x20>
    CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <FLASH_PageErase_+0x38>)
 8002254:	6913      	ldr	r3, [r2, #16]
 8002256:	f023 0302 	bic.w	r3, r3, #2
 800225a:	6113      	str	r3, [r2, #16]
}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000

08002264 <enableEEPROMWriting>:


/*
 * Must call this first to enable writing
 */
void enableEEPROMWriting() {
 8002264:	b508      	push	{r3, lr}
    HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8002266:	f7fe fbc5 	bl	80009f4 <HAL_FLASH_Unlock>
    FLASH_PageErase_(EEPROM_START_ADDRESS); // required to re-write
 800226a:	4804      	ldr	r0, [pc, #16]	; (800227c <enableEEPROMWriting+0x18>)
 800226c:	f7ff ffdc 	bl	8002228 <FLASH_PageErase_>
    CLEAR_BIT(FLASH->CR, FLASH_CR_PER);    // Bug fix: bit PER has been set in Flash_PageErase(), must clear it here
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <enableEEPROMWriting+0x1c>)
 8002272:	6913      	ldr	r3, [r2, #16]
 8002274:	f023 0302 	bic.w	r3, r3, #2
 8002278:	6113      	str	r3, [r2, #16]
}
 800227a:	bd08      	pop	{r3, pc}
 800227c:	0801c000 	.word	0x0801c000
 8002280:	40022000 	.word	0x40022000

08002284 <disableEEPROMWriting>:

void disableEEPROMWriting() {
 8002284:	b508      	push	{r3, lr}
    HAL_FLASH_Lock();
 8002286:	f7fe fbcf 	bl	8000a28 <HAL_FLASH_Lock>
}
 800228a:	bd08      	pop	{r3, pc}

0800228c <writeEEPROMHalfWord>:

/*
 * Writing functions
 * Must call enableEEPROMWriting() first
 */
HAL_StatusTypeDef writeEEPROMHalfWord(uint32_t address, uint16_t data) {
 800228c:	b508      	push	{r3, lr}
    HAL_StatusTypeDef status;
    address = address + EEPROM_START_ADDRESS;

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800228e:	460a      	mov	r2, r1
 8002290:	2300      	movs	r3, #0
 8002292:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000
 8002296:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 800229a:	2001      	movs	r0, #1
 800229c:	f7fe fc02 	bl	8000aa4 <HAL_FLASH_Program>

    return status;
}
 80022a0:	bd08      	pop	{r3, pc}

080022a2 <readEEPROMHalfWord>:
/*
 * Reading functions
 */
uint16_t readEEPROMHalfWord(uint32_t address) {
    uint16_t val = 0;
    address = address + EEPROM_START_ADDRESS;
 80022a2:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 80022a6:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
    val = *(__IO uint16_t*)address;
 80022aa:	8800      	ldrh	r0, [r0, #0]

    return val;
}
 80022ac:	b280      	uxth	r0, r0
 80022ae:	4770      	bx	lr

080022b0 <EcrLecEEprom>:
//      PS : Aucun
//
//   Variable : N/A
//
void EcrLecEEprom(uint8_t *ptZoneData, uint8_t NbData, uint8_t EcrData, uint16_t AdrEEprom)
{
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	4606      	mov	r6, r0
 80022b4:	460d      	mov	r5, r1
 80022b6:	461f      	mov	r7, r3
uint8_t i;
HAL_StatusTypeDef Res;
uint16_t Data;


         if (EcrData == VRAI)
 80022b8:	2a01      	cmp	r2, #1
 80022ba:	d001      	beq.n	80022c0 <EcrLecEEprom+0x10>
        	 }
        	 disableEEPROMWriting();
         }
         else
         {
        	 for (i=0 ; i != NbData ; i++)
 80022bc:	2400      	movs	r4, #0
 80022be:	e01c      	b.n	80022fa <EcrLecEEprom+0x4a>
        	 enableEEPROMWriting();
 80022c0:	f7ff ffd0 	bl	8002264 <enableEEPROMWriting>
        	 HAL_Delay(10);
 80022c4:	200a      	movs	r0, #10
 80022c6:	f7fd ff89 	bl	80001dc <HAL_Delay>
        	 for (i=0 ; i != NbData ; i++)
 80022ca:	2400      	movs	r4, #0
 80022cc:	42ac      	cmp	r4, r5
 80022ce:	d00a      	beq.n	80022e6 <EcrLecEEprom+0x36>
        		 Res = writeEEPROMHalfWord((uint32_t)(AdrEEprom+i*2), Data);
 80022d0:	5d31      	ldrb	r1, [r6, r4]
 80022d2:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80022d6:	f7ff ffd9 	bl	800228c <writeEEPROMHalfWord>
        		 HAL_Delay(20);
 80022da:	2014      	movs	r0, #20
 80022dc:	f7fd ff7e 	bl	80001dc <HAL_Delay>
        	 for (i=0 ; i != NbData ; i++)
 80022e0:	3401      	adds	r4, #1
 80022e2:	b2e4      	uxtb	r4, r4
 80022e4:	e7f2      	b.n	80022cc <EcrLecEEprom+0x1c>
        	 disableEEPROMWriting();
 80022e6:	f7ff ffcd 	bl	8002284 <disableEEPROMWriting>
 80022ea:	e008      	b.n	80022fe <EcrLecEEprom+0x4e>
        	 {
        		 ptZoneData[i] = (uint8_t)(readEEPROMHalfWord((uint32_t)(AdrEEprom+i*2)));
 80022ec:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80022f0:	f7ff ffd7 	bl	80022a2 <readEEPROMHalfWord>
 80022f4:	5530      	strb	r0, [r6, r4]
        	 for (i=0 ; i != NbData ; i++)
 80022f6:	3401      	adds	r4, #1
 80022f8:	b2e4      	uxtb	r4, r4
 80022fa:	42ac      	cmp	r4, r5
 80022fc:	d1f6      	bne.n	80022ec <EcrLecEEprom+0x3c>
        	 }
         }
}
 80022fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002300 <EcrI2CPoll>:
//      PS : EcrOK      EcrAdr: resultat positionnement [VRAI, FAUX]
//
//   Variable : hi2c1
//
uint8_t EcrI2CPoll(uint16_t AdresseInt, uint8_t PageHaute, uint8_t *ptBuffEcr, uint16_t NbData)
{
 8002300:	b500      	push	{lr}
 8002302:	b083      	sub	sp, #12

uint16_t  AdrCAT = ADR_CAT24M01;
HAL_StatusTypeDef Etat;
uint8_t   Res = VRAI;

    if (PageHaute == VRAI)
 8002304:	2901      	cmp	r1, #1
 8002306:	d00a      	beq.n	800231e <EcrI2CPoll+0x1e>
uint16_t  AdrCAT = ADR_CAT24M01;
 8002308:	21a0      	movs	r1, #160	; 0xa0
       AdrCAT = AdrCAT | SET_PAGE_H;

    Etat = HAL_I2C_Master_Transmit (&hi2c1, AdrCAT, ptBuffEcr, NbData, TO_ECR_I2C_DATA);
 800230a:	2032      	movs	r0, #50	; 0x32
 800230c:	9000      	str	r0, [sp, #0]
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <EcrI2CPoll+0x28>)
 8002310:	f7fe ff6a 	bl	80011e8 <HAL_I2C_Master_Transmit>
    if (Etat != HAL_OK)
 8002314:	b928      	cbnz	r0, 8002322 <EcrI2CPoll+0x22>
uint8_t   Res = VRAI;
 8002316:	2001      	movs	r0, #1
      Res = FAUX;

    return Res;
}
 8002318:	b003      	add	sp, #12
 800231a:	f85d fb04 	ldr.w	pc, [sp], #4
       AdrCAT = AdrCAT | SET_PAGE_H;
 800231e:	21a2      	movs	r1, #162	; 0xa2
 8002320:	e7f3      	b.n	800230a <EcrI2CPoll+0xa>
      Res = FAUX;
 8002322:	2000      	movs	r0, #0
 8002324:	e7f8      	b.n	8002318 <EcrI2CPoll+0x18>
 8002326:	bf00      	nop
 8002328:	20000320 	.word	0x20000320

0800232c <LecConfigEEP>:
//      PS : Aucun
//
//   Variable : ImgJeux, ImgTempoJeux
//
void LecConfigEEP()
{
 800232c:	b510      	push	{r4, lr}
uint8_t i;


    //for(i=0 ; i!= LG_EEP_CONFIG ; i++)
    //  ImgJeux[i] = EEPROM_Read(EEP_NUM_IMAG_PROC_L+i);
    EcrLecEEprom(ImgJeux, LG_EEP_CONFIG, FAUX, EEP_NUM_IMAG_PROC_L);
 800232e:	4c0d      	ldr	r4, [pc, #52]	; (8002364 <LecConfigEEP+0x38>)
 8002330:	2300      	movs	r3, #0
 8002332:	461a      	mov	r2, r3
 8002334:	2108      	movs	r1, #8
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff ffba 	bl	80022b0 <EcrLecEEprom>
    //for(i=0 ; i!= LG_EEP_CONFIG ; i++)
    //    ImgJeux[i+LG_EEP_CONFIG] = EEPROM_Read(EEP_NUM_IMAG_PROC_H+i);
    EcrLecEEprom(ImgJeux+LG_EEP_CONFIG, LG_EEP_CONFIG, FAUX, EEP_NUM_IMAG_PROC_H);
 800233c:	2308      	movs	r3, #8
 800233e:	2200      	movs	r2, #0
 8002340:	4619      	mov	r1, r3
 8002342:	18e0      	adds	r0, r4, r3
 8002344:	f7ff ffb4 	bl	80022b0 <EcrLecEEprom>
    //for(i=0 ; i!= LG_EEP_CONFIG ; i++)
    //    ImgTempoJeux[i] = EEPROM_Read(EEP_NUM_DURE_PROC_L+i);
    EcrLecEEprom(ImgTempoJeux, LG_EEP_CONFIG, FAUX, EEP_NUM_DURE_PROC_L);
 8002348:	2310      	movs	r3, #16
 800234a:	2200      	movs	r2, #0
 800234c:	2108      	movs	r1, #8
 800234e:	18e0      	adds	r0, r4, r3
 8002350:	f7ff ffae 	bl	80022b0 <EcrLecEEprom>
    //for(i=0 ; i!= LG_EEP_CONFIG ; i++)
    //    ImgTempoJeux[i+LG_EEP_CONFIG] = EEPROM_Read(EEP_NUM_DURE_PROC_H+i);
    EcrLecEEprom(ImgTempoJeux+LG_EEP_CONFIG, LG_EEP_CONFIG, FAUX, EEP_NUM_DURE_PROC_H);
 8002354:	2318      	movs	r3, #24
 8002356:	2200      	movs	r2, #0
 8002358:	2108      	movs	r1, #8
 800235a:	18e0      	adds	r0, r4, r3
 800235c:	f7ff ffa8 	bl	80022b0 <EcrLecEEprom>

}
 8002360:	bd10      	pop	{r4, pc}
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008

08002368 <EcrConfigEEPDebug>:
//      PS : Aucun
//
//   Variable : ImgJeux, ImgTempoJeux
//
void EcrConfigEEPDebug()
{
 8002368:	b510      	push	{r4, lr}
uint8_t i;


    EcrLecEEprom(ImgJeux, LG_EEP_CONFIG, VRAI, EEP_NUM_IMAG_PROC_L);
 800236a:	4c0d      	ldr	r4, [pc, #52]	; (80023a0 <EcrConfigEEPDebug+0x38>)
 800236c:	2300      	movs	r3, #0
 800236e:	2201      	movs	r2, #1
 8002370:	2108      	movs	r1, #8
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff ff9c 	bl	80022b0 <EcrLecEEprom>
    EcrLecEEprom(ImgJeux+LG_EEP_CONFIG, LG_EEP_CONFIG, VRAI, EEP_NUM_IMAG_PROC_H);
 8002378:	2308      	movs	r3, #8
 800237a:	2201      	movs	r2, #1
 800237c:	4619      	mov	r1, r3
 800237e:	18e0      	adds	r0, r4, r3
 8002380:	f7ff ff96 	bl	80022b0 <EcrLecEEprom>
    EcrLecEEprom(ImgTempoJeux, LG_EEP_CONFIG, VRAI, EEP_NUM_DURE_PROC_L);
 8002384:	2310      	movs	r3, #16
 8002386:	2201      	movs	r2, #1
 8002388:	2108      	movs	r1, #8
 800238a:	18e0      	adds	r0, r4, r3
 800238c:	f7ff ff90 	bl	80022b0 <EcrLecEEprom>
    EcrLecEEprom(ImgTempoJeux+LG_EEP_CONFIG, LG_EEP_CONFIG, VRAI, EEP_NUM_DURE_PROC_H);
 8002390:	2318      	movs	r3, #24
 8002392:	2201      	movs	r2, #1
 8002394:	2108      	movs	r1, #8
 8002396:	18e0      	adds	r0, r4, r3
 8002398:	f7ff ff8a 	bl	80022b0 <EcrLecEEprom>

}
 800239c:	bd10      	pop	{r4, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <SpgIntMatrice>:
//
// Variable:
//
//
void SpgIntMatrice()
{
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //portb.BIT_DEBUG_1 = 1;
  // gestion des volets
  if ((NumLigne >= VoletGauche) && (NumLigne <= VoletDroit))
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <SpgIntMatrice+0xfc>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <SpgIntMatrice+0x100>)
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d303      	bcc.n	80023ba <SpgIntMatrice+0x16>
 80023b2:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <SpgIntMatrice+0xfc>)
 80023b4:	7852      	ldrb	r2, [r2, #1]
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d924      	bls.n	8002404 <SpgIntMatrice+0x60>
     /*portc.BIT_OE_MEM = 1;       //-- on force a zro la donnée
     portc.BIT_CLK_MTRX = 1;     //-- gene front d'horloge
     portc.BIT_CLK_MEM = 0;
     portc.BIT_CLK_MTRX = 0;
     portc.BIT_CLK_MEM = 1; */
     HAL_GPIO_WritePin(OE_MEM_GPIO_Port, OE_MEM_Pin, GPIO_PIN_SET);
 80023ba:	4c3b      	ldr	r4, [pc, #236]	; (80024a8 <SpgIntMatrice+0x104>)
 80023bc:	2201      	movs	r2, #1
 80023be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7fe fccc 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_SET);
 80023c8:	4d38      	ldr	r5, [pc, #224]	; (80024ac <SpgIntMatrice+0x108>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	4611      	mov	r1, r2
 80023ce:	4628      	mov	r0, r5
 80023d0:	f7fe fcc6 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_RESET);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2110      	movs	r1, #16
 80023d8:	4620      	mov	r0, r4
 80023da:	f7fe fcc1 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	2101      	movs	r1, #1
 80023e2:	4628      	mov	r0, r5
 80023e4:	f7fe fcbc 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2110      	movs	r1, #16
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fcb7 	bl	8000d60 <HAL_GPIO_WritePin>
  }

  NumLigne++;
 80023f2:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <SpgIntMatrice+0xfc>)
 80023f4:	7813      	ldrb	r3, [r2, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	7013      	strb	r3, [r2, #0]
  //if (NumLigne.F7)
  if ((NumLigne & TST_BIT7) != 0)  //en fait, le numero du point dans la ligne (colonne)
 80023fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002400:	d11d      	bne.n	800243e <SpgIntMatrice+0x9a>
  }


  //PIR2.TMR3IF = 0;
  //portb.BIT_DEBUG_1 = 0;
}
 8002402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	 HAL_GPIO_WritePin(OE_MEM_GPIO_Port, OE_MEM_Pin, GPIO_PIN_RESET);
 8002404:	4c28      	ldr	r4, [pc, #160]	; (80024a8 <SpgIntMatrice+0x104>)
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800240c:	4620      	mov	r0, r4
 800240e:	f7fe fca7 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_SET);
 8002412:	4d26      	ldr	r5, [pc, #152]	; (80024ac <SpgIntMatrice+0x108>)
 8002414:	2201      	movs	r2, #1
 8002416:	4611      	mov	r1, r2
 8002418:	4628      	mov	r0, r5
 800241a:	f7fe fca1 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2110      	movs	r1, #16
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fc9c 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MTRX_GPIO_Port, CLK_MTRX_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	2101      	movs	r1, #1
 800242c:	4628      	mov	r0, r5
 800242e:	f7fe fc97 	bl	8000d60 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CLK_MEM_GPIO_Port, CLK_MEM_Pin, GPIO_PIN_SET);
 8002432:	2201      	movs	r2, #1
 8002434:	2110      	movs	r1, #16
 8002436:	4620      	mov	r0, r4
 8002438:	f7fe fc92 	bl	8000d60 <HAL_GPIO_WritePin>
 800243c:	e7d9      	b.n	80023f2 <SpgIntMatrice+0x4e>
	 HAL_GPIO_WritePin(LATCH_MTRX_GPIO_Port, LATCH_MTRX_Pin, GPIO_PIN_SET);
 800243e:	4e1a      	ldr	r6, [pc, #104]	; (80024a8 <SpgIntMatrice+0x104>)
 8002440:	2201      	movs	r2, #1
 8002442:	2108      	movs	r1, #8
 8002444:	4630      	mov	r0, r6
 8002446:	f7fe fc8b 	bl	8000d60 <HAL_GPIO_WritePin>
     NumLigne = 0;
 800244a:	2700      	movs	r7, #0
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <SpgIntMatrice+0xfc>)
 800244e:	701f      	strb	r7, [r3, #0]
     NumColonne++;                 //en fait, le numero de la ligne
 8002450:	4c14      	ldr	r4, [pc, #80]	; (80024a4 <SpgIntMatrice+0x100>)
 8002452:	7862      	ldrb	r2, [r4, #1]
 8002454:	3201      	adds	r2, #1
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	7062      	strb	r2, [r4, #1]
     HAL_GPIO_WritePin(LIGNE_A_GPIO_Port, LIGNE_A_Pin, (NumColonne & TST_BIT0));
 800245a:	4d14      	ldr	r5, [pc, #80]	; (80024ac <SpgIntMatrice+0x108>)
 800245c:	f002 0201 	and.w	r2, r2, #1
 8002460:	2104      	movs	r1, #4
 8002462:	4628      	mov	r0, r5
 8002464:	f7fe fc7c 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LIGNE_B_GPIO_Port, LIGNE_B_Pin, ((NumColonne & TST_BIT1) >> 1));
 8002468:	7862      	ldrb	r2, [r4, #1]
 800246a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800246e:	2108      	movs	r1, #8
 8002470:	4628      	mov	r0, r5
 8002472:	f7fe fc75 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LIGNE_C_GPIO_Port, LIGNE_C_Pin, ((NumColonne & TST_BIT2) >> 2));
 8002476:	7862      	ldrb	r2, [r4, #1]
 8002478:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800247c:	2110      	movs	r1, #16
 800247e:	4628      	mov	r0, r5
 8002480:	f7fe fc6e 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LIGNE_D_GPIO_Port, LIGNE_D_Pin, ((NumColonne & TST_BIT3) >> 3));
 8002484:	7862      	ldrb	r2, [r4, #1]
 8002486:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800248a:	2120      	movs	r1, #32
 800248c:	4628      	mov	r0, r5
 800248e:	f7fe fc67 	bl	8000d60 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LATCH_MTRX_GPIO_Port, LATCH_MTRX_Pin, GPIO_PIN_RESET);
 8002492:	463a      	mov	r2, r7
 8002494:	2108      	movs	r1, #8
 8002496:	4630      	mov	r0, r6
 8002498:	f7fe fc62 	bl	8000d60 <HAL_GPIO_WritePin>
}
 800249c:	e7b1      	b.n	8002402 <SpgIntMatrice+0x5e>
 800249e:	bf00      	nop
 80024a0:	2000004c 	.word	0x2000004c
 80024a4:	20000028 	.word	0x20000028
 80024a8:	40010c00 	.word	0x40010c00
 80024ac:	40010800 	.word	0x40010800

080024b0 <GesRecImage>:
#define HEADER_1 0x55
#define HEADER_2 0xAA


void GesRecImage(uint8_t *ptDataRec)
{
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4604      	mov	r4, r0
static uint16_t AdrInt = 0;

uint8_t i, Res;

     //--------------- test reception header debut -----------//
     if ((ptDataRec[0] == HEADER_1) && (ptDataRec[7] == HEADER_2))
 80024b4:	7803      	ldrb	r3, [r0, #0]
 80024b6:	2b55      	cmp	r3, #85	; 0x55
 80024b8:	d008      	beq.n	80024cc <GesRecImage+0x1c>
            //#################t3con = VAL_CONF_T3CON_LS;  //diminution vitesse affichage
            //pie2.TMR3IE = 0;            //debug
        }
     }
     //--------------- test reception header Fin -----------//
     if (HeaderFin == VRAI)
 80024ba:	4b66      	ldr	r3, [pc, #408]	; (8002654 <GesRecImage+0x1a4>)
 80024bc:	79db      	ldrb	r3, [r3, #7]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d026      	beq.n	8002510 <GesRecImage+0x60>
        //###############t3con = VAL_CONF_T3CON_HS;  //reinitialisation vitesse affichage
        //pie2.TMR3IE = 1;            //debug
        //portb.BIT_DEBUG_1 = 0;
     }
     //------------- test reception donnée utile -----------//
     if (HeaderOK == VRAI)
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <GesRecImage+0x1a4>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d045      	beq.n	8002556 <GesRecImage+0xa6>
                  HeaderOK = FAUX;
                  HeaderFin = VRAI;
              }
        }
     }
}
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
     if ((ptDataRec[0] == HEADER_1) && (ptDataRec[7] == HEADER_2))
 80024cc:	79c3      	ldrb	r3, [r0, #7]
 80024ce:	2baa      	cmp	r3, #170	; 0xaa
 80024d0:	d1f3      	bne.n	80024ba <GesRecImage+0xa>
        HeaderOK = VRAI;
 80024d2:	4b60      	ldr	r3, [pc, #384]	; (8002654 <GesRecImage+0x1a4>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
        NumImage = ptDataRec[1];
 80024d8:	7842      	ldrb	r2, [r0, #1]
 80024da:	705a      	strb	r2, [r3, #1]
        for (i=2 ; i!=7 ; i++)
 80024dc:	2302      	movs	r3, #2
 80024de:	e001      	b.n	80024e4 <GesRecImage+0x34>
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	d006      	beq.n	80024f6 <GesRecImage+0x46>
          if (ptDataRec[i] != 0) HeaderOK = FAUX;
 80024e8:	5ce2      	ldrb	r2, [r4, r3]
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d0f8      	beq.n	80024e0 <GesRecImage+0x30>
 80024ee:	4a59      	ldr	r2, [pc, #356]	; (8002654 <GesRecImage+0x1a4>)
 80024f0:	2100      	movs	r1, #0
 80024f2:	7011      	strb	r1, [r2, #0]
 80024f4:	e7f4      	b.n	80024e0 <GesRecImage+0x30>
        if (HeaderOK == VRAI)
 80024f6:	4b57      	ldr	r3, [pc, #348]	; (8002654 <GesRecImage+0x1a4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d1dd      	bne.n	80024ba <GesRecImage+0xa>
            RecHeader = VRAI;
 80024fe:	4b55      	ldr	r3, [pc, #340]	; (8002654 <GesRecImage+0x1a4>)
 8002500:	2201      	movs	r2, #1
 8002502:	709a      	strb	r2, [r3, #2]
            NumOctet   = 0;
 8002504:	2200      	movs	r2, #0
 8002506:	70da      	strb	r2, [r3, #3]
            NumPartImg = 0;
 8002508:	711a      	strb	r2, [r3, #4]
            ChkImg     = 0;
 800250a:	715a      	strb	r2, [r3, #5]
            RecOK = REC_OK;
 800250c:	719a      	strb	r2, [r3, #6]
 800250e:	e7d4      	b.n	80024ba <GesRecImage+0xa>
        if ((ptDataRec[0] == HEADER_2) && (ptDataRec[7] == HEADER_1))
 8002510:	7823      	ldrb	r3, [r4, #0]
 8002512:	2baa      	cmp	r3, #170	; 0xaa
 8002514:	d008      	beq.n	8002528 <GesRecImage+0x78>
        	RecOK = RecOK | BIT_ERR_HDF;
 8002516:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <GesRecImage+0x1a4>)
 8002518:	7993      	ldrb	r3, [r2, #6]
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	7193      	strb	r3, [r2, #6]
        HeaderFin = FAUX;
 8002520:	4b4c      	ldr	r3, [pc, #304]	; (8002654 <GesRecImage+0x1a4>)
 8002522:	2200      	movs	r2, #0
 8002524:	71da      	strb	r2, [r3, #7]
 8002526:	e7cc      	b.n	80024c2 <GesRecImage+0x12>
        if ((ptDataRec[0] == HEADER_2) && (ptDataRec[7] == HEADER_1))
 8002528:	79e3      	ldrb	r3, [r4, #7]
 800252a:	2b55      	cmp	r3, #85	; 0x55
 800252c:	d1f3      	bne.n	8002516 <GesRecImage+0x66>
            if (ChkImg == ptDataRec[2])
 800252e:	78a2      	ldrb	r2, [r4, #2]
 8002530:	4b48      	ldr	r3, [pc, #288]	; (8002654 <GesRecImage+0x1a4>)
 8002532:	795b      	ldrb	r3, [r3, #5]
 8002534:	429a      	cmp	r2, r3
 8002536:	d005      	beq.n	8002544 <GesRecImage+0x94>
            	RecOK = RecOK | BIT_ERR_CHK;
 8002538:	4a46      	ldr	r2, [pc, #280]	; (8002654 <GesRecImage+0x1a4>)
 800253a:	7993      	ldrb	r3, [r2, #6]
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	7193      	strb	r3, [r2, #6]
 8002542:	e7ed      	b.n	8002520 <GesRecImage+0x70>
            	EcrLecEEprom(&ChkImg, 1, VRAI, OFF_CHK_IMG+NumImage);
 8002544:	4843      	ldr	r0, [pc, #268]	; (8002654 <GesRecImage+0x1a4>)
 8002546:	7843      	ldrb	r3, [r0, #1]
 8002548:	3320      	adds	r3, #32
 800254a:	2201      	movs	r2, #1
 800254c:	4611      	mov	r1, r2
 800254e:	3005      	adds	r0, #5
 8002550:	f7ff feae 	bl	80022b0 <EcrLecEEprom>
 8002554:	e7e4      	b.n	8002520 <GesRecImage+0x70>
        if (RecHeader == VRAI)
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <GesRecImage+0x1a4>)
 8002558:	789b      	ldrb	r3, [r3, #2]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d06c      	beq.n	8002638 <GesRecImage+0x188>
              ChkImg = ChkImg + ptDataRec[0] + ptDataRec[1] + ptDataRec[2] + ptDataRec[3];
 800255e:	7823      	ldrb	r3, [r4, #0]
 8002560:	4a3c      	ldr	r2, [pc, #240]	; (8002654 <GesRecImage+0x1a4>)
 8002562:	7951      	ldrb	r1, [r2, #5]
 8002564:	440b      	add	r3, r1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	7861      	ldrb	r1, [r4, #1]
 800256a:	440b      	add	r3, r1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	78a1      	ldrb	r1, [r4, #2]
 8002570:	440b      	add	r3, r1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	78e1      	ldrb	r1, [r4, #3]
 8002576:	440b      	add	r3, r1
 8002578:	b2db      	uxtb	r3, r3
              ChkImg = ChkImg + ptDataRec[4] + ptDataRec[5] + ptDataRec[6] + ptDataRec[7];
 800257a:	7921      	ldrb	r1, [r4, #4]
 800257c:	440b      	add	r3, r1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	7961      	ldrb	r1, [r4, #5]
 8002582:	440b      	add	r3, r1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	79a1      	ldrb	r1, [r4, #6]
 8002588:	440b      	add	r3, r1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	79e1      	ldrb	r1, [r4, #7]
 800258e:	440b      	add	r3, r1
 8002590:	7153      	strb	r3, [r2, #5]
              TabMatrix[NumOctet++] = ptDataRec[0];
 8002592:	78d1      	ldrb	r1, [r2, #3]
 8002594:	1c48      	adds	r0, r1, #1
 8002596:	b2c0      	uxtb	r0, r0
 8002598:	7825      	ldrb	r5, [r4, #0]
 800259a:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <GesRecImage+0x1a8>)
 800259c:	545d      	strb	r5, [r3, r1]
              TabMatrix[NumOctet++] = ptDataRec[1];
 800259e:	1c41      	adds	r1, r0, #1
 80025a0:	b2c9      	uxtb	r1, r1
 80025a2:	7865      	ldrb	r5, [r4, #1]
 80025a4:	541d      	strb	r5, [r3, r0]
              TabMatrix[NumOctet++] = ptDataRec[2];
 80025a6:	1c48      	adds	r0, r1, #1
 80025a8:	b2c0      	uxtb	r0, r0
 80025aa:	78a5      	ldrb	r5, [r4, #2]
 80025ac:	545d      	strb	r5, [r3, r1]
              TabMatrix[NumOctet++] = ptDataRec[3];
 80025ae:	1c41      	adds	r1, r0, #1
 80025b0:	b2c9      	uxtb	r1, r1
 80025b2:	78e5      	ldrb	r5, [r4, #3]
 80025b4:	541d      	strb	r5, [r3, r0]
              TabMatrix[NumOctet++] = ptDataRec[4];
 80025b6:	1c48      	adds	r0, r1, #1
 80025b8:	b2c0      	uxtb	r0, r0
 80025ba:	7925      	ldrb	r5, [r4, #4]
 80025bc:	545d      	strb	r5, [r3, r1]
              TabMatrix[NumOctet++] = ptDataRec[5];
 80025be:	1c41      	adds	r1, r0, #1
 80025c0:	b2c9      	uxtb	r1, r1
 80025c2:	7965      	ldrb	r5, [r4, #5]
 80025c4:	541d      	strb	r5, [r3, r0]
              TabMatrix[NumOctet++] = ptDataRec[6];
 80025c6:	1c48      	adds	r0, r1, #1
 80025c8:	b2c0      	uxtb	r0, r0
 80025ca:	79a5      	ldrb	r5, [r4, #6]
 80025cc:	545d      	strb	r5, [r3, r1]
              TabMatrix[NumOctet++] = ptDataRec[7];
 80025ce:	1c41      	adds	r1, r0, #1
 80025d0:	b2c9      	uxtb	r1, r1
 80025d2:	70d1      	strb	r1, [r2, #3]
 80025d4:	79e2      	ldrb	r2, [r4, #7]
 80025d6:	541a      	strb	r2, [r3, r0]
              if (NumOctet == 0)
 80025d8:	bb19      	cbnz	r1, 8002622 <GesRecImage+0x172>
                  if (NumImage >= IMG_PAGE_BAS)
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <GesRecImage+0x1a4>)
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	d92e      	bls.n	8002640 <GesRecImage+0x190>
                      PageHt = VRAI;
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <GesRecImage+0x1a4>)
 80025e4:	2101      	movs	r1, #1
 80025e6:	7211      	strb	r1, [r2, #8]
                      AdrInt = (((NumImage - IMG_PAGE_BAS) << 4) + NumPartImg) << 8;
 80025e8:	3b10      	subs	r3, #16
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	7911      	ldrb	r1, [r2, #4]
 80025f2:	440b      	add	r3, r1
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	8153      	strh	r3, [r2, #10]
                  Res = EcrI2CPoll(AdrInt, PageHt, TabMatrix, LG_TAB_MATRIX);
 80025fa:	4816      	ldr	r0, [pc, #88]	; (8002654 <GesRecImage+0x1a4>)
 80025fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <GesRecImage+0x1a8>)
 8002602:	7a01      	ldrb	r1, [r0, #8]
 8002604:	8940      	ldrh	r0, [r0, #10]
 8002606:	f7ff fe7b 	bl	8002300 <EcrI2CPoll>
                  if (Res == FAUX)
 800260a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800260e:	d104      	bne.n	800261a <GesRecImage+0x16a>
                	  RecOK = RecOK | BIT_ERR_EEP;
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <GesRecImage+0x1a4>)
 8002612:	7993      	ldrb	r3, [r2, #6]
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	7193      	strb	r3, [r2, #6]
                  NumPartImg++;
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <GesRecImage+0x1a4>)
 800261c:	7913      	ldrb	r3, [r2, #4]
 800261e:	3301      	adds	r3, #1
 8002620:	7113      	strb	r3, [r2, #4]
              if ( NumPartImg == NB_PART_IMG)
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <GesRecImage+0x1a4>)
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	2b10      	cmp	r3, #16
 8002628:	f47f af4f 	bne.w	80024ca <GesRecImage+0x1a>
                  HeaderOK = FAUX;
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <GesRecImage+0x1a4>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
                  HeaderFin = VRAI;
 8002632:	2201      	movs	r2, #1
 8002634:	71da      	strb	r2, [r3, #7]
}
 8002636:	e748      	b.n	80024ca <GesRecImage+0x1a>
              RecHeader = FAUX;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <GesRecImage+0x1a4>)
 800263a:	2200      	movs	r2, #0
 800263c:	709a      	strb	r2, [r3, #2]
 800263e:	e744      	b.n	80024ca <GesRecImage+0x1a>
                      PageHt = FAUX;
 8002640:	4904      	ldr	r1, [pc, #16]	; (8002654 <GesRecImage+0x1a4>)
 8002642:	2200      	movs	r2, #0
 8002644:	720a      	strb	r2, [r1, #8]
                      AdrInt = ((NumImage << 4) + NumPartImg) << 8;
 8002646:	790a      	ldrb	r2, [r1, #4]
 8002648:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	814b      	strh	r3, [r1, #10]
 8002650:	e7d3      	b.n	80025fa <GesRecImage+0x14a>
 8002652:	bf00      	nop
 8002654:	2000004e 	.word	0x2000004e
 8002658:	200000c8 	.word	0x200000c8

0800265c <GesCmdImage>:
//      PS : Aucun
//
// Variable globale : AppelImg, htim3
//
void GesCmdImage(uint8_t *ptDataRec, t_AppImg *ptAppelImg)
{
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	4604      	mov	r4, r0
 8002660:	460d      	mov	r5, r1
uint8_t Param;
HAL_StatusTypeDef Etat;

     //-- determibnation commande a maj --//
     switch  (ptDataRec[CMD_IMG])
 8002662:	7803      	ldrb	r3, [r0, #0]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d817      	bhi.n	8002698 <GesCmdImage+0x3c>
 8002668:	e8df f003 	tbb	[pc, r3]
 800266c:	16251704 	.word	0x16251704
 8002670:	2a16      	.short	0x2a16
 8002672:	2d          	.byte	0x2d
 8002673:	00          	.byte	0x00
         case MAJ_LUMINOSITE:
         {
               //-- maj luminosité --//
               // ccpr1l = ptDataRec[LUM_VAL_PWM];

        	   Etat = HAL_TIM_PWM_Stop (&htim3, TIM_CHANNEL_2);
 8002674:	4e15      	ldr	r6, [pc, #84]	; (80026cc <GesCmdImage+0x70>)
 8002676:	2104      	movs	r1, #4
 8002678:	4630      	mov	r0, r6
 800267a:	f7ff fd5d 	bl	8002138 <HAL_TIM_PWM_Stop>
        	   sConfigOCUser.Pulse = ptDataRec[LUM_VAL_PWM];
 800267e:	7863      	ldrb	r3, [r4, #1]
 8002680:	4913      	ldr	r1, [pc, #76]	; (80026d0 <GesCmdImage+0x74>)
 8002682:	604b      	str	r3, [r1, #4]
        	   Etat = HAL_TIM_PWM_ConfigChannel (&htim3, &sConfigOCUser, TIM_CHANNEL_2);
 8002684:	2204      	movs	r2, #4
 8002686:	4630      	mov	r0, r6
 8002688:	f7ff fbf6 	bl	8001e78 <HAL_TIM_PWM_ConfigChannel>
        	   Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_2);
 800268c:	2104      	movs	r1, #4
 800268e:	4630      	mov	r0, r6
 8002690:	f7ff fce4 	bl	800205c <HAL_TIM_PWM_Start>

               ptAppelImg->ValPWM = ptDataRec[LUM_VAL_PWM];
 8002694:	7863      	ldrb	r3, [r4, #1]
 8002696:	716b      	strb	r3, [r5, #5]
         {
               ptAppelImg->Tempo2Img = ptDataRec[APP_VITESSE];
               break;
         }
     }
}
 8002698:	bd70      	pop	{r4, r5, r6, pc}
               Param = ptDataRec[IMG_NUM_IMG];
 800269a:	7843      	ldrb	r3, [r0, #1]
               ptAppelImg->MajImg = VRAI;
 800269c:	2201      	movs	r2, #1
 800269e:	700a      	strb	r2, [r1, #0]
               if ((Param & BIT_PAGE_IMG) != 0)
 80026a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026a4:	d105      	bne.n	80026b2 <GesCmdImage+0x56>
                   ptAppelImg->PageHaut = FAUX;
 80026a6:	2200      	movs	r2, #0
 80026a8:	704a      	strb	r2, [r1, #1]
               ptAppelImg->NumImage  = Param & MASQ_NUM_IMG;
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	70ab      	strb	r3, [r5, #2]
               break;
 80026b0:	e7f2      	b.n	8002698 <GesCmdImage+0x3c>
                   ptAppelImg->PageHaut = VRAI;
 80026b2:	704a      	strb	r2, [r1, #1]
 80026b4:	e7f9      	b.n	80026aa <GesCmdImage+0x4e>
               ptAppelImg->TypeVolet  = ptDataRec[IMG_VOLET_TYP];
 80026b6:	7843      	ldrb	r3, [r0, #1]
 80026b8:	70cb      	strb	r3, [r1, #3]
               ptAppelImg->TempoVolet = ptDataRec[IMG_VOLET_PER];
 80026ba:	7883      	ldrb	r3, [r0, #2]
 80026bc:	710b      	strb	r3, [r1, #4]
               break;
 80026be:	e7eb      	b.n	8002698 <GesCmdImage+0x3c>
               ptAppelImg->TempoCli = ptDataRec[CLI_VITESSE];
 80026c0:	7843      	ldrb	r3, [r0, #1]
 80026c2:	718b      	strb	r3, [r1, #6]
               break;
 80026c4:	e7e8      	b.n	8002698 <GesCmdImage+0x3c>
               ptAppelImg->Tempo2Img = ptDataRec[APP_VITESSE];
 80026c6:	7843      	ldrb	r3, [r0, #1]
 80026c8:	71cb      	strb	r3, [r1, #7]
}
 80026ca:	e7e5      	b.n	8002698 <GesCmdImage+0x3c>
 80026cc:	2000039c 	.word	0x2000039c
 80026d0:	20000060 	.word	0x20000060

080026d4 <GesMajEEprom>:
// Variable globale : TabMatrix[], RecOK
//
#define ATT_ECR 25

void GesMajEEprom(uint32_t Id_, uint8_t *ptDataRec)
{
 80026d4:	b510      	push	{r4, lr}
uint8_t i;

      switch (Id_)
 80026d6:	3850      	subs	r0, #80	; 0x50
 80026d8:	2803      	cmp	r0, #3
 80026da:	d80a      	bhi.n	80026f2 <GesMajEEprom+0x1e>
 80026dc:	e8df f000 	tbb	[pc, r0]
 80026e0:	3922160a 	.word	0x3922160a
        	//############### a voir, le stm3é permet peut etre de se passer de la reduction
        	//############### freq IT
            //###############t3con = VAL_CONF_T3CON_LS;  //diminution vitesse affichage
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
            {
                DataEEp[i+EEP_NUM_IMAG_PROC_L] = ptDataRec[i];
 80026e4:	5cc8      	ldrb	r0, [r1, r3]
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <GesMajEEprom+0x84>)
 80026e8:	54d0      	strb	r0, [r2, r3]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d1f8      	bne.n	80026e4 <GesMajEEprom+0x10>
            HAL_NVIC_SystemReset();
            break;
         }
      }

}
 80026f2:	bd10      	pop	{r4, pc}
{
 80026f4:	2300      	movs	r3, #0
 80026f6:	e7fa      	b.n	80026ee <GesMajEEprom+0x1a>
                DataEEp[i+EEP_NUM_IMAG_PROC_H] = ptDataRec[i];
 80026f8:	f103 0208 	add.w	r2, r3, #8
 80026fc:	5ccc      	ldrb	r4, [r1, r3]
 80026fe:	4816      	ldr	r0, [pc, #88]	; (8002758 <GesMajEEprom+0x84>)
 8002700:	5484      	strb	r4, [r0, r2]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 8002702:	3301      	adds	r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b08      	cmp	r3, #8
 8002708:	d1f6      	bne.n	80026f8 <GesMajEEprom+0x24>
 800270a:	e7f2      	b.n	80026f2 <GesMajEEprom+0x1e>
{
 800270c:	2300      	movs	r3, #0
 800270e:	e7fa      	b.n	8002706 <GesMajEEprom+0x32>
                DataEEp[i+EEP_NUM_DURE_PROC_L] = ptDataRec[i];
 8002710:	f103 0210 	add.w	r2, r3, #16
 8002714:	5ccc      	ldrb	r4, [r1, r3]
 8002716:	4810      	ldr	r0, [pc, #64]	; (8002758 <GesMajEEprom+0x84>)
 8002718:	5484      	strb	r4, [r0, r2]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 800271a:	3301      	adds	r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b08      	cmp	r3, #8
 8002720:	d1f6      	bne.n	8002710 <GesMajEEprom+0x3c>
 8002722:	e7e6      	b.n	80026f2 <GesMajEEprom+0x1e>
{
 8002724:	2300      	movs	r3, #0
 8002726:	e7fa      	b.n	800271e <GesMajEEprom+0x4a>
                DataEEp[i+EEP_NUM_DURE_PROC_H] = ptDataRec[i];
 8002728:	f103 0218 	add.w	r2, r3, #24
 800272c:	5ccc      	ldrb	r4, [r1, r3]
 800272e:	480a      	ldr	r0, [pc, #40]	; (8002758 <GesMajEEprom+0x84>)
 8002730:	5484      	strb	r4, [r0, r2]
            for (i=0 ; i!= LG_EEP_CONFIG ; i++)
 8002732:	3301      	adds	r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b08      	cmp	r3, #8
 8002738:	d1f6      	bne.n	8002728 <GesMajEEprom+0x54>
            EcrLecEEprom(DataEEp, 4*LG_EEP_CONFIG, VRAI, EEP_NUM_IMAG_PROC_L);
 800273a:	2300      	movs	r3, #0
 800273c:	2201      	movs	r2, #1
 800273e:	2120      	movs	r1, #32
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <GesMajEEprom+0x84>)
 8002742:	f7ff fdb5 	bl	80022b0 <EcrLecEEprom>
            HAL_Delay(ATT_ECR);
 8002746:	2019      	movs	r0, #25
 8002748:	f7fd fd48 	bl	80001dc <HAL_Delay>
            HAL_NVIC_SystemReset();
 800274c:	f7fe f8e4 	bl	8000918 <HAL_NVIC_SystemReset>
}
 8002750:	e7cf      	b.n	80026f2 <GesMajEEprom+0x1e>
{
 8002752:	2300      	movs	r3, #0
 8002754:	e7ef      	b.n	8002736 <GesMajEEprom+0x62>
 8002756:	bf00      	nop
 8002758:	200002e0 	.word	0x200002e0

0800275c <TrtRecCAN>:
	if (Status == HAL_OK)
 800275c:	bb00      	cbnz	r0, 80027a0 <TrtRecCAN+0x44>
{
 800275e:	b538      	push	{r3, r4, r5, lr}
 8002760:	460c      	mov	r4, r1
 8002762:	461d      	mov	r5, r3
		if (IdTrame == ID_REC_IMG_BMP)
 8002764:	2942      	cmp	r1, #66	; 0x42
 8002766:	d009      	beq.n	800277c <TrtRecCAN+0x20>
		if (IdTrame == ID_REC_IMG_CMD)
 8002768:	2c41      	cmp	r4, #65	; 0x41
 800276a:	d00b      	beq.n	8002784 <TrtRecCAN+0x28>
		if (IdTrame == ID_MSG_REC_ST_PAY)
 800276c:	2c40      	cmp	r4, #64	; 0x40
 800276e:	d00e      	beq.n	800278e <TrtRecCAN+0x32>
		if ((IdTrame & MASK_ACCEPT_B2) == ID_MSG_CONFIG_EEP)
 8002770:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002774:	4023      	ands	r3, r4
 8002776:	2b50      	cmp	r3, #80	; 0x50
 8002778:	d00d      	beq.n	8002796 <TrtRecCAN+0x3a>
}
 800277a:	bd38      	pop	{r3, r4, r5, pc}
		     GesRecImage(DataRec);
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fe97 	bl	80024b0 <GesRecImage>
 8002782:	e7f1      	b.n	8002768 <TrtRecCAN+0xc>
		     GesCmdImage(DataRec, &AppelImg);
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <TrtRecCAN+0x48>)
 8002786:	4628      	mov	r0, r5
 8002788:	f7ff ff68 	bl	800265c <GesCmdImage>
 800278c:	e7ee      	b.n	800276c <TrtRecCAN+0x10>
		     ModeEnCours = DataRec[1];
 800278e:	786a      	ldrb	r2, [r5, #1]
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <TrtRecCAN+0x4c>)
 8002792:	731a      	strb	r2, [r3, #12]
 8002794:	e7ec      	b.n	8002770 <TrtRecCAN+0x14>
		     GesMajEEprom(IdTrame, DataRec);
 8002796:	4629      	mov	r1, r5
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff ff9b 	bl	80026d4 <GesMajEEprom>
}
 800279e:	e7ec      	b.n	800277a <TrtRecCAN+0x1e>
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000318 	.word	0x20000318
 80027a8:	2000004e 	.word	0x2000004e

080027ac <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 80027ac:	b500      	push	{lr}
 80027ae:	b08b      	sub	sp, #44	; 0x2c
	StatusCAN = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80027b0:	ab01      	add	r3, sp, #4
 80027b2:	aa03      	add	r2, sp, #12
 80027b4:	2100      	movs	r1, #0
 80027b6:	f7fd fe78 	bl	80004aa <HAL_CAN_GetRxMessage>
	TrtRecCAN(StatusCAN, RxHeader.StdId, RxHeader.DLC, RxData);
 80027ba:	ab01      	add	r3, sp, #4
 80027bc:	9a07      	ldr	r2, [sp, #28]
 80027be:	9903      	ldr	r1, [sp, #12]
 80027c0:	f7ff ffcc 	bl	800275c <TrtRecCAN>
}
 80027c4:	b00b      	add	sp, #44	; 0x2c
 80027c6:	f85d fb04 	ldr.w	pc, [sp], #4

080027ca <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 80027ca:	b500      	push	{lr}
 80027cc:	b08b      	sub	sp, #44	; 0x2c
	StatusCAN = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80027ce:	ab01      	add	r3, sp, #4
 80027d0:	aa03      	add	r2, sp, #12
 80027d2:	2101      	movs	r1, #1
 80027d4:	f7fd fe69 	bl	80004aa <HAL_CAN_GetRxMessage>
	TrtRecCAN(StatusCAN, RxHeader.StdId, RxHeader.DLC, RxData);
 80027d8:	ab01      	add	r3, sp, #4
 80027da:	9a07      	ldr	r2, [sp, #28]
 80027dc:	9903      	ldr	r1, [sp, #12]
 80027de:	f7ff ffbd 	bl	800275c <TrtRecCAN>
}
 80027e2:	b00b      	add	sp, #44	; 0x2c
 80027e4:	f85d fb04 	ldr.w	pc, [sp], #4

080027e8 <InitBusCAN>:
//

#define ID_MSG_TEST_EMI 0x64

void InitBusCAN(CAN_TxHeaderTypeDef *ptTxHeader, uint8_t *ptTxData, CAN_FilterTypeDef *ptFilterConfig)
{
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	4614      	mov	r4, r2

	HAL_StatusTypeDef StatusCAN;

	ptTxHeader->StdId = ID_MSG_TEST_EMI;      // D�termine l'adresse du p�riph�rique au quel la trame est destin�.
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	6003      	str	r3, [r0, #0]

	ptTxHeader->ExtId = 0x01;       // Adresse �tendue, non utilis�e dans note cas
 80027f2:	2601      	movs	r6, #1
 80027f4:	6046      	str	r6, [r0, #4]
	ptTxHeader->RTR = CAN_RTR_DATA; // Pr�cise que la trame contient des donn�es
 80027f6:	2500      	movs	r5, #0
 80027f8:	60c5      	str	r5, [r0, #12]
	ptTxHeader->IDE = CAN_ID_STD;   // Pr�cise que la trame est de type Standard
 80027fa:	6085      	str	r5, [r0, #8]
	ptTxHeader->DLC = 2;            // Pr�cise le nombre d'octets de donn�es que la trame transporte ( De 0 � 8 )
 80027fc:	2302      	movs	r3, #2
 80027fe:	6103      	str	r3, [r0, #16]
	ptTxHeader->TransmitGlobalTime = DISABLE;
 8002800:	7505      	strb	r5, [r0, #20]
	ptTxData[0] = 0xAA;
 8002802:	23aa      	movs	r3, #170	; 0xaa
 8002804:	700b      	strb	r3, [r1, #0]
	ptTxData[1] = 0x55;
 8002806:	2355      	movs	r3, #85	; 0x55
 8002808:	704b      	strb	r3, [r1, #1]

	//-- filtre 1 --//
    ptFilterConfig->FilterBank = 0;
 800280a:	6155      	str	r5, [r2, #20]
	ptFilterConfig->FilterMode = CAN_FILTERMODE_IDMASK;
 800280c:	6195      	str	r5, [r2, #24]
	ptFilterConfig->FilterScale = CAN_FILTERSCALE_32BIT;
 800280e:	61d6      	str	r6, [r2, #28]
	ptFilterConfig->FilterIdHigh = ID_REC_IMG_BMP << 5;           // Ici, 320 est l'adresse de la carte. Il peux �tre diff�rent pour chaque carte.
 8002810:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8002814:	6013      	str	r3, [r2, #0]
	ptFilterConfig->FilterIdLow  = 0;
 8002816:	6055      	str	r5, [r2, #4]
	ptFilterConfig->FilterMaskIdHigh = MASK_ACCEPT_B1 << 5;       // Le masque peux servir � accepter une plage d'adresse au lieu d'une adresse unique.
 8002818:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8002874 <InitBusCAN+0x8c>
 800281c:	f8c2 9008 	str.w	r9, [r2, #8]
	ptFilterConfig->FilterMaskIdLow = 0;
 8002820:	60d5      	str	r5, [r2, #12]
	ptFilterConfig->FilterFIFOAssignment = CAN_RX_FIFO0;
 8002822:	6115      	str	r5, [r2, #16]
	ptFilterConfig->FilterActivation = ENABLE;
 8002824:	6216      	str	r6, [r2, #32]
	ptFilterConfig->SlaveStartFilterBank = 14;			 // de 0 � 27
 8002826:	f04f 080e 	mov.w	r8, #14
 800282a:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	StatusCAN = HAL_CAN_ConfigFilter(&hcan, ptFilterConfig);      // Configure le filtre comme ci-dessus
 800282e:	4f10      	ldr	r7, [pc, #64]	; (8002870 <InitBusCAN+0x88>)
 8002830:	4611      	mov	r1, r2
 8002832:	4638      	mov	r0, r7
 8002834:	f7fd fd8c 	bl	8000350 <HAL_CAN_ConfigFilter>


	//-- filtre 2 --//
	ptFilterConfig->FilterBank = 1;
 8002838:	6166      	str	r6, [r4, #20]
	ptFilterConfig->FilterMode = CAN_FILTERMODE_IDMASK;
 800283a:	61a5      	str	r5, [r4, #24]
	ptFilterConfig->FilterScale = CAN_FILTERSCALE_32BIT;
 800283c:	61e6      	str	r6, [r4, #28]
	ptFilterConfig->FilterIdHigh = ID_MSG_CONFIG_EEP << 5;           // Ici, 320 est l'adresse de la carte. Il peux �tre diff�rent pour chaque carte.
 800283e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002842:	6023      	str	r3, [r4, #0]
	ptFilterConfig->FilterIdLow  = 0;
 8002844:	6065      	str	r5, [r4, #4]
	ptFilterConfig->FilterMaskIdHigh = MASK_ACCEPT_B2 << 5;       // Le masque peux servir � accepter une plage d'adresse au lieu d'une adresse unique.
 8002846:	f8c4 9008 	str.w	r9, [r4, #8]
	ptFilterConfig->FilterMaskIdLow = 0;
 800284a:	60e5      	str	r5, [r4, #12]
	ptFilterConfig->FilterFIFOAssignment = CAN_RX_FIFO1;
 800284c:	6126      	str	r6, [r4, #16]
	ptFilterConfig->FilterActivation = ENABLE;
 800284e:	6226      	str	r6, [r4, #32]
	ptFilterConfig->SlaveStartFilterBank = 14;			 // de 0 � 27
 8002850:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	StatusCAN = HAL_CAN_ConfigFilter(&hcan, ptFilterConfig);      // Configure le filtre comme ci-dessus
 8002854:	4621      	mov	r1, r4
 8002856:	4638      	mov	r0, r7
 8002858:	f7fd fd7a 	bl	8000350 <HAL_CAN_ConfigFilter>



	StatusCAN = HAL_CAN_Start(&hcan);
 800285c:	4638      	mov	r0, r7
 800285e:	f7fd fdf6 	bl	800044e <HAL_CAN_Start>

	//-- initialisation des notifications sous IT --//
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8002862:	2112      	movs	r1, #18
 8002864:	4638      	mov	r0, r7
 8002866:	f7fd fec0 	bl	80005ea <HAL_CAN_ActivateNotification>


}
 800286a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800286e:	bf00      	nop
 8002870:	20000374 	.word	0x20000374
 8002874:	0001ff80 	.word	0x0001ff80

08002878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800287c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	2400      	movs	r4, #0
 8002880:	9404      	str	r4, [sp, #16]
 8002882:	9405      	str	r4, [sp, #20]
 8002884:	9406      	str	r4, [sp, #24]
 8002886:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <MX_GPIO_Init+0xd0>)
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	f042 0210 	orr.w	r2, r2, #16
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	f002 0210 	and.w	r2, r2, #16
 8002898:	9200      	str	r2, [sp, #0]
 800289a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	619a      	str	r2, [r3, #24]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	f002 0220 	and.w	r2, r2, #32
 80028aa:	9201      	str	r2, [sp, #4]
 80028ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	f042 0204 	orr.w	r2, r2, #4
 80028b4:	619a      	str	r2, [r3, #24]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	f002 0204 	and.w	r2, r2, #4
 80028bc:	9202      	str	r2, [sp, #8]
 80028be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	f042 0208 	orr.w	r2, r2, #8
 80028c6:	619a      	str	r2, [r3, #24]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	9303      	str	r3, [sp, #12]
 80028d0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BP_GPIO_Port, LED_BP_Pin, GPIO_PIN_RESET);
 80028d2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002950 <MX_GPIO_Init+0xd8>
 80028d6:	4622      	mov	r2, r4
 80028d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028dc:	4648      	mov	r0, r9
 80028de:	f7fe fa3f 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_MTRX_Pin|PAGE_MEM_Pin|LIGNE_A_Pin|LIGNE_B_Pin
 80028e2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002954 <MX_GPIO_Init+0xdc>
 80028e6:	4622      	mov	r2, r4
 80028e8:	f248 213f 	movw	r1, #33343	; 0x823f
 80028ec:	4640      	mov	r0, r8
 80028ee:	f7fe fa37 	bl	8000d60 <HAL_GPIO_WritePin>
                          |LIGNE_C_Pin|LIGNE_D_Pin|RAZ_CPT_Pin|DBG1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG2_Pin|R1_Pin|G1_Pin|B1_Pin
 80028f2:	4f16      	ldr	r7, [pc, #88]	; (800294c <MX_GPIO_Init+0xd4>)
 80028f4:	4622      	mov	r2, r4
 80028f6:	f64f 7119 	movw	r1, #65305	; 0xff19
 80028fa:	4638      	mov	r0, r7
 80028fc:	f7fe fa30 	bl	8000d60 <HAL_GPIO_WritePin>
                          |R2_Pin|G2_Pin|B2_Pin|LATCH_MTRX_Pin
                          |CLK_MEM_Pin|R_W_Pin|OE_MEM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_BP_Pin */
  GPIO_InitStruct.Pin = LED_BP_Pin;
 8002900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002904:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002906:	2601      	movs	r6, #1
 8002908:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2502      	movs	r5, #2
 800290e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LED_BP_GPIO_Port, &GPIO_InitStruct);
 8002910:	a904      	add	r1, sp, #16
 8002912:	4648      	mov	r0, r9
 8002914:	f7fe f914 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_MTRX_Pin PAGE_MEM_Pin LIGNE_A_Pin LIGNE_B_Pin
                           LIGNE_C_Pin LIGNE_D_Pin RAZ_CPT_Pin DBG1_Pin */
  GPIO_InitStruct.Pin = CLK_MTRX_Pin|PAGE_MEM_Pin|LIGNE_A_Pin|LIGNE_B_Pin
 8002918:	f248 233f 	movw	r3, #33343	; 0x823f
 800291c:	9304      	str	r3, [sp, #16]
                          |LIGNE_C_Pin|LIGNE_D_Pin|RAZ_CPT_Pin|DBG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	a904      	add	r1, sp, #16
 8002926:	4640      	mov	r0, r8
 8002928:	f7fe f90a 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG2_Pin R1_Pin G1_Pin B1_Pin
                           R2_Pin G2_Pin B2_Pin LATCH_MTRX_Pin
                           CLK_MEM_Pin R_W_Pin OE_MEM_Pin */
  GPIO_InitStruct.Pin = DBG2_Pin|R1_Pin|G1_Pin|B1_Pin
 800292c:	f64f 7319 	movw	r3, #65305	; 0xff19
 8002930:	9304      	str	r3, [sp, #16]
                          |R2_Pin|G2_Pin|B2_Pin|LATCH_MTRX_Pin
                          |CLK_MEM_Pin|R_W_Pin|OE_MEM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	a904      	add	r1, sp, #16
 800293a:	4638      	mov	r0, r7
 800293c:	f7fe f900 	bl	8000b40 <HAL_GPIO_Init>

}
 8002940:	b009      	add	sp, #36	; 0x24
 8002942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	40010c00 	.word	0x40010c00
 8002950:	40011000 	.word	0x40011000
 8002954:	40010800 	.word	0x40010800

08002958 <MX_TIM1_Init>:
{
 8002958:	b530      	push	{r4, r5, lr}
 800295a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295c:	2500      	movs	r5, #0
 800295e:	9502      	str	r5, [sp, #8]
 8002960:	9503      	str	r5, [sp, #12]
 8002962:	9504      	str	r5, [sp, #16]
 8002964:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002966:	9500      	str	r5, [sp, #0]
 8002968:	9501      	str	r5, [sp, #4]
  htim1.Instance = TIM1;
 800296a:	4c11      	ldr	r4, [pc, #68]	; (80029b0 <MX_TIM1_Init+0x58>)
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <MX_TIM1_Init+0x5c>)
 800296e:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 72;
 8002970:	2348      	movs	r3, #72	; 0x48
 8002972:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 1000;
 8002976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297a:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297c:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800297e:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff f9ed 	bl	8001d64 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002990:	a902      	add	r1, sp, #8
 8002992:	4620      	mov	r0, r4
 8002994:	f7ff fae3 	bl	8001f5e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299a:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800299c:	4669      	mov	r1, sp
 800299e:	4620      	mov	r0, r4
 80029a0:	f7ff fc0c 	bl	80021bc <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim1);     //##################################//
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7ff f8ad 	bl	8001b04 <HAL_TIM_Base_Start_IT>
}
 80029aa:	b007      	add	sp, #28
 80029ac:	bd30      	pop	{r4, r5, pc}
 80029ae:	bf00      	nop
 80029b0:	200003e4 	.word	0x200003e4
 80029b4:	40012c00 	.word	0x40012c00

080029b8 <MX_TIM2_Init>:
{
 80029b8:	b530      	push	{r4, r5, lr}
 80029ba:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029bc:	2500      	movs	r5, #0
 80029be:	9502      	str	r5, [sp, #8]
 80029c0:	9503      	str	r5, [sp, #12]
 80029c2:	9504      	str	r5, [sp, #16]
 80029c4:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c6:	9500      	str	r5, [sp, #0]
 80029c8:	9501      	str	r5, [sp, #4]
  htim2.Instance = TIM2;
 80029ca:	4c10      	ldr	r4, [pc, #64]	; (8002a0c <MX_TIM2_Init+0x54>)
 80029cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029d0:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 36;
 80029d2:	2324      	movs	r3, #36	; 0x24
 80029d4:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d6:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 7;
 80029d8:	2307      	movs	r3, #7
 80029da:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029dc:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff f9be 	bl	8001d64 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ec:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029ee:	a902      	add	r1, sp, #8
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff fab4 	bl	8001f5e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029fa:	4669      	mov	r1, sp
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7ff fbdd 	bl	80021bc <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim2);     //##################################//
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff f87e 	bl	8001b04 <HAL_TIM_Base_Start_IT>
}
 8002a08:	b007      	add	sp, #28
 8002a0a:	bd30      	pop	{r4, r5, pc}
 8002a0c:	2000042c 	.word	0x2000042c

08002a10 <MX_TIM3_Init>:
{
 8002a10:	b530      	push	{r4, r5, lr}
 8002a12:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a14:	2400      	movs	r4, #0
 8002a16:	940a      	str	r4, [sp, #40]	; 0x28
 8002a18:	940b      	str	r4, [sp, #44]	; 0x2c
 8002a1a:	940c      	str	r4, [sp, #48]	; 0x30
 8002a1c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1e:	9408      	str	r4, [sp, #32]
 8002a20:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a22:	9401      	str	r4, [sp, #4]
 8002a24:	9402      	str	r4, [sp, #8]
 8002a26:	9403      	str	r4, [sp, #12]
 8002a28:	9404      	str	r4, [sp, #16]
 8002a2a:	9405      	str	r4, [sp, #20]
 8002a2c:	9406      	str	r4, [sp, #24]
 8002a2e:	9407      	str	r4, [sp, #28]
  htim3.Instance = TIM3;
 8002a30:	4d1a      	ldr	r5, [pc, #104]	; (8002a9c <MX_TIM3_Init+0x8c>)
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <MX_TIM3_Init+0x90>)
 8002a34:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 36;
 8002a36:	2324      	movs	r3, #36	; 0x24
 8002a38:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 256;
 8002a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a40:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a42:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a44:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a46:	4628      	mov	r0, r5
 8002a48:	f7ff f98c 	bl	8001d64 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a50:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a52:	a90a      	add	r1, sp, #40	; 0x28
 8002a54:	4628      	mov	r0, r5
 8002a56:	f7ff fa82 	bl	8001f5e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f7ff f9ae 	bl	8001dbc <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a60:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a62:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a64:	a908      	add	r1, sp, #32
 8002a66:	4628      	mov	r0, r5
 8002a68:	f7ff fba8 	bl	80021bc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a6c:	2360      	movs	r3, #96	; 0x60
 8002a6e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002a70:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a72:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a74:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a76:	2204      	movs	r2, #4
 8002a78:	eb0d 0102 	add.w	r1, sp, r2
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f7ff f9fb 	bl	8001e78 <HAL_TIM_PWM_ConfigChannel>
  sConfigOCUser.OCMode     = sConfigOC.OCMode;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <MX_TIM3_Init+0x94>)
 8002a84:	9a01      	ldr	r2, [sp, #4]
 8002a86:	601a      	str	r2, [r3, #0]
  sConfigOCUser.OCPolarity = sConfigOC.OCPolarity;
 8002a88:	9a03      	ldr	r2, [sp, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
  sConfigOCUser.OCFastMode = sConfigOC.OCFastMode;
 8002a8c:	9a05      	ldr	r2, [sp, #20]
 8002a8e:	611a      	str	r2, [r3, #16]
  HAL_TIM_MspPostInit(&htim3);
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 f9b7 	bl	8002e04 <HAL_TIM_MspPostInit>
}
 8002a96:	b00f      	add	sp, #60	; 0x3c
 8002a98:	bd30      	pop	{r4, r5, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000039c 	.word	0x2000039c
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	20000060 	.word	0x20000060

08002aa8 <MX_CAN_Init>:
{
 8002aa8:	b508      	push	{r3, lr}
  hcan.Instance = CAN1;
 8002aaa:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <MX_CAN_Init+0x30>)
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <MX_CAN_Init+0x34>)
 8002aae:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 8002ab0:	2309      	movs	r3, #9
 8002ab2:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ab8:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8002aba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002abe:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ac4:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002ac6:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002ac8:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002aca:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002acc:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002ace:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002ad0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002ad2:	f7fd fb97 	bl	8000204 <HAL_CAN_Init>
}
 8002ad6:	bd08      	pop	{r3, pc}
 8002ad8:	20000374 	.word	0x20000374
 8002adc:	40006400 	.word	0x40006400

08002ae0 <MX_I2C1_Init>:
{
 8002ae0:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8002ae2:	4809      	ldr	r0, [pc, #36]	; (8002b08 <MX_I2C1_Init+0x28>)
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_I2C1_Init+0x2c>)
 8002ae6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MX_I2C1_Init+0x30>)
 8002aea:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aec:	2300      	movs	r3, #0
 8002aee:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002af0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002af6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002af8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002afa:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002afc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002afe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b00:	f7fe fa94 	bl	800102c <HAL_I2C_Init>
}
 8002b04:	bd08      	pop	{r3, pc}
 8002b06:	bf00      	nop
 8002b08:	20000320 	.word	0x20000320
 8002b0c:	40005400 	.word	0x40005400
 8002b10:	000186a0 	.word	0x000186a0

08002b14 <HAL_TIM_PeriodElapsedCallback>:
{
 8002b14:	b508      	push	{r3, lr}
	if (htim->Instance == TIM2)
 8002b16:	6803      	ldr	r3, [r0, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d000      	beq.n	8002b20 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8002b1e:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(DBG1_GPIO_Port,DBG1_Pin);
 8002b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002b26:	f7fe f921 	bl	8000d6c <HAL_GPIO_TogglePin>
		SpgIntMatrice();
 8002b2a:	f7ff fc3b 	bl	80023a4 <SpgIntMatrice>
}
 8002b2e:	e7f6      	b.n	8002b1e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002b30:	40010800 	.word	0x40010800

08002b34 <SystemClock_Config>:
{
 8002b34:	b530      	push	{r4, r5, lr}
 8002b36:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b38:	2400      	movs	r4, #0
 8002b3a:	9409      	str	r4, [sp, #36]	; 0x24
 8002b3c:	940b      	str	r4, [sp, #44]	; 0x2c
 8002b3e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b40:	9401      	str	r4, [sp, #4]
 8002b42:	9402      	str	r4, [sp, #8]
 8002b44:	9403      	str	r4, [sp, #12]
 8002b46:	9404      	str	r4, [sp, #16]
 8002b48:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b52:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b54:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b56:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b58:	2502      	movs	r5, #2
 8002b5a:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b5c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b62:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b64:	a806      	add	r0, sp, #24
 8002b66:	f7fe fc11 	bl	800138c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b6a:	230f      	movs	r3, #15
 8002b6c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b70:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b72:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002b76:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b78:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	a801      	add	r0, sp, #4
 8002b7e:	f7fe fe43 	bl	8001808 <HAL_RCC_ClockConfig>
}
 8002b82:	b011      	add	sp, #68	; 0x44
 8002b84:	bd30      	pop	{r4, r5, pc}
	...

08002b88 <main>:
{
 8002b88:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8002b8a:	f7fd fb03 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002b8e:	f7ff ffd1 	bl	8002b34 <SystemClock_Config>
  MX_GPIO_Init();
 8002b92:	f7ff fe71 	bl	8002878 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002b96:	f7ff fedf 	bl	8002958 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b9a:	f7ff ff39 	bl	8002a10 <MX_TIM3_Init>
  MX_CAN_Init();
 8002b9e:	f7ff ff83 	bl	8002aa8 <MX_CAN_Init>
  MX_I2C1_Init();
 8002ba2:	f7ff ff9d 	bl	8002ae0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002ba6:	f7ff ff07 	bl	80029b8 <MX_TIM2_Init>
  Etat = HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_2);
 8002baa:	2104      	movs	r1, #4
 8002bac:	481a      	ldr	r0, [pc, #104]	; (8002c18 <main+0x90>)
 8002bae:	f7ff fa55 	bl	800205c <HAL_TIM_PWM_Start>
  InitBusCAN(&TxHeader, TxData, &sFilterConfig);
 8002bb2:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <main+0x94>)
 8002bb4:	491a      	ldr	r1, [pc, #104]	; (8002c20 <main+0x98>)
 8002bb6:	481b      	ldr	r0, [pc, #108]	; (8002c24 <main+0x9c>)
 8002bb8:	f7ff fe16 	bl	80027e8 <InitBusCAN>
  EcrConfigEEPDebug();    //-- a supprimer apres debug
 8002bbc:	f7ff fbd4 	bl	8002368 <EcrConfigEEPDebug>
  HAL_Delay(50);
 8002bc0:	2032      	movs	r0, #50	; 0x32
 8002bc2:	f7fd fb0b 	bl	80001dc <HAL_Delay>
  LecConfigEEP();
 8002bc6:	f7ff fbb1 	bl	800232c <LecConfigEEP>
  uint8_t TempoImg = 0;
 8002bca:	2500      	movs	r5, #0
  uint8_t CptWDog = 0;
 8002bcc:	462c      	mov	r4, r5
 8002bce:	e011      	b.n	8002bf4 <main+0x6c>
	     AppelImg.MajImg = FAUX;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <main+0xa0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e011      	b.n	8002bfc <main+0x74>
	     TempoImg = 0;
 8002bd8:	461d      	mov	r5, r3
	CptWDog++;
 8002bda:	3401      	adds	r4, #1
 8002bdc:	b2e4      	uxtb	r4, r4
    if (CptWDog == TEMPO_WDOG)
 8002bde:	2c14      	cmp	r4, #20
 8002be0:	d105      	bne.n	8002bee <main+0x66>
    	HAL_GPIO_TogglePin (LED_BP_GPIO_Port, LED_BP_Pin);
 8002be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002be6:	4811      	ldr	r0, [pc, #68]	; (8002c2c <main+0xa4>)
 8002be8:	f7fe f8c0 	bl	8000d6c <HAL_GPIO_TogglePin>
    	CptWDog = 0;
 8002bec:	2400      	movs	r4, #0
  	HAL_Delay(10);
 8002bee:	200a      	movs	r0, #10
 8002bf0:	f7fd faf4 	bl	80001dc <HAL_Delay>
	if (AppelImg.MajImg == VRAI)
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <main+0xa0>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d0e9      	beq.n	8002bd0 <main+0x48>
	if (AppelImg.Tempo2Img != 0)
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <main+0xa0>)
 8002bfe:	79db      	ldrb	r3, [r3, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0e9      	beq.n	8002bd8 <main+0x50>
	     TempoImg++;
 8002c04:	3501      	adds	r5, #1
 8002c06:	b2ed      	uxtb	r5, r5
	     if (TempoImg == AppelImg.Tempo2Img)
 8002c08:	42ab      	cmp	r3, r5
 8002c0a:	d1e6      	bne.n	8002bda <main+0x52>
	         HAL_GPIO_TogglePin (PAGE_MEM_GPIO_Port, PAGE_MEM_Pin);
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	4808      	ldr	r0, [pc, #32]	; (8002c30 <main+0xa8>)
 8002c10:	f7fe f8ac 	bl	8000d6c <HAL_GPIO_TogglePin>
	         TempoImg = 0;
 8002c14:	2500      	movs	r5, #0
 8002c16:	e7e0      	b.n	8002bda <main+0x52>
 8002c18:	2000039c 	.word	0x2000039c
 8002c1c:	200000a0 	.word	0x200000a0
 8002c20:	200002d4 	.word	0x200002d4
 8002c24:	20000300 	.word	0x20000300
 8002c28:	20000318 	.word	0x20000318
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	40010800 	.word	0x40010800

08002c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c34:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_MspInit+0x3c>)
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	619a      	str	r2, [r3, #24]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	f002 0201 	and.w	r2, r2, #1
 8002c46:	9200      	str	r2, [sp, #0]
 8002c48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c50:	61da      	str	r2, [r3, #28]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c5c:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <HAL_MspInit+0x40>)
 8002c5e:	6853      	ldr	r3, [r2, #4]
 8002c60:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	b002      	add	sp, #8
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40010000 	.word	0x40010000

08002c78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c78:	b530      	push	{r4, r5, lr}
 8002c7a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9302      	str	r3, [sp, #8]
 8002c80:	9303      	str	r3, [sp, #12]
 8002c82:	9304      	str	r3, [sp, #16]
 8002c84:	9305      	str	r3, [sp, #20]
  if(hcan->Instance==CAN1)
 8002c86:	6802      	ldr	r2, [r0, #0]
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_CAN_MspInit+0x90>)
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <HAL_CAN_MspInit+0x1a>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002c8e:	b007      	add	sp, #28
 8002c90:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c92:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002c9c:	61da      	str	r2, [r3, #28]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002ca4:	9200      	str	r2, [sp, #0]
 8002ca6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	f042 0204 	orr.w	r2, r2, #4
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	4d11      	ldr	r5, [pc, #68]	; (8002d0c <HAL_CAN_MspInit+0x94>)
 8002cc8:	a902      	add	r1, sp, #8
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f7fd ff38 	bl	8000b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cde:	a902      	add	r1, sp, #8
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f7fd ff2d 	bl	8000b40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 4, 0);
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	2104      	movs	r1, #4
 8002cea:	2014      	movs	r0, #20
 8002cec:	f7fd fdd2 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002cf0:	2014      	movs	r0, #20
 8002cf2:	f7fd fe03 	bl	80008fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	2105      	movs	r1, #5
 8002cfa:	2015      	movs	r0, #21
 8002cfc:	f7fd fdca 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002d00:	2015      	movs	r0, #21
 8002d02:	f7fd fdfb 	bl	80008fc <HAL_NVIC_EnableIRQ>
}
 8002d06:	e7c2      	b.n	8002c8e <HAL_CAN_MspInit+0x16>
 8002d08:	40006400 	.word	0x40006400
 8002d0c:	40010800 	.word	0x40010800

08002d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d10:	b510      	push	{r4, lr}
 8002d12:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	2300      	movs	r3, #0
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	9303      	str	r3, [sp, #12]
 8002d1a:	9304      	str	r3, [sp, #16]
 8002d1c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8002d1e:	6802      	ldr	r2, [r0, #0]
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_I2C_MspInit+0x58>)
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */
  //############### ATTENTION au bug horloge I2C ##############
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d26:	b006      	add	sp, #24
 8002d28:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	4c10      	ldr	r4, [pc, #64]	; (8002d6c <HAL_I2C_MspInit+0x5c>)
 8002d2c:	69a3      	ldr	r3, [r4, #24]
 8002d2e:	f043 0308 	orr.w	r3, r3, #8
 8002d32:	61a3      	str	r3, [r4, #24]
 8002d34:	69a3      	ldr	r3, [r4, #24]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d3e:	23c0      	movs	r3, #192	; 0xc0
 8002d40:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d42:	2312      	movs	r3, #18
 8002d44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4a:	a902      	add	r1, sp, #8
 8002d4c:	4808      	ldr	r0, [pc, #32]	; (8002d70 <HAL_I2C_MspInit+0x60>)
 8002d4e:	f7fd fef7 	bl	8000b40 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d52:	69e3      	ldr	r3, [r4, #28]
 8002d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d58:	61e3      	str	r3, [r4, #28]
 8002d5a:	69e3      	ldr	r3, [r4, #28]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	9b01      	ldr	r3, [sp, #4]
}
 8002d64:	e7df      	b.n	8002d26 <HAL_I2C_MspInit+0x16>
 8002d66:	bf00      	nop
 8002d68:	40005400 	.word	0x40005400
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010c00 	.word	0x40010c00

08002d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d74:	b500      	push	{lr}
 8002d76:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_TIM_Base_MspInit+0x84>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d008      	beq.n	8002d92 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d018      	beq.n	8002db8 <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002d86:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <HAL_TIM_Base_MspInit+0x88>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d029      	beq.n	8002de0 <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d8c:	b005      	add	sp, #20
 8002d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_TIM_Base_MspInit+0x8c>)
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9a:	619a      	str	r2, [r3, #24]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	4611      	mov	r1, r2
 8002daa:	2019      	movs	r0, #25
 8002dac:	f7fd fd72 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002db0:	2019      	movs	r0, #25
 8002db2:	f7fd fda3 	bl	80008fc <HAL_NVIC_EnableIRQ>
 8002db6:	e7e9      	b.n	8002d8c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	61da      	str	r2, [r3, #28]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	201c      	movs	r0, #28
 8002dd4:	f7fd fd5e 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dd8:	201c      	movs	r0, #28
 8002dda:	f7fd fd8f 	bl	80008fc <HAL_NVIC_EnableIRQ>
 8002dde:	e7d5      	b.n	8002d8c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_TIM_Base_MspInit+0x8c>)
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	f042 0202 	orr.w	r2, r2, #2
 8002de8:	61da      	str	r2, [r3, #28]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	9303      	str	r3, [sp, #12]
 8002df2:	9b03      	ldr	r3, [sp, #12]
}
 8002df4:	e7ca      	b.n	8002d8c <HAL_TIM_Base_MspInit+0x18>
 8002df6:	bf00      	nop
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e04:	b500      	push	{lr}
 8002e06:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	2300      	movs	r3, #0
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	9303      	str	r3, [sp, #12]
 8002e0e:	9304      	str	r3, [sp, #16]
 8002e10:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8002e12:	6802      	ldr	r2, [r0, #0]
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_TIM_MspPostInit+0x58>)
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d002      	beq.n	8002e20 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e1a:	b007      	add	sp, #28
 8002e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e20:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	f042 0208 	orr.w	r2, r2, #8
 8002e2a:	619a      	str	r2, [r3, #24]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e36:	2320      	movs	r3, #32
 8002e38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	a902      	add	r1, sp, #8
 8002e42:	4807      	ldr	r0, [pc, #28]	; (8002e60 <HAL_TIM_MspPostInit+0x5c>)
 8002e44:	f7fd fe7c 	bl	8000b40 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002e48:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <HAL_TIM_MspPostInit+0x60>)
 8002e4a:	6853      	ldr	r3, [r2, #4]
 8002e4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e50:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e58:	6053      	str	r3, [r2, #4]
}
 8002e5a:	e7de      	b.n	8002e1a <HAL_TIM_MspPostInit+0x16>
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40010c00 	.word	0x40010c00
 8002e64:	40010000 	.word	0x40010000

08002e68 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e68:	4770      	bx	lr

08002e6a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <HardFault_Handler>

08002e6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <MemManage_Handler>

08002e6e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <BusFault_Handler>

08002e70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <UsageFault_Handler>

08002e72 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e72:	4770      	bx	lr

08002e74 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e74:	4770      	bx	lr

08002e76 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e76:	4770      	bx	lr

08002e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e7a:	f7fd f99d 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7e:	bd08      	pop	{r3, pc}

08002e80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8002e84:	f7fd fbce 	bl	8000624 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002e88:	bd08      	pop	{r3, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000374 	.word	0x20000374

08002e90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002e92:	4802      	ldr	r0, [pc, #8]	; (8002e9c <CAN1_RX1_IRQHandler+0xc>)
 8002e94:	f7fd fbc6 	bl	8000624 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002e98:	bd08      	pop	{r3, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000374 	.word	0x20000374

08002ea0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ea2:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM1_UP_IRQHandler+0xc>)
 8002ea4:	f7fe fe67 	bl	8001b76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ea8:	bd08      	pop	{r3, pc}
 8002eaa:	bf00      	nop
 8002eac:	200003e4 	.word	0x200003e4

08002eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002eb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  HAL_GPIO_WritePin(DBG2_GPIO_Port,DBG2_Pin, GPIO_PIN_SET);
 8002eb2:	4c07      	ldr	r4, [pc, #28]	; (8002ed0 <TIM2_IRQHandler+0x20>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f7fd ff51 	bl	8000d60 <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <TIM2_IRQHandler+0x24>)
 8002ec0:	f7fe fe59 	bl	8001b76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_WritePin(DBG2_GPIO_Port,DBG2_Pin, GPIO_PIN_RESET);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7fd ff49 	bl	8000d60 <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002ece:	bd10      	pop	{r4, pc}
 8002ed0:	40010c00 	.word	0x40010c00
 8002ed4:	2000042c 	.word	0x2000042c

08002ed8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <SystemInit+0x40>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <SystemInit+0x44>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ef0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002efc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f04:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <SystemInit+0x48>)
 8002f0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f12:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	f8ff0000 	.word	0xf8ff0000
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <Reset_Handler>:
 8002f24:	2100      	movs	r1, #0
 8002f26:	e003      	b.n	8002f30 <LoopCopyDataInit>

08002f28 <CopyDataInit>:
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <LoopFillZerobss+0x14>)
 8002f2a:	585b      	ldr	r3, [r3, r1]
 8002f2c:	5043      	str	r3, [r0, r1]
 8002f2e:	3104      	adds	r1, #4

08002f30 <LoopCopyDataInit>:
 8002f30:	480a      	ldr	r0, [pc, #40]	; (8002f5c <LoopFillZerobss+0x18>)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <LoopFillZerobss+0x1c>)
 8002f34:	1842      	adds	r2, r0, r1
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3f6      	bcc.n	8002f28 <CopyDataInit>
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <LoopFillZerobss+0x20>)
 8002f3c:	e002      	b.n	8002f44 <LoopFillZerobss>

08002f3e <FillZerobss>:
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f842 3b04 	str.w	r3, [r2], #4

08002f44 <LoopFillZerobss>:
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <LoopFillZerobss+0x24>)
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d3f9      	bcc.n	8002f3e <FillZerobss>
 8002f4a:	f7ff ffc5 	bl	8002ed8 <SystemInit>
 8002f4e:	f000 f80f 	bl	8002f70 <__libc_init_array>
 8002f52:	f7ff fe19 	bl	8002b88 <main>
 8002f56:	4770      	bx	lr
 8002f58:	08003004 	.word	0x08003004
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000030 	.word	0x20000030
 8002f64:	20000030 	.word	0x20000030
 8002f68:	20000474 	.word	0x20000474

08002f6c <ADC1_2_IRQHandler>:
 8002f6c:	e7fe      	b.n	8002f6c <ADC1_2_IRQHandler>
	...

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	2600      	movs	r6, #0
 8002f74:	4d0c      	ldr	r5, [pc, #48]	; (8002fa8 <__libc_init_array+0x38>)
 8002f76:	4c0d      	ldr	r4, [pc, #52]	; (8002fac <__libc_init_array+0x3c>)
 8002f78:	1b64      	subs	r4, r4, r5
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	f000 f81a 	bl	8002fb8 <_init>
 8002f84:	2600      	movs	r6, #0
 8002f86:	4d0a      	ldr	r5, [pc, #40]	; (8002fb0 <__libc_init_array+0x40>)
 8002f88:	4c0a      	ldr	r4, [pc, #40]	; (8002fb4 <__libc_init_array+0x44>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08002ffc 	.word	0x08002ffc
 8002fac:	08002ffc 	.word	0x08002ffc
 8002fb0:	08002ffc 	.word	0x08002ffc
 8002fb4:	08003000 	.word	0x08003000

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
